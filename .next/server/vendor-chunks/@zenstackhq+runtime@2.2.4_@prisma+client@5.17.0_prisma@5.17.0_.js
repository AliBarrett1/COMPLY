/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_";
exports.ids = ["vendor-chunks/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_"];
exports.modules = {

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js ***!
  \*****************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DELEGATE_AUX_RELATION_PREFIX = exports.PRISMA_MINIMUM_VERSION = exports.PRISMA_PROXY_ENHANCER = exports.PrismaErrorCode = exports.CrudFailureReason = exports.DEFAULT_PASSWORD_SALT_LENGTH = exports.DEFAULT_RUNTIME_LOAD_PATH = void 0;\n/**\n * Default path for loading CLI-generated code\n */\nexports.DEFAULT_RUNTIME_LOAD_PATH = '.zenstack';\n/**\n * Default length of password hash salt (used by bcryptjs to hash password)\n */\nexports.DEFAULT_PASSWORD_SALT_LENGTH = 12;\n/**\n * Reasons for a CRUD operation to fail\n */\nvar CrudFailureReason;\n(function (CrudFailureReason) {\n    /**\n     * CRUD failed because of access policy violation.\n     */\n    CrudFailureReason[\"ACCESS_POLICY_VIOLATION\"] = \"ACCESS_POLICY_VIOLATION\";\n    /**\n     * CRUD succeeded but the result was not readable.\n     */\n    CrudFailureReason[\"RESULT_NOT_READABLE\"] = \"RESULT_NOT_READABLE\";\n    /**\n     * CRUD failed because of a data validation rule violation.\n     */\n    CrudFailureReason[\"DATA_VALIDATION_VIOLATION\"] = \"DATA_VALIDATION_VIOLATION\";\n})(CrudFailureReason || (exports.CrudFailureReason = CrudFailureReason = {}));\n/**\n * Prisma error codes used\n */\nvar PrismaErrorCode;\n(function (PrismaErrorCode) {\n    /**\n     * Unique constraint failed\n     */\n    PrismaErrorCode[\"UNIQUE_CONSTRAINT_FAILED\"] = \"P2002\";\n    /**\n     * A constraint failed on the database\n     */\n    PrismaErrorCode[\"CONSTRAINED_FAILED\"] = \"P2004\";\n    /**\n     * The required connected records were not found\n     */\n    PrismaErrorCode[\"REQUIRED_CONNECTED_RECORD_NOT_FOUND\"] = \"P2018\";\n    /**\n     * An operation failed because it depends on one or more records that were required but not found\n     */\n    PrismaErrorCode[\"DEPEND_ON_RECORD_NOT_FOUND\"] = \"P2025\";\n})(PrismaErrorCode || (exports.PrismaErrorCode = PrismaErrorCode = {}));\n/**\n * Field name for getting current enhancer\n */\nexports.PRISMA_PROXY_ENHANCER = '$__zenstack_enhancer';\n/**\n * Minimum Prisma version supported\n */\nexports.PRISMA_MINIMUM_VERSION = '5.0.0';\n/**\n * Prefix for auxiliary relation field generated for delegated models\n */\nexports.DELEGATE_AUX_RELATION_PREFIX = 'delegate_aux';\n//# sourceMappingURL=constants.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvY29uc3RhbnRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG9DQUFvQyxHQUFHLDhCQUE4QixHQUFHLDZCQUE2QixHQUFHLHVCQUF1QixHQUFHLHlCQUF5QixHQUFHLG9DQUFvQyxHQUFHLGlDQUFpQztBQUN0TztBQUNBO0FBQ0E7QUFDQSxpQ0FBaUM7QUFDakM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHdCQUF3Qix5QkFBeUIseUJBQXlCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0JBQXNCLHVCQUF1Qix1QkFBdUI7QUFDckU7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dC1qcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AemVuc3RhY2tocStydW50aW1lQDIuMi40X0BwcmlzbWErY2xpZW50QDUuMTcuMF9wcmlzbWFANS4xNy4wXy9ub2RlX21vZHVsZXMvQHplbnN0YWNraHEvcnVudGltZS9jb25zdGFudHMuanM/M2UzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuREVMRUdBVEVfQVVYX1JFTEFUSU9OX1BSRUZJWCA9IGV4cG9ydHMuUFJJU01BX01JTklNVU1fVkVSU0lPTiA9IGV4cG9ydHMuUFJJU01BX1BST1hZX0VOSEFOQ0VSID0gZXhwb3J0cy5QcmlzbWFFcnJvckNvZGUgPSBleHBvcnRzLkNydWRGYWlsdXJlUmVhc29uID0gZXhwb3J0cy5ERUZBVUxUX1BBU1NXT1JEX1NBTFRfTEVOR1RIID0gZXhwb3J0cy5ERUZBVUxUX1JVTlRJTUVfTE9BRF9QQVRIID0gdm9pZCAwO1xuLyoqXG4gKiBEZWZhdWx0IHBhdGggZm9yIGxvYWRpbmcgQ0xJLWdlbmVyYXRlZCBjb2RlXG4gKi9cbmV4cG9ydHMuREVGQVVMVF9SVU5USU1FX0xPQURfUEFUSCA9ICcuemVuc3RhY2snO1xuLyoqXG4gKiBEZWZhdWx0IGxlbmd0aCBvZiBwYXNzd29yZCBoYXNoIHNhbHQgKHVzZWQgYnkgYmNyeXB0anMgdG8gaGFzaCBwYXNzd29yZClcbiAqL1xuZXhwb3J0cy5ERUZBVUxUX1BBU1NXT1JEX1NBTFRfTEVOR1RIID0gMTI7XG4vKipcbiAqIFJlYXNvbnMgZm9yIGEgQ1JVRCBvcGVyYXRpb24gdG8gZmFpbFxuICovXG52YXIgQ3J1ZEZhaWx1cmVSZWFzb247XG4oZnVuY3Rpb24gKENydWRGYWlsdXJlUmVhc29uKSB7XG4gICAgLyoqXG4gICAgICogQ1JVRCBmYWlsZWQgYmVjYXVzZSBvZiBhY2Nlc3MgcG9saWN5IHZpb2xhdGlvbi5cbiAgICAgKi9cbiAgICBDcnVkRmFpbHVyZVJlYXNvbltcIkFDQ0VTU19QT0xJQ1lfVklPTEFUSU9OXCJdID0gXCJBQ0NFU1NfUE9MSUNZX1ZJT0xBVElPTlwiO1xuICAgIC8qKlxuICAgICAqIENSVUQgc3VjY2VlZGVkIGJ1dCB0aGUgcmVzdWx0IHdhcyBub3QgcmVhZGFibGUuXG4gICAgICovXG4gICAgQ3J1ZEZhaWx1cmVSZWFzb25bXCJSRVNVTFRfTk9UX1JFQURBQkxFXCJdID0gXCJSRVNVTFRfTk9UX1JFQURBQkxFXCI7XG4gICAgLyoqXG4gICAgICogQ1JVRCBmYWlsZWQgYmVjYXVzZSBvZiBhIGRhdGEgdmFsaWRhdGlvbiBydWxlIHZpb2xhdGlvbi5cbiAgICAgKi9cbiAgICBDcnVkRmFpbHVyZVJlYXNvbltcIkRBVEFfVkFMSURBVElPTl9WSU9MQVRJT05cIl0gPSBcIkRBVEFfVkFMSURBVElPTl9WSU9MQVRJT05cIjtcbn0pKENydWRGYWlsdXJlUmVhc29uIHx8IChleHBvcnRzLkNydWRGYWlsdXJlUmVhc29uID0gQ3J1ZEZhaWx1cmVSZWFzb24gPSB7fSkpO1xuLyoqXG4gKiBQcmlzbWEgZXJyb3IgY29kZXMgdXNlZFxuICovXG52YXIgUHJpc21hRXJyb3JDb2RlO1xuKGZ1bmN0aW9uIChQcmlzbWFFcnJvckNvZGUpIHtcbiAgICAvKipcbiAgICAgKiBVbmlxdWUgY29uc3RyYWludCBmYWlsZWRcbiAgICAgKi9cbiAgICBQcmlzbWFFcnJvckNvZGVbXCJVTklRVUVfQ09OU1RSQUlOVF9GQUlMRURcIl0gPSBcIlAyMDAyXCI7XG4gICAgLyoqXG4gICAgICogQSBjb25zdHJhaW50IGZhaWxlZCBvbiB0aGUgZGF0YWJhc2VcbiAgICAgKi9cbiAgICBQcmlzbWFFcnJvckNvZGVbXCJDT05TVFJBSU5FRF9GQUlMRURcIl0gPSBcIlAyMDA0XCI7XG4gICAgLyoqXG4gICAgICogVGhlIHJlcXVpcmVkIGNvbm5lY3RlZCByZWNvcmRzIHdlcmUgbm90IGZvdW5kXG4gICAgICovXG4gICAgUHJpc21hRXJyb3JDb2RlW1wiUkVRVUlSRURfQ09OTkVDVEVEX1JFQ09SRF9OT1RfRk9VTkRcIl0gPSBcIlAyMDE4XCI7XG4gICAgLyoqXG4gICAgICogQW4gb3BlcmF0aW9uIGZhaWxlZCBiZWNhdXNlIGl0IGRlcGVuZHMgb24gb25lIG9yIG1vcmUgcmVjb3JkcyB0aGF0IHdlcmUgcmVxdWlyZWQgYnV0IG5vdCBmb3VuZFxuICAgICAqL1xuICAgIFByaXNtYUVycm9yQ29kZVtcIkRFUEVORF9PTl9SRUNPUkRfTk9UX0ZPVU5EXCJdID0gXCJQMjAyNVwiO1xufSkoUHJpc21hRXJyb3JDb2RlIHx8IChleHBvcnRzLlByaXNtYUVycm9yQ29kZSA9IFByaXNtYUVycm9yQ29kZSA9IHt9KSk7XG4vKipcbiAqIEZpZWxkIG5hbWUgZm9yIGdldHRpbmcgY3VycmVudCBlbmhhbmNlclxuICovXG5leHBvcnRzLlBSSVNNQV9QUk9YWV9FTkhBTkNFUiA9ICckX196ZW5zdGFja19lbmhhbmNlcic7XG4vKipcbiAqIE1pbmltdW0gUHJpc21hIHZlcnNpb24gc3VwcG9ydGVkXG4gKi9cbmV4cG9ydHMuUFJJU01BX01JTklNVU1fVkVSU0lPTiA9ICc1LjAuMCc7XG4vKipcbiAqIFByZWZpeCBmb3IgYXV4aWxpYXJ5IHJlbGF0aW9uIGZpZWxkIGdlbmVyYXRlZCBmb3IgZGVsZWdhdGVkIG1vZGVsc1xuICovXG5leHBvcnRzLkRFTEVHQVRFX0FVWF9SRUxBVElPTl9QUkVGSVggPSAnZGVsZWdhdGVfYXV4Jztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js":
/*!*******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js ***!
  \*******************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __defProps = Object.defineProperties;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropDescs = Object.getOwnPropertyDescriptors;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getOwnPropSymbols = Object.getOwnPropertySymbols;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __propIsEnum = Object.prototype.propertyIsEnumerable;\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __spreadValues = (a, b) => {\n  for (var prop in b || (b = {}))\n    if (__hasOwnProp.call(b, prop))\n      __defNormalProp(a, prop, b[prop]);\n  if (__getOwnPropSymbols)\n    for (var prop of __getOwnPropSymbols(b)) {\n      if (__propIsEnum.call(b, prop))\n        __defNormalProp(a, prop, b[prop]);\n    }\n  return a;\n};\nvar __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from))\n      if (!__hasOwnProp.call(to, key) && key !== except)\n        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n  // If the importer is in node compatibility mode or this is not an ESM\n  // file that has been converted to a CommonJS file using a Babel-\n  // compatible transform (i.e. \"__esModule\" has not been set), then set\n  // \"default\" to the CommonJS \"module.exports\" for node compatibility.\n  isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", { value: mod, enumerable: true }) : target,\n  mod\n));\nvar __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\nvar __async = (__this, __arguments, generator) => {\n  return new Promise((resolve, reject) => {\n    var fulfilled = (value) => {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var rejected = (value) => {\n      try {\n        step(generator.throw(value));\n      } catch (e) {\n        reject(e);\n      }\n    };\n    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);\n    step((generator = generator.apply(__this, __arguments)).next());\n  });\n};\n\n// src/cross/index.ts\nvar cross_exports = {};\n__export(cross_exports, {\n  ModelDataVisitor: () => ModelDataVisitor,\n  NestedReadVisitor: () => NestedReadVisitor,\n  NestedWriteVisitor: () => NestedWriteVisitor,\n  PrismaWriteActions: () => PrismaWriteActions,\n  applyMutation: () => applyMutation,\n  enumerate: () => enumerate,\n  getFields: () => getFields,\n  getIdFields: () => getIdFields,\n  getModelFields: () => getModelFields,\n  getModelInfo: () => getModelInfo,\n  getMutatedModels: () => getMutatedModels,\n  getReadModels: () => getReadModels,\n  getUniqueConstraints: () => getUniqueConstraints,\n  isDelegateModel: () => isDelegateModel,\n  requireField: () => requireField,\n  resolveField: () => resolveField,\n  zip: () => zip\n});\nmodule.exports = __toCommonJS(cross_exports);\n\n// src/cross/model-data-visitor.ts\nvar ModelDataVisitor = class {\n  constructor(modelMeta) {\n    this.modelMeta = modelMeta;\n  }\n  /**\n   * Visits the given model data.\n   */\n  visit(model, data, callback) {\n    if (!data || typeof data !== \"object\") {\n      return;\n    }\n    const scalarData = {};\n    const subTasks = [];\n    for (const [k, v] of Object.entries(data)) {\n      const field = resolveField(this.modelMeta, model, k);\n      if (field && field.isDataModel) {\n        if (field.isArray && Array.isArray(v)) {\n          subTasks.push(...v.map((item) => ({ model: field.type, data: item })));\n        } else {\n          subTasks.push({ model: field.type, data: v });\n        }\n      } else {\n        scalarData[k] = v;\n      }\n    }\n    callback(model, data, scalarData);\n    subTasks.forEach(({ model: model2, data: data2 }) => this.visit(model2, data2, callback));\n  }\n};\n\n// src/cross/model-meta.ts\nvar import_lower_case_first = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nfunction resolveField(modelMeta, model, field) {\n  var _a, _b;\n  return (_b = (_a = modelMeta.models[(0, import_lower_case_first.lowerCaseFirst)(model)]) == null ? void 0 : _a.fields) == null ? void 0 : _b[field];\n}\nfunction requireField(modelMeta, model, field) {\n  const f = resolveField(modelMeta, model, field);\n  if (!f) {\n    throw new Error(`Field ${model}.${field} cannot be resolved`);\n  }\n  return f;\n}\nfunction getFields(modelMeta, model) {\n  var _a;\n  return (_a = modelMeta.models[(0, import_lower_case_first.lowerCaseFirst)(model)]) == null ? void 0 : _a.fields;\n}\nfunction getUniqueConstraints(modelMeta, model) {\n  var _a;\n  return (_a = modelMeta.models[(0, import_lower_case_first.lowerCaseFirst)(model)]) == null ? void 0 : _a.uniqueConstraints;\n}\n\n// src/cross/mutator.ts\nvar import_uuid = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/.pnpm/uuid@9.0.1/node_modules/uuid/dist/esm-node/index.js\");\nvar import_deepcopy = __toESM(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nfunction applyMutation(queryModel, queryOp, queryData, mutationModel, mutationOp, mutationArgs, modelMeta, logging) {\n  return __async(this, null, function* () {\n    if ([\"count\", \"aggregate\", \"groupBy\"].includes(queryOp)) {\n      return void 0;\n    }\n    let resultData = queryData;\n    let updated = false;\n    const visitor = new NestedWriteVisitor(modelMeta, {\n      create: (model, args) => {\n        if (model === queryModel) {\n          const r = createMutate(queryModel, queryOp, resultData, args, modelMeta, logging);\n          if (r) {\n            resultData = r;\n            updated = true;\n          }\n        }\n      },\n      createMany: (model, args) => {\n        if (model === queryModel && (args == null ? void 0 : args.data)) {\n          for (const oneArg of enumerate(args.data)) {\n            const r = createMutate(queryModel, queryOp, resultData, oneArg, modelMeta, logging);\n            if (r) {\n              resultData = r;\n              updated = true;\n            }\n          }\n        }\n      },\n      update: (model, args) => {\n        if (model === queryModel) {\n          const r = updateMutate(queryModel, resultData, model, args, modelMeta, logging);\n          if (r) {\n            resultData = r;\n            updated = true;\n          }\n        }\n      },\n      delete: (model, args) => {\n        if (model === queryModel) {\n          const r = deleteMutate(queryModel, resultData, model, args, modelMeta, logging);\n          if (r) {\n            resultData = r;\n            updated = true;\n          }\n        }\n      }\n    });\n    yield visitor.visit(mutationModel, mutationOp, mutationArgs);\n    return updated ? resultData : void 0;\n  });\n}\nfunction createMutate(queryModel, queryOp, currentData, newData, modelMeta, logging) {\n  if (!newData) {\n    return void 0;\n  }\n  if (queryOp !== \"findMany\") {\n    return void 0;\n  }\n  const modelFields = getFields(modelMeta, queryModel);\n  if (!modelFields) {\n    return void 0;\n  }\n  const insert = {};\n  const newDataFields = Object.keys(newData);\n  Object.entries(modelFields).forEach(([name, field]) => {\n    var _a, _b, _c, _d;\n    if (field.isDataModel) {\n      return;\n    }\n    if (newDataFields.includes(name)) {\n      insert[name] = newData[name];\n    } else {\n      const defaultAttr = (_a = field.attributes) == null ? void 0 : _a.find((attr) => attr.name === \"@default\");\n      if (field.type === \"DateTime\") {\n        if (defaultAttr || ((_b = field.attributes) == null ? void 0 : _b.some((attr) => attr.name === \"@updatedAt\"))) {\n          insert[name] = /* @__PURE__ */ new Date();\n        }\n      } else if (((_d = (_c = defaultAttr == null ? void 0 : defaultAttr.args) == null ? void 0 : _c[0]) == null ? void 0 : _d.value) !== void 0) {\n        insert[name] = defaultAttr.args[0].value;\n      }\n    }\n  });\n  const idFields = getIdFields(modelMeta, queryModel, false);\n  idFields.forEach((f) => {\n    if (insert[f.name] === void 0) {\n      if (f.type === \"Int\" || f.type === \"BigInt\") {\n        const currMax = Array.isArray(currentData) ? Math.max(\n          ...[...currentData].map((item) => {\n            const idv = parseInt(item[f.name]);\n            return isNaN(idv) ? 0 : idv;\n          })\n        ) : 0;\n        insert[f.name] = currMax + 1;\n      } else {\n        insert[f.name] = (0, import_uuid.v4)();\n      }\n    }\n  });\n  insert.$optimistic = true;\n  if (logging) {\n    console.log(`Optimistic create for ${queryModel}:`, insert);\n  }\n  return [insert, ...Array.isArray(currentData) ? currentData : []];\n}\nfunction updateMutate(queryModel, currentData, mutateModel, mutateArgs, modelMeta, logging) {\n  if (!currentData) {\n    return void 0;\n  }\n  if (!(mutateArgs == null ? void 0 : mutateArgs.where) || !(mutateArgs == null ? void 0 : mutateArgs.data)) {\n    return void 0;\n  }\n  let updated = false;\n  for (const item of enumerate(currentData)) {\n    const visitor = new ModelDataVisitor(modelMeta);\n    visitor.visit(queryModel, item, (model, _data, scalarData) => {\n      if (model === mutateModel && idFieldsMatch(model, scalarData, mutateArgs.where, modelMeta)) {\n        Object.keys(item).forEach((k) => {\n          if (mutateArgs.data[k] !== void 0) {\n            item[k] = mutateArgs.data[k];\n          }\n        });\n        item.$optimistic = true;\n        updated = true;\n        if (logging) {\n          console.log(`Optimistic update for ${queryModel}:`, item);\n        }\n      }\n    });\n  }\n  return updated ? (0, import_deepcopy.default)(currentData) : void 0;\n}\nfunction deleteMutate(queryModel, currentData, mutateModel, mutateArgs, modelMeta, logging) {\n  if (!currentData || !mutateArgs) {\n    return void 0;\n  }\n  if (queryModel !== mutateModel) {\n    return void 0;\n  }\n  let updated = false;\n  let result = currentData;\n  if (Array.isArray(currentData)) {\n    for (const item of currentData) {\n      if (idFieldsMatch(mutateModel, item, mutateArgs, modelMeta)) {\n        result = result.filter((x) => x !== item);\n        updated = true;\n        if (logging) {\n          console.log(`Optimistic delete for ${queryModel}:`, item);\n        }\n      }\n    }\n  } else {\n    if (idFieldsMatch(mutateModel, currentData, mutateArgs, modelMeta)) {\n      result = null;\n      updated = true;\n      if (logging) {\n        console.log(`Optimistic delete for ${queryModel}:`, currentData);\n      }\n    }\n  }\n  return updated ? result : void 0;\n}\nfunction idFieldsMatch(model, x, y, modelMeta) {\n  if (!x || !y || typeof x !== \"object\" || typeof y !== \"object\") {\n    return false;\n  }\n  const idFields = getIdFields(modelMeta, model, false);\n  if (idFields.length === 0) {\n    return false;\n  }\n  return idFields.every((f) => x[f.name] === y[f.name]);\n}\n\n// src/cross/nested-read-visitor.ts\nvar NestedReadVisitor = class {\n  constructor(modelMeta, callback) {\n    this.modelMeta = modelMeta;\n    this.callback = callback;\n  }\n  doVisit(model, field, kind, args) {\n    if (this.callback.field) {\n      const r = this.callback.field(model, field, kind, args);\n      if (r === false) {\n        return;\n      }\n    }\n    if (!args || typeof args !== \"object\") {\n      return;\n    }\n    let selectInclude;\n    let nextKind;\n    if (args.select) {\n      selectInclude = args.select;\n      nextKind = \"select\";\n    } else if (args.include) {\n      selectInclude = args.include;\n      nextKind = \"include\";\n    }\n    if (selectInclude && typeof selectInclude === \"object\") {\n      for (const [k, v] of Object.entries(selectInclude)) {\n        if (k === \"_count\" && typeof v === \"object\" && v) {\n          this.doVisit(model, field, kind, v);\n        } else {\n          const field2 = resolveField(this.modelMeta, model, k);\n          if (field2) {\n            this.doVisit(field2.type, field2, nextKind, v);\n          }\n        }\n      }\n    }\n  }\n  visit(model, args) {\n    this.doVisit(model, void 0, void 0, args);\n  }\n};\n\n// src/cross/types.ts\nvar PrismaWriteActions = [\n  \"create\",\n  \"createMany\",\n  \"connectOrCreate\",\n  \"update\",\n  \"updateMany\",\n  \"upsert\",\n  \"connect\",\n  \"disconnect\",\n  \"set\",\n  \"delete\",\n  \"deleteMany\"\n];\n\n// src/cross/utils.ts\nvar import_lower_case_first2 = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nfunction getModelFields(data) {\n  return data ? Object.keys(data) : [];\n}\nfunction enumerate(x) {\n  if (x === null || x === void 0) {\n    return [];\n  } else if (Array.isArray(x)) {\n    return x;\n  } else {\n    return [x];\n  }\n}\nfunction zip(x, y) {\n  if (Array.isArray(x)) {\n    if (!Array.isArray(y)) {\n      throw new Error(\"x and y should be both array or both scalar\");\n    }\n    if (x.length !== y.length) {\n      throw new Error(\"x and y should have the same length\");\n    }\n    return x.map((_, i) => [x[i], y[i]]);\n  } else {\n    if (Array.isArray(y)) {\n      throw new Error(\"x and y should be both array or both scalar\");\n    }\n    return [[x, y]];\n  }\n}\nfunction getIdFields(modelMeta, model, throwIfNotFound = false) {\n  var _a, _b;\n  const uniqueConstraints = (_b = (_a = modelMeta.models[(0, import_lower_case_first2.lowerCaseFirst)(model)]) == null ? void 0 : _a.uniqueConstraints) != null ? _b : {};\n  const entries = Object.values(uniqueConstraints);\n  if (entries.length === 0) {\n    if (throwIfNotFound) {\n      throw new Error(`Model ${model} does not have any id field`);\n    }\n    return [];\n  }\n  return entries[0].fields.map((f) => requireField(modelMeta, model, f));\n}\nfunction getModelInfo(modelMeta, model, throwIfNotFound = false) {\n  const info = modelMeta.models[(0, import_lower_case_first2.lowerCaseFirst)(model)];\n  if (!info && throwIfNotFound) {\n    throw new Error(`Unable to load info for ${model}`);\n  }\n  return info;\n}\nfunction isDelegateModel(modelMeta, model) {\n  var _a, _b;\n  return !!((_b = (_a = getModelInfo(modelMeta, model)) == null ? void 0 : _a.attributes) == null ? void 0 : _b.some((attr) => attr.name === \"@@delegate\"));\n}\n\n// src/cross/nested-write-visitor.ts\nvar NestedWriteVisitor = class {\n  constructor(modelMeta, callback) {\n    this.modelMeta = modelMeta;\n    this.callback = callback;\n  }\n  isPrismaWriteAction(value) {\n    return PrismaWriteActions.includes(value);\n  }\n  /**\n   * Start visiting\n   *\n   * @see NestedWriterVisitorCallback\n   */\n  visit(model, action, args) {\n    return __async(this, null, function* () {\n      if (!args) {\n        return;\n      }\n      let topData = args;\n      switch (action) {\n        case \"create\":\n          topData = topData.data;\n          break;\n        case \"delete\":\n        case \"deleteMany\":\n          topData = topData.where;\n          break;\n      }\n      yield this.doVisit(model, action, topData, void 0, void 0, []);\n    });\n  }\n  doVisit(model, action, data, parent, field, nestingPath) {\n    return __async(this, null, function* () {\n      if (!data) {\n        return;\n      }\n      const toplevel = field == void 0;\n      const context = { parent, field, nestingPath: [...nestingPath] };\n      const pushNewContext = (field2, model2, where, unique = false) => {\n        return __spreadProps(__spreadValues({}, context), { nestingPath: [...context.nestingPath, { field: field2, model: model2, where, unique }] });\n      };\n      switch (action) {\n        case \"create\":\n          for (const item of this.enumerateReverse(data)) {\n            const newContext = pushNewContext(field, model, {});\n            let callbackResult;\n            if (this.callback.create) {\n              callbackResult = yield this.callback.create(model, item, newContext);\n            }\n            if (callbackResult !== false) {\n              const subPayload = typeof callbackResult === \"object\" ? callbackResult : item;\n              yield this.visitSubPayload(model, action, subPayload, newContext.nestingPath);\n            }\n          }\n          break;\n        case \"createMany\":\n          if (data) {\n            const newContext = pushNewContext(field, model, {});\n            let callbackResult;\n            if (this.callback.createMany) {\n              callbackResult = yield this.callback.createMany(model, data, newContext);\n            }\n            if (callbackResult !== false) {\n              const subPayload = typeof callbackResult === \"object\" ? callbackResult : data.data;\n              yield this.visitSubPayload(model, action, subPayload, newContext.nestingPath);\n            }\n          }\n          break;\n        case \"connectOrCreate\":\n          for (const item of this.enumerateReverse(data)) {\n            const newContext = pushNewContext(field, model, item.where);\n            let callbackResult;\n            if (this.callback.connectOrCreate) {\n              callbackResult = yield this.callback.connectOrCreate(model, item, newContext);\n            }\n            if (callbackResult !== false) {\n              const subPayload = typeof callbackResult === \"object\" ? callbackResult : item.create;\n              yield this.visitSubPayload(model, action, subPayload, newContext.nestingPath);\n            }\n          }\n          break;\n        case \"connect\":\n          if (this.callback.connect) {\n            for (const item of this.enumerateReverse(data)) {\n              const newContext = pushNewContext(field, model, item, true);\n              yield this.callback.connect(model, item, newContext);\n            }\n          }\n          break;\n        case \"disconnect\":\n          if (this.callback.disconnect) {\n            for (const item of this.enumerateReverse(data)) {\n              const newContext = pushNewContext(field, model, item, typeof item === \"object\");\n              yield this.callback.disconnect(model, item, newContext);\n            }\n          }\n          break;\n        case \"set\":\n          if (this.callback.set) {\n            for (const item of this.enumerateReverse(data)) {\n              const newContext = pushNewContext(field, model, item, true);\n              yield this.callback.set(model, item, newContext);\n            }\n          }\n          break;\n        case \"update\":\n          for (const item of this.enumerateReverse(data)) {\n            const newContext = pushNewContext(field, model, item.where);\n            let callbackResult;\n            if (this.callback.update) {\n              callbackResult = yield this.callback.update(model, item, newContext);\n            }\n            if (callbackResult !== false) {\n              const subPayload = typeof callbackResult === \"object\" ? callbackResult : typeof item.data === \"object\" ? item.data : item;\n              yield this.visitSubPayload(model, action, subPayload, newContext.nestingPath);\n            }\n          }\n          break;\n        case \"updateMany\":\n          for (const item of this.enumerateReverse(data)) {\n            const newContext = pushNewContext(field, model, item.where);\n            let callbackResult;\n            if (this.callback.updateMany) {\n              callbackResult = yield this.callback.updateMany(model, item, newContext);\n            }\n            if (callbackResult !== false) {\n              const subPayload = typeof callbackResult === \"object\" ? callbackResult : item;\n              yield this.visitSubPayload(model, action, subPayload, newContext.nestingPath);\n            }\n          }\n          break;\n        case \"upsert\": {\n          for (const item of this.enumerateReverse(data)) {\n            const newContext = pushNewContext(field, model, item.where);\n            let callbackResult;\n            if (this.callback.upsert) {\n              callbackResult = yield this.callback.upsert(model, item, newContext);\n            }\n            if (callbackResult !== false) {\n              if (typeof callbackResult === \"object\") {\n                yield this.visitSubPayload(model, action, callbackResult, newContext.nestingPath);\n              } else {\n                yield this.visitSubPayload(model, action, item.create, newContext.nestingPath);\n                yield this.visitSubPayload(model, action, item.update, newContext.nestingPath);\n              }\n            }\n          }\n          break;\n        }\n        case \"delete\": {\n          if (this.callback.delete) {\n            for (const item of this.enumerateReverse(data)) {\n              const newContext = pushNewContext(field, model, toplevel ? item.where : item);\n              yield this.callback.delete(model, item, newContext);\n            }\n          }\n          break;\n        }\n        case \"deleteMany\":\n          if (this.callback.deleteMany) {\n            for (const item of this.enumerateReverse(data)) {\n              const newContext = pushNewContext(field, model, toplevel ? item.where : item);\n              yield this.callback.deleteMany(model, item, newContext);\n            }\n          }\n          break;\n        default: {\n          throw new Error(`unhandled action type ${action}`);\n        }\n      }\n    });\n  }\n  visitSubPayload(model, action, payload, nestingPath) {\n    return __async(this, null, function* () {\n      for (const field of getModelFields(payload)) {\n        const fieldInfo = resolveField(this.modelMeta, model, field);\n        if (!fieldInfo) {\n          continue;\n        }\n        if (fieldInfo.isDataModel) {\n          if (payload[field]) {\n            for (const [subAction, subData] of Object.entries(payload[field])) {\n              if (this.isPrismaWriteAction(subAction) && subData) {\n                yield this.doVisit(fieldInfo.type, subAction, subData, payload[field], fieldInfo, [\n                  ...nestingPath\n                ]);\n              }\n            }\n          }\n        } else {\n          if (this.callback.field) {\n            yield this.callback.field(fieldInfo, action, payload[field], {\n              parent: payload,\n              nestingPath,\n              field: fieldInfo\n            });\n          }\n        }\n      }\n    });\n  }\n  // enumerate a (possible) array in reverse order, so that the enumeration\n  // callback can safely delete the current item\n  *enumerateReverse(data) {\n    if (Array.isArray(data)) {\n      for (let i = data.length - 1; i >= 0; i--) {\n        yield data[i];\n      }\n    } else {\n      yield data;\n    }\n  }\n};\n\n// src/cross/query-analyzer.ts\nvar import_lower_case_first3 = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nfunction getReadModels(model, modelMeta, args) {\n  const result = /* @__PURE__ */ new Set();\n  result.add(model);\n  const visitor = new NestedReadVisitor(modelMeta, {\n    field: (model2) => {\n      result.add(model2);\n      return true;\n    }\n  });\n  visitor.visit(model, args);\n  return [...result];\n}\nfunction getMutatedModels(model, operation, mutationArgs, modelMeta) {\n  return __async(this, null, function* () {\n    const result = /* @__PURE__ */ new Set();\n    result.add(model);\n    if (mutationArgs) {\n      const addModel = (model2) => void result.add(model2);\n      const addCascades = (model2) => {\n        const cascades = /* @__PURE__ */ new Set();\n        const visited = /* @__PURE__ */ new Set();\n        collectDeleteCascades(model2, modelMeta, cascades, visited);\n        cascades.forEach((m) => addModel(m));\n      };\n      const visitor = new NestedWriteVisitor(modelMeta, {\n        create: addModel,\n        createMany: addModel,\n        connectOrCreate: addModel,\n        connect: addModel,\n        disconnect: addModel,\n        set: addModel,\n        update: addModel,\n        updateMany: addModel,\n        upsert: addModel,\n        delete: (model2) => {\n          addModel(model2);\n          addCascades(model2);\n        },\n        deleteMany: (model2) => {\n          addModel(model2);\n          addCascades(model2);\n        }\n      });\n      yield visitor.visit(model, operation, mutationArgs);\n    }\n    result.forEach((m) => {\n      getBaseRecursively(m, modelMeta, result);\n    });\n    return [...result];\n  });\n}\nfunction collectDeleteCascades(model, modelMeta, result, visited) {\n  var _a;\n  if (visited.has(model)) {\n    return;\n  }\n  visited.add(model);\n  const cascades = (_a = modelMeta.deleteCascade) == null ? void 0 : _a[(0, import_lower_case_first3.lowerCaseFirst)(model)];\n  if (!cascades) {\n    return;\n  }\n  cascades.forEach((m) => {\n    result.add(m);\n    collectDeleteCascades(m, modelMeta, result, visited);\n  });\n}\nfunction getBaseRecursively(model, modelMeta, result) {\n  var _a;\n  const bases = (_a = getModelInfo(modelMeta, model)) == null ? void 0 : _a.baseTypes;\n  if (bases) {\n    bases.forEach((base) => {\n      result.add(base);\n      getBaseRecursively(base, modelMeta, result);\n    });\n  }\n}\n// Annotate the CommonJS export names for ESM import in node:\n0 && (0);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhance.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhance.js ***!
  \***************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n\ntry {\n    exports.enhance = Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '.zenstack/enhance'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n} catch {\n    exports.enhance = function () {\n        throw new Error('Generated \"enhance\" function not found. Please run `zenstack generate` first.');\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQzs7QUFFN0Q7QUFDQSxJQUFJLGtLQUFzRDtBQUMxRCxFQUFFO0FBQ0YsSUFBSSxlQUFlO0FBQ25CO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2VuaGFuY2UuanM/OGRlZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG50cnkge1xuICAgIGV4cG9ydHMuZW5oYW5jZSA9IHJlcXVpcmUoJy56ZW5zdGFjay9lbmhhbmNlJykuZW5oYW5jZTtcbn0gY2F0Y2gge1xuICAgIGV4cG9ydHMuZW5oYW5jZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdHZW5lcmF0ZWQgXCJlbmhhbmNlXCIgZnVuY3Rpb24gbm90IGZvdW5kLiBQbGVhc2UgcnVuIGB6ZW5zdGFjayBnZW5lcmF0ZWAgZmlyc3QuJyk7XG4gICAgfTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhance.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/create-enhancement.js":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/create-enhancement.js ***!
  \***************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createEnhancement = void 0;\nconst semver_1 = __importDefault(__webpack_require__(/*! semver */ \"(rsc)/./node_modules/.pnpm/semver@7.6.2/node_modules/semver/index.js\"));\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst default_auth_1 = __webpack_require__(/*! ./default-auth */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/default-auth.js\");\nconst delegate_1 = __webpack_require__(/*! ./delegate */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/delegate.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\");\nconst omit_1 = __webpack_require__(/*! ./omit */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/omit.js\");\nconst password_1 = __webpack_require__(/*! ./password */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/password.js\");\nconst policy_1 = __webpack_require__(/*! ./policy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/index.js\");\n/**\n * All enhancement kinds\n */\nconst ALL_ENHANCEMENTS = ['password', 'omit', 'policy', 'validation', 'delegate'];\n/**\n * Gets a Prisma client enhanced with all enhancement behaviors, including access\n * policy, field validation, field omission and password hashing.\n *\n * @private\n *\n * @param prisma The Prisma client to enhance.\n * @param context Context.\n * @param options Options.\n */\nfunction createEnhancement(prisma, options, context) {\n    var _a;\n    if (!prisma) {\n        throw new Error('Invalid prisma instance');\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const prismaVer = prisma._clientVersion;\n    if (prismaVer && semver_1.default.lt(prismaVer, constants_1.PRISMA_MINIMUM_VERSION)) {\n        console.warn(`ZenStack requires Prisma version \"${constants_1.PRISMA_MINIMUM_VERSION}\" or higher. Detected version is \"${prismaVer}\".`);\n    }\n    // TODO: move the detection logic into each enhancement\n    // TODO: how to properly cache the detection result?\n    const allFields = Object.values(options.modelMeta.models).flatMap((modelInfo) => Object.values(modelInfo.fields));\n    const hasPassword = allFields.some((field) => { var _a; return (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.some((attr) => attr.name === '@password'); });\n    const hasOmit = allFields.some((field) => { var _a; return (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.some((attr) => attr.name === '@omit'); });\n    const hasDefaultAuth = allFields.some((field) => field.defaultValueProvider);\n    const kinds = (_a = options.kinds) !== null && _a !== void 0 ? _a : ALL_ENHANCEMENTS;\n    let result = prisma;\n    // delegate proxy needs to be wrapped inside policy proxy, since it may translate `deleteMany`\n    // and `updateMany` to plain `delete` and `update`\n    if (Object.values(options.modelMeta.models).some((model) => (0, cross_1.isDelegateModel)(options.modelMeta, model.name))) {\n        if (!kinds.includes('delegate')) {\n            const logger = new logger_1.Logger(prisma);\n            logger.warn('Your ZModel contains delegate models but \"delegate\" enhancement kind is not enabled. This may result in unexpected behavior.');\n        }\n        else {\n            result = (0, delegate_1.withDelegate)(result, options);\n        }\n    }\n    // 'policy' and 'validation' enhancements are both enabled by `withPolicy`\n    if (kinds.includes('policy') || kinds.includes('validation')) {\n        result = (0, policy_1.withPolicy)(result, options, context);\n        if (kinds.includes('policy') && hasDefaultAuth) {\n            // @default(auth()) proxy\n            result = (0, default_auth_1.withDefaultAuth)(result, options, context);\n        }\n    }\n    if (hasPassword && kinds.includes('password')) {\n        // @password proxy\n        result = (0, password_1.withPassword)(result, options);\n    }\n    if (hasOmit && kinds.includes('omit')) {\n        // @omit proxy\n        result = (0, omit_1.withOmit)(result, options);\n    }\n    return result;\n}\nexports.createEnhancement = createEnhancement;\n//# sourceMappingURL=create-enhancement.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL2NyZWF0ZS1lbmhhbmNlbWVudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QixpQ0FBaUMsbUJBQU8sQ0FBQyxvRkFBUTtBQUNqRCxvQkFBb0IsbUJBQU8sQ0FBQyw2SkFBYztBQUMxQyxnQkFBZ0IsbUJBQU8sQ0FBQywySkFBVTtBQUNsQyx1QkFBdUIsbUJBQU8sQ0FBQywrS0FBZ0I7QUFDL0MsbUJBQW1CLG1CQUFPLENBQUMsdUtBQVk7QUFDdkMsaUJBQWlCLG1CQUFPLENBQUMsbUtBQVU7QUFDbkMsZUFBZSxtQkFBTyxDQUFDLCtKQUFRO0FBQy9CLG1CQUFtQixtQkFBTyxDQUFDLHVLQUFZO0FBQ3ZDLGlCQUFpQixtQkFBTyxDQUFDLHlLQUFVO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELG1DQUFtQyxvQ0FBb0MsVUFBVTtBQUMzSTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRLG1IQUFtSDtBQUMvSyxnREFBZ0QsUUFBUSwrR0FBK0c7QUFDdks7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2VuaGFuY2VtZW50cy9jcmVhdGUtZW5oYW5jZW1lbnQuanM/N2JmNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRW5oYW5jZW1lbnQgPSB2b2lkIDA7XG5jb25zdCBzZW12ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic2VtdmVyXCIpKTtcbmNvbnN0IGNvbnN0YW50c18xID0gcmVxdWlyZShcIi4uL2NvbnN0YW50c1wiKTtcbmNvbnN0IGNyb3NzXzEgPSByZXF1aXJlKFwiLi4vY3Jvc3NcIik7XG5jb25zdCBkZWZhdWx0X2F1dGhfMSA9IHJlcXVpcmUoXCIuL2RlZmF1bHQtYXV0aFwiKTtcbmNvbnN0IGRlbGVnYXRlXzEgPSByZXF1aXJlKFwiLi9kZWxlZ2F0ZVwiKTtcbmNvbnN0IGxvZ2dlcl8xID0gcmVxdWlyZShcIi4vbG9nZ2VyXCIpO1xuY29uc3Qgb21pdF8xID0gcmVxdWlyZShcIi4vb21pdFwiKTtcbmNvbnN0IHBhc3N3b3JkXzEgPSByZXF1aXJlKFwiLi9wYXNzd29yZFwiKTtcbmNvbnN0IHBvbGljeV8xID0gcmVxdWlyZShcIi4vcG9saWN5XCIpO1xuLyoqXG4gKiBBbGwgZW5oYW5jZW1lbnQga2luZHNcbiAqL1xuY29uc3QgQUxMX0VOSEFOQ0VNRU5UUyA9IFsncGFzc3dvcmQnLCAnb21pdCcsICdwb2xpY3knLCAndmFsaWRhdGlvbicsICdkZWxlZ2F0ZSddO1xuLyoqXG4gKiBHZXRzIGEgUHJpc21hIGNsaWVudCBlbmhhbmNlZCB3aXRoIGFsbCBlbmhhbmNlbWVudCBiZWhhdmlvcnMsIGluY2x1ZGluZyBhY2Nlc3NcbiAqIHBvbGljeSwgZmllbGQgdmFsaWRhdGlvbiwgZmllbGQgb21pc3Npb24gYW5kIHBhc3N3b3JkIGhhc2hpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqXG4gKiBAcGFyYW0gcHJpc21hIFRoZSBQcmlzbWEgY2xpZW50IHRvIGVuaGFuY2UuXG4gKiBAcGFyYW0gY29udGV4dCBDb250ZXh0LlxuICogQHBhcmFtIG9wdGlvbnMgT3B0aW9ucy5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlRW5oYW5jZW1lbnQocHJpc21hLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgdmFyIF9hO1xuICAgIGlmICghcHJpc21hKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBwcmlzbWEgaW5zdGFuY2UnKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgICBjb25zdCBwcmlzbWFWZXIgPSBwcmlzbWEuX2NsaWVudFZlcnNpb247XG4gICAgaWYgKHByaXNtYVZlciAmJiBzZW12ZXJfMS5kZWZhdWx0Lmx0KHByaXNtYVZlciwgY29uc3RhbnRzXzEuUFJJU01BX01JTklNVU1fVkVSU0lPTikpIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBaZW5TdGFjayByZXF1aXJlcyBQcmlzbWEgdmVyc2lvbiBcIiR7Y29uc3RhbnRzXzEuUFJJU01BX01JTklNVU1fVkVSU0lPTn1cIiBvciBoaWdoZXIuIERldGVjdGVkIHZlcnNpb24gaXMgXCIke3ByaXNtYVZlcn1cIi5gKTtcbiAgICB9XG4gICAgLy8gVE9ETzogbW92ZSB0aGUgZGV0ZWN0aW9uIGxvZ2ljIGludG8gZWFjaCBlbmhhbmNlbWVudFxuICAgIC8vIFRPRE86IGhvdyB0byBwcm9wZXJseSBjYWNoZSB0aGUgZGV0ZWN0aW9uIHJlc3VsdD9cbiAgICBjb25zdCBhbGxGaWVsZHMgPSBPYmplY3QudmFsdWVzKG9wdGlvbnMubW9kZWxNZXRhLm1vZGVscykuZmxhdE1hcCgobW9kZWxJbmZvKSA9PiBPYmplY3QudmFsdWVzKG1vZGVsSW5mby5maWVsZHMpKTtcbiAgICBjb25zdCBoYXNQYXNzd29yZCA9IGFsbEZpZWxkcy5zb21lKChmaWVsZCkgPT4geyB2YXIgX2E7IHJldHVybiAoX2EgPSBmaWVsZC5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc29tZSgoYXR0cikgPT4gYXR0ci5uYW1lID09PSAnQHBhc3N3b3JkJyk7IH0pO1xuICAgIGNvbnN0IGhhc09taXQgPSBhbGxGaWVsZHMuc29tZSgoZmllbGQpID0+IHsgdmFyIF9hOyByZXR1cm4gKF9hID0gZmllbGQuYXR0cmlidXRlcykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnNvbWUoKGF0dHIpID0+IGF0dHIubmFtZSA9PT0gJ0BvbWl0Jyk7IH0pO1xuICAgIGNvbnN0IGhhc0RlZmF1bHRBdXRoID0gYWxsRmllbGRzLnNvbWUoKGZpZWxkKSA9PiBmaWVsZC5kZWZhdWx0VmFsdWVQcm92aWRlcik7XG4gICAgY29uc3Qga2luZHMgPSAoX2EgPSBvcHRpb25zLmtpbmRzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBBTExfRU5IQU5DRU1FTlRTO1xuICAgIGxldCByZXN1bHQgPSBwcmlzbWE7XG4gICAgLy8gZGVsZWdhdGUgcHJveHkgbmVlZHMgdG8gYmUgd3JhcHBlZCBpbnNpZGUgcG9saWN5IHByb3h5LCBzaW5jZSBpdCBtYXkgdHJhbnNsYXRlIGBkZWxldGVNYW55YFxuICAgIC8vIGFuZCBgdXBkYXRlTWFueWAgdG8gcGxhaW4gYGRlbGV0ZWAgYW5kIGB1cGRhdGVgXG4gICAgaWYgKE9iamVjdC52YWx1ZXMob3B0aW9ucy5tb2RlbE1ldGEubW9kZWxzKS5zb21lKChtb2RlbCkgPT4gKDAsIGNyb3NzXzEuaXNEZWxlZ2F0ZU1vZGVsKShvcHRpb25zLm1vZGVsTWV0YSwgbW9kZWwubmFtZSkpKSB7XG4gICAgICAgIGlmICgha2luZHMuaW5jbHVkZXMoJ2RlbGVnYXRlJykpIHtcbiAgICAgICAgICAgIGNvbnN0IGxvZ2dlciA9IG5ldyBsb2dnZXJfMS5Mb2dnZXIocHJpc21hKTtcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdZb3VyIFpNb2RlbCBjb250YWlucyBkZWxlZ2F0ZSBtb2RlbHMgYnV0IFwiZGVsZWdhdGVcIiBlbmhhbmNlbWVudCBraW5kIGlzIG5vdCBlbmFibGVkLiBUaGlzIG1heSByZXN1bHQgaW4gdW5leHBlY3RlZCBiZWhhdmlvci4nKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdCA9ICgwLCBkZWxlZ2F0ZV8xLndpdGhEZWxlZ2F0ZSkocmVzdWx0LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyAncG9saWN5JyBhbmQgJ3ZhbGlkYXRpb24nIGVuaGFuY2VtZW50cyBhcmUgYm90aCBlbmFibGVkIGJ5IGB3aXRoUG9saWN5YFxuICAgIGlmIChraW5kcy5pbmNsdWRlcygncG9saWN5JykgfHwga2luZHMuaW5jbHVkZXMoJ3ZhbGlkYXRpb24nKSkge1xuICAgICAgICByZXN1bHQgPSAoMCwgcG9saWN5XzEud2l0aFBvbGljeSkocmVzdWx0LCBvcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgaWYgKGtpbmRzLmluY2x1ZGVzKCdwb2xpY3knKSAmJiBoYXNEZWZhdWx0QXV0aCkge1xuICAgICAgICAgICAgLy8gQGRlZmF1bHQoYXV0aCgpKSBwcm94eVxuICAgICAgICAgICAgcmVzdWx0ID0gKDAsIGRlZmF1bHRfYXV0aF8xLndpdGhEZWZhdWx0QXV0aCkocmVzdWx0LCBvcHRpb25zLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzUGFzc3dvcmQgJiYga2luZHMuaW5jbHVkZXMoJ3Bhc3N3b3JkJykpIHtcbiAgICAgICAgLy8gQHBhc3N3b3JkIHByb3h5XG4gICAgICAgIHJlc3VsdCA9ICgwLCBwYXNzd29yZF8xLndpdGhQYXNzd29yZCkocmVzdWx0LCBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKGhhc09taXQgJiYga2luZHMuaW5jbHVkZXMoJ29taXQnKSkge1xuICAgICAgICAvLyBAb21pdCBwcm94eVxuICAgICAgICByZXN1bHQgPSAoMCwgb21pdF8xLndpdGhPbWl0KShyZXN1bHQsIG9wdGlvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5jcmVhdGVFbmhhbmNlbWVudCA9IGNyZWF0ZUVuaGFuY2VtZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JlYXRlLWVuaGFuY2VtZW50LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/create-enhancement.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/default-auth.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/default-auth.js ***!
  \*********************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.withDefaultAuth = void 0;\nconst deepcopy_1 = __importDefault(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst proxy_1 = __webpack_require__(/*! ./proxy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\");\n/**\n * Gets an enhanced Prisma client that supports `@default(auth())` attribute.\n *\n * @private\n */\nfunction withDefaultAuth(prisma, options, context = {}) {\n    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new DefaultAuthHandler(_prisma, model, options, context), 'defaultAuth');\n}\nexports.withDefaultAuth = withDefaultAuth;\nclass DefaultAuthHandler extends proxy_1.DefaultPrismaProxyHandler {\n    constructor(prisma, model, options, context) {\n        super(prisma, model, options);\n        this.context = context;\n        this.userContext = this.context.user;\n    }\n    // base override\n    preprocessArgs(action, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const actionsOfInterest = ['create', 'createMany', 'update', 'updateMany', 'upsert'];\n            if (actionsOfInterest.includes(action)) {\n                const newArgs = yield this.preprocessWritePayload(this.model, action, args);\n                return newArgs;\n            }\n            return args;\n        });\n    }\n    preprocessWritePayload(model, action, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const newArgs = (0, deepcopy_1.default)(args);\n            const processCreatePayload = (model, data) => {\n                const fields = (0, cross_1.getFields)(this.options.modelMeta, model);\n                for (const fieldInfo of Object.values(fields)) {\n                    if (fieldInfo.name in data) {\n                        // create payload already sets field value\n                        continue;\n                    }\n                    if (!fieldInfo.defaultValueProvider) {\n                        // field doesn't have a runtime default value provider\n                        continue;\n                    }\n                    const authDefaultValue = this.getDefaultValueFromAuth(fieldInfo);\n                    if (authDefaultValue !== undefined) {\n                        // set field value extracted from `auth()`\n                        this.setAuthDefaultValue(fieldInfo, model, data, authDefaultValue);\n                    }\n                }\n            };\n            // visit create payload and set default value to fields using `auth()` in `@default()`\n            const visitor = new cross_1.NestedWriteVisitor(this.options.modelMeta, {\n                create: (model, data) => {\n                    processCreatePayload(model, data);\n                },\n                upsert: (model, data) => {\n                    processCreatePayload(model, data.create);\n                },\n                createMany: (model, args) => {\n                    for (const item of (0, cross_1.enumerate)(args.data)) {\n                        processCreatePayload(model, item);\n                    }\n                },\n            });\n            yield visitor.visit(model, action, newArgs);\n            return newArgs;\n        });\n    }\n    setAuthDefaultValue(fieldInfo, model, data, authDefaultValue) {\n        var _a;\n        if (fieldInfo.isForeignKey && fieldInfo.relationField && fieldInfo.relationField in data) {\n            // if the field is a fk, and the relation field is already set, we should not override it\n            return;\n        }\n        if (fieldInfo.isForeignKey && !(0, utils_1.isUnsafeMutate)(model, data, this.options.modelMeta)) {\n            // if the field is a fk, and the create payload is not unsafe, we need to translate\n            // the fk field setting to a `connect` of the corresponding relation field\n            const relFieldName = fieldInfo.relationField;\n            if (!relFieldName) {\n                throw new Error(`Field \\`${fieldInfo.name}\\` is a foreign key field but no corresponding relation field is found`);\n            }\n            const relationField = (0, cross_1.requireField)(this.options.modelMeta, model, relFieldName);\n            // construct a `{ connect: { ... } }` payload\n            let connect = (_a = data[relationField.name]) === null || _a === void 0 ? void 0 : _a.connect;\n            if (!connect) {\n                connect = {};\n                data[relationField.name] = { connect };\n            }\n            // sets the opposite fk field to value `authDefaultValue`\n            const oppositeFkFieldName = this.getOppositeFkFieldName(relationField, fieldInfo);\n            if (!oppositeFkFieldName) {\n                throw new Error(`Cannot find opposite foreign key field for \\`${fieldInfo.name}\\` in relation field \\`${relFieldName}\\``);\n            }\n            connect[oppositeFkFieldName] = authDefaultValue;\n        }\n        else {\n            // set default value directly\n            data[fieldInfo.name] = authDefaultValue;\n        }\n    }\n    getOppositeFkFieldName(relationField, fieldInfo) {\n        if (!relationField.foreignKeyMapping) {\n            return undefined;\n        }\n        const entry = Object.entries(relationField.foreignKeyMapping).find(([, v]) => v === fieldInfo.name);\n        return entry === null || entry === void 0 ? void 0 : entry[0];\n    }\n    getDefaultValueFromAuth(fieldInfo) {\n        var _a;\n        if (!this.userContext) {\n            throw new Error(`Evaluating default value of field \\`${fieldInfo.name}\\` requires a user context`);\n        }\n        return (_a = fieldInfo.defaultValueProvider) === null || _a === void 0 ? void 0 : _a.call(fieldInfo, this.userContext);\n    }\n}\n//# sourceMappingURL=default-auth.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/default-auth.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/delegate.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/delegate.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DelegateProxyHandler = exports.withDelegate = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst deepcopy_1 = __importDefault(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js\"));\nconst is_plain_object_1 = __webpack_require__(/*! is-plain-object */ \"(rsc)/./node_modules/.pnpm/is-plain-object@5.0.0/node_modules/is-plain-object/dist/is-plain-object.js\");\nconst lower_case_first_1 = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst logger_1 = __webpack_require__(/*! ./logger */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\");\nconst proxy_1 = __webpack_require__(/*! ./proxy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\");\nconst query_utils_1 = __webpack_require__(/*! ./query-utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\");\nfunction withDelegate(prisma, options) {\n    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new DelegateProxyHandler(_prisma, model, options), 'delegate');\n}\nexports.withDelegate = withDelegate;\nclass DelegateProxyHandler extends proxy_1.DefaultPrismaProxyHandler {\n    constructor(prisma, model, options) {\n        super(prisma, model, options);\n        this.logger = new logger_1.Logger(prisma);\n        this.queryUtils = new query_utils_1.QueryUtils(prisma, this.options);\n    }\n    // #region find\n    findFirst(args) {\n        return this.doFind(this.prisma, this.model, 'findFirst', args);\n    }\n    findFirstOrThrow(args) {\n        return this.doFind(this.prisma, this.model, 'findFirstOrThrow', args);\n    }\n    findUnique(args) {\n        return this.doFind(this.prisma, this.model, 'findUnique', args);\n    }\n    findUniqueOrThrow(args) {\n        return this.doFind(this.prisma, this.model, 'findUniqueOrThrow', args);\n    }\n    findMany(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.doFind(this.prisma, this.model, 'findMany', args);\n        });\n    }\n    doFind(db, model, method, args) {\n        const _superIndex = name => super[name];\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.involvesDelegateModel(model)) {\n                return _superIndex(method).call(this, args);\n            }\n            args = args ? (0, deepcopy_1.default)(args) : {};\n            this.injectWhereHierarchy(model, args === null || args === void 0 ? void 0 : args.where);\n            this.injectSelectIncludeHierarchy(model, args);\n            if (args.orderBy) {\n                // `orderBy` may contain fields from base types\n                args.orderBy = this.buildWhereHierarchy(this.model, args.orderBy);\n            }\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`${method}\\` ${this.getModelName(model)}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const entity = yield db[model][method](args);\n            if (Array.isArray(entity)) {\n                return entity.map((item) => this.assembleHierarchy(model, item));\n            }\n            else {\n                return this.assembleHierarchy(model, entity);\n            }\n        });\n    }\n    injectWhereHierarchy(model, where) {\n        if (!where || typeof where !== 'object') {\n            return;\n        }\n        Object.entries(where).forEach(([field, value]) => {\n            if (['AND', 'OR', 'NOT'].includes(field)) {\n                // recurse into logical group\n                (0, cross_1.enumerate)(value).forEach((item) => this.injectWhereHierarchy(model, item));\n                return;\n            }\n            const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n            if (!(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom)) {\n                return;\n            }\n            let base = this.getBaseModel(model);\n            let target = where;\n            while (base) {\n                const baseRelationName = this.makeAuxRelationName(base);\n                // prepare base layer where\n                let thisLayer;\n                if (target[baseRelationName]) {\n                    thisLayer = target[baseRelationName];\n                }\n                else {\n                    thisLayer = target[baseRelationName] = {};\n                }\n                if (base.name === fieldInfo.inheritedFrom) {\n                    thisLayer[field] = value;\n                    delete where[field];\n                    break;\n                }\n                else {\n                    target = thisLayer;\n                    base = this.getBaseModel(base.name);\n                }\n            }\n        });\n    }\n    buildWhereHierarchy(model, where) {\n        if (!where) {\n            return undefined;\n        }\n        where = (0, deepcopy_1.default)(where);\n        Object.entries(where).forEach(([field, value]) => {\n            const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n            if (!(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom)) {\n                return;\n            }\n            let base = this.getBaseModel(model);\n            let target = where;\n            while (base) {\n                const baseRelationName = this.makeAuxRelationName(base);\n                // prepare base layer where\n                let thisLayer;\n                if (target[baseRelationName]) {\n                    thisLayer = target[baseRelationName];\n                }\n                else {\n                    thisLayer = target[baseRelationName] = {};\n                }\n                if (base.name === fieldInfo.inheritedFrom) {\n                    thisLayer[field] = value;\n                    delete where[field];\n                    break;\n                }\n                else {\n                    target = thisLayer;\n                    base = this.getBaseModel(base.name);\n                }\n            }\n        });\n        return where;\n    }\n    injectSelectIncludeHierarchy(model, args) {\n        if (!args || typeof args !== 'object') {\n            return;\n        }\n        for (const kind of ['select', 'include']) {\n            if (args[kind] && typeof args[kind] === 'object') {\n                for (const [field, value] of Object.entries(args[kind])) {\n                    const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n                    if (fieldInfo && value !== undefined) {\n                        if (value === null || value === void 0 ? void 0 : value.orderBy) {\n                            // `orderBy` may contain fields from base types\n                            value.orderBy = this.buildWhereHierarchy(fieldInfo.type, value.orderBy);\n                        }\n                        if (this.injectBaseFieldSelect(model, field, value, args, kind)) {\n                            delete args[kind][field];\n                        }\n                        else if (fieldInfo.isDataModel) {\n                            let nextValue = value;\n                            if (nextValue === true) {\n                                // make sure the payload is an object\n                                args[kind][field] = nextValue = {};\n                            }\n                            this.injectSelectIncludeHierarchy(fieldInfo.type, nextValue);\n                        }\n                    }\n                }\n            }\n        }\n        if (!args.select) {\n            // include base models upwards\n            this.injectBaseIncludeRecursively(model, args);\n            // include sub models downwards\n            this.injectConcreteIncludeRecursively(model, args);\n        }\n    }\n    buildSelectIncludeHierarchy(model, args) {\n        args = (0, deepcopy_1.default)(args);\n        const selectInclude = this.extractSelectInclude(args) || {};\n        if (selectInclude.select && typeof selectInclude.select === 'object') {\n            Object.entries(selectInclude.select).forEach(([field, value]) => {\n                if (value) {\n                    if (this.injectBaseFieldSelect(model, field, value, selectInclude, 'select')) {\n                        delete selectInclude.select[field];\n                    }\n                }\n            });\n        }\n        else if (selectInclude.include && typeof selectInclude.include === 'object') {\n            Object.entries(selectInclude.include).forEach(([field, value]) => {\n                if (value) {\n                    if (this.injectBaseFieldSelect(model, field, value, selectInclude, 'include')) {\n                        delete selectInclude.include[field];\n                    }\n                }\n            });\n        }\n        if (!selectInclude.select) {\n            this.injectBaseIncludeRecursively(model, selectInclude);\n            this.injectConcreteIncludeRecursively(model, selectInclude);\n        }\n        return selectInclude;\n    }\n    injectBaseFieldSelect(model, field, value, selectInclude, context) {\n        const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n        if (!(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom)) {\n            return false;\n        }\n        let base = this.getBaseModel(model);\n        let target = selectInclude;\n        while (base) {\n            const baseRelationName = this.makeAuxRelationName(base);\n            // prepare base layer select/include\n            // let selectOrInclude = 'select';\n            let thisLayer;\n            if (target.include) {\n                // selectOrInclude = 'include';\n                thisLayer = target.include;\n            }\n            else if (target.select) {\n                // selectOrInclude = 'select';\n                thisLayer = target.select;\n            }\n            else {\n                // selectInclude = 'include';\n                thisLayer = target.select = {};\n            }\n            if (base.name === fieldInfo.inheritedFrom) {\n                if (!thisLayer[baseRelationName]) {\n                    thisLayer[baseRelationName] = { [context]: {} };\n                }\n                thisLayer[baseRelationName][context][field] = value;\n                break;\n            }\n            else {\n                if (!thisLayer[baseRelationName]) {\n                    thisLayer[baseRelationName] = { select: {} };\n                }\n                target = thisLayer[baseRelationName];\n                base = this.getBaseModel(base.name);\n            }\n        }\n        return true;\n    }\n    injectBaseIncludeRecursively(model, selectInclude) {\n        const base = this.getBaseModel(model);\n        if (!base) {\n            return;\n        }\n        const baseRelationName = this.makeAuxRelationName(base);\n        if (selectInclude.select) {\n            selectInclude.include = Object.assign({ [baseRelationName]: {} }, selectInclude.select);\n            delete selectInclude.select;\n        }\n        else {\n            selectInclude.include = Object.assign({ [baseRelationName]: {} }, selectInclude.include);\n        }\n        this.injectBaseIncludeRecursively(base.name, selectInclude.include[baseRelationName]);\n    }\n    injectConcreteIncludeRecursively(model, selectInclude) {\n        const modelInfo = (0, cross_1.getModelInfo)(this.options.modelMeta, model);\n        if (!modelInfo) {\n            return;\n        }\n        // get sub models of this model\n        const subModels = Object.values(this.options.modelMeta.models).filter((m) => { var _a; return (_a = m.baseTypes) === null || _a === void 0 ? void 0 : _a.includes(modelInfo.name); });\n        for (const subModel of subModels) {\n            // include sub model relation field\n            const subRelationName = this.makeAuxRelationName(subModel);\n            if (selectInclude.select) {\n                selectInclude.include = Object.assign({ [subRelationName]: {} }, selectInclude.select);\n                delete selectInclude.select;\n            }\n            else {\n                selectInclude.include = Object.assign({ [subRelationName]: {} }, selectInclude.include);\n            }\n            this.injectConcreteIncludeRecursively(subModel.name, selectInclude.include[subRelationName]);\n        }\n    }\n    // #endregion\n    // #region create\n    create(args) {\n        const _super = Object.create(null, {\n            create: { get: () => super.create }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!args) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n            }\n            if (!args.data) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'data field is required in query argument');\n            }\n            if ((0, cross_1.isDelegateModel)(this.options.modelMeta, this.model)) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `Model \"${this.model}\" is a delegate and cannot be created directly`);\n            }\n            if (!this.involvesDelegateModel(this.model)) {\n                return _super.create.call(this, args);\n            }\n            return this.doCreate(this.prisma, this.model, args);\n        });\n    }\n    createMany(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'data field is required in query argument');\n        }\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.createMany(args);\n        }\n        if (this.isDelegateOrDescendantOfDelegate(this.model) && args.skipDuplicates) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, '`createMany` with `skipDuplicates` set to true is not supported for delegated models');\n        }\n        // `createMany` doesn't support nested create, which is needed for creating entities\n        // inheriting a delegate base, so we need to convert it to a regular `create` here.\n        // Note that the main difference is `create` doesn't support `skipDuplicates` as\n        // `createMany` does.\n        return this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n            const r = yield Promise.all((0, cross_1.enumerate)(args.data).map((item) => __awaiter(this, void 0, void 0, function* () {\n                return this.doCreate(tx, this.model, { data: item });\n            })));\n            // filter out undefined value (due to skipping duplicates)\n            return { count: r.filter((item) => !!item).length };\n        }));\n    }\n    doCreate(db, model, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            args = (0, deepcopy_1.default)(args);\n            yield this.injectCreateHierarchy(model, args);\n            this.injectSelectIncludeHierarchy(model, args);\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`create\\` ${this.getModelName(model)}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const result = yield db[model].create(args);\n            return this.assembleHierarchy(model, result);\n        });\n    }\n    injectCreateHierarchy(model, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const visitor = new cross_1.NestedWriteVisitor(this.options.modelMeta, {\n                create: (model, args, _context) => {\n                    this.doProcessCreatePayload(model, args);\n                },\n                createMany: (model, args, context) => {\n                    // `createMany` doesn't support nested create, which is needed for creating entities\n                    // inheriting a delegate base, so we need to convert it to a regular `create` here.\n                    // Note that the main difference is `create` doesn't support `skipDuplicates` as\n                    // `createMany` does.\n                    var _a;\n                    if (this.isDelegateOrDescendantOfDelegate(model)) {\n                        if (args.skipDuplicates) {\n                            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, '`createMany` with `skipDuplicates` set to true is not supported for delegated models');\n                        }\n                        // convert to regular `create`\n                        let createPayload = (_a = context.parent.create) !== null && _a !== void 0 ? _a : [];\n                        if (!Array.isArray(createPayload)) {\n                            createPayload = [createPayload];\n                        }\n                        for (const item of (0, cross_1.enumerate)(args.data)) {\n                            this.doProcessCreatePayload(model, item);\n                            createPayload.push(item);\n                        }\n                        context.parent.create = createPayload;\n                        delete context.parent['createMany'];\n                    }\n                },\n            });\n            yield visitor.visit(model, 'create', args);\n        });\n    }\n    doProcessCreatePayload(model, args) {\n        if (!args) {\n            return;\n        }\n        this.ensureBaseCreateHierarchy(model, args);\n        for (const [field, value] of Object.entries(args)) {\n            const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n            if (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom) {\n                this.injectBaseFieldData(model, fieldInfo, value, args, 'create');\n                delete args[field];\n            }\n        }\n    }\n    // ensure the full nested \"create\" structure is created for base types\n    ensureBaseCreateHierarchy(model, args) {\n        let curr = args;\n        let base = this.getBaseModel(model);\n        let sub = this.getModelInfo(model);\n        while (base) {\n            const baseRelationName = this.makeAuxRelationName(base);\n            if (!curr[baseRelationName]) {\n                curr[baseRelationName] = {};\n            }\n            if (!curr[baseRelationName].create) {\n                curr[baseRelationName].create = {};\n                if (base.discriminator) {\n                    // set discriminator field\n                    curr[baseRelationName].create[base.discriminator] = sub.name;\n                }\n            }\n            // Look for base id field assignments in the current level, and push\n            // them down to the base level\n            for (const idField of (0, cross_1.getIdFields)(this.options.modelMeta, base.name)) {\n                if (curr[idField.name] !== undefined) {\n                    curr[baseRelationName].create[idField.name] = curr[idField.name];\n                    delete curr[idField.name];\n                }\n            }\n            curr = curr[baseRelationName].create;\n            sub = base;\n            base = this.getBaseModel(base.name);\n        }\n    }\n    // inject field data that belongs to base type into proper nesting structure\n    injectBaseFieldData(model, fieldInfo, value, args, mode) {\n        let base = this.getBaseModel(model);\n        let curr = args;\n        while (base) {\n            if (base.discriminator === fieldInfo.name) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `fields \"${fieldInfo.name}\" is a discriminator and cannot be set directly`);\n            }\n            const baseRelationName = this.makeAuxRelationName(base);\n            if (!curr[baseRelationName]) {\n                curr[baseRelationName] = {};\n            }\n            if (!curr[baseRelationName][mode]) {\n                curr[baseRelationName][mode] = {};\n            }\n            curr = curr[baseRelationName][mode];\n            if (fieldInfo.inheritedFrom === base.name) {\n                curr[fieldInfo.name] = value;\n                break;\n            }\n            base = this.getBaseModel(base.name);\n        }\n    }\n    // #endregion\n    // #region update\n    update(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'data field is required in query argument');\n        }\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.update(args);\n        }\n        return this.queryUtils.transaction(this.prisma, (tx) => this.doUpdate(tx, this.model, args));\n    }\n    updateMany(args) {\n        const _super = Object.create(null, {\n            updateMany: { get: () => super.updateMany }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!args) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n            }\n            if (!args.data) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'data field is required in query argument');\n            }\n            if (!this.involvesDelegateModel(this.model)) {\n                return _super.updateMany.call(this, args);\n            }\n            const simpleUpdateMany = Object.keys(args.data).every((key) => {\n                // check if the `data` clause involves base fields\n                const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, this.model, key);\n                return !(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom);\n            });\n            return this.queryUtils.transaction(this.prisma, (tx) => this.doUpdateMany(tx, this.model, args, simpleUpdateMany));\n        });\n    }\n    upsert(args) {\n        const _super = Object.create(null, {\n            upsert: { get: () => super.upsert }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!args) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n            }\n            if (!args.where) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'where field is required in query argument');\n            }\n            if ((0, cross_1.isDelegateModel)(this.options.modelMeta, this.model)) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `Model \"${this.model}\" is a delegate and doesn't support upsert`);\n            }\n            if (!this.involvesDelegateModel(this.model)) {\n                return _super.upsert.call(this, args);\n            }\n            args = (0, deepcopy_1.default)(args);\n            this.injectWhereHierarchy(this.model, args === null || args === void 0 ? void 0 : args.where);\n            this.injectSelectIncludeHierarchy(this.model, args);\n            if (args.create) {\n                this.doProcessCreatePayload(this.model, args.create);\n            }\n            if (args.update) {\n                this.doProcessUpdatePayload(this.model, args.update);\n            }\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`upsert\\` ${this.getModelName(this.model)}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const result = yield this.prisma[this.model].upsert(args);\n            return this.assembleHierarchy(this.model, result);\n        });\n    }\n    doUpdate(db, model, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            args = (0, deepcopy_1.default)(args);\n            yield this.injectUpdateHierarchy(db, model, args);\n            this.injectSelectIncludeHierarchy(model, args);\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`update\\` ${this.getModelName(model)}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const result = yield db[model].update(args);\n            return this.assembleHierarchy(model, result);\n        });\n    }\n    doUpdateMany(db, model, args, simpleUpdateMany) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (simpleUpdateMany) {\n                // do a direct `updateMany`\n                args = (0, deepcopy_1.default)(args);\n                yield this.injectUpdateHierarchy(db, model, args);\n                if (this.options.logPrismaQuery) {\n                    this.logger.info(`[delegate] \\`updateMany\\` ${this.getModelName(model)}: ${(0, utils_1.formatObject)(args)}`);\n                }\n                return db[model].updateMany(args);\n            }\n            else {\n                // translate to plain `update` for nested write into base fields\n                const findArgs = {\n                    where: (0, deepcopy_1.default)(args.where),\n                    select: this.queryUtils.makeIdSelection(model),\n                };\n                yield this.injectUpdateHierarchy(db, model, findArgs);\n                if (this.options.logPrismaQuery) {\n                    this.logger.info(`[delegate] \\`updateMany\\` find candidates: ${this.getModelName(model)}: ${(0, utils_1.formatObject)(findArgs)}`);\n                }\n                const entities = yield db[model].findMany(findArgs);\n                const updatePayload = { data: (0, deepcopy_1.default)(args.data), select: this.queryUtils.makeIdSelection(model) };\n                yield this.injectUpdateHierarchy(db, model, updatePayload);\n                const result = yield Promise.all(entities.map((entity) => {\n                    const updateArgs = Object.assign({ where: entity }, updatePayload);\n                    if (this.options.logPrismaQuery) {\n                        this.logger.info(`[delegate] \\`updateMany\\` update: ${this.getModelName(model)}: ${(0, utils_1.formatObject)(updateArgs)}`);\n                    }\n                    return db[model].update(updateArgs);\n                }));\n                return { count: result.length };\n            }\n        });\n    }\n    injectUpdateHierarchy(db, model, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const visitor = new cross_1.NestedWriteVisitor(this.options.modelMeta, {\n                update: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args === null || args === void 0 ? void 0 : args.where);\n                    this.doProcessUpdatePayload(model, args === null || args === void 0 ? void 0 : args.data);\n                },\n                updateMany: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    let simpleUpdateMany = Object.keys(args.data).every((key) => {\n                        // check if the `data` clause involves base fields\n                        const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, key);\n                        return !(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom);\n                    });\n                    if (simpleUpdateMany) {\n                        // check if the `where` clause involves base fields\n                        simpleUpdateMany = Object.keys(args.where || {}).every((key) => {\n                            const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, key);\n                            return !(fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom);\n                        });\n                    }\n                    if (simpleUpdateMany) {\n                        this.injectWhereHierarchy(model, args === null || args === void 0 ? void 0 : args.where);\n                        this.doProcessUpdatePayload(model, args === null || args === void 0 ? void 0 : args.data);\n                    }\n                    else {\n                        const where = this.queryUtils.buildReversedQuery(context, false, false);\n                        yield this.queryUtils.transaction(db, (tx) => __awaiter(this, void 0, void 0, function* () {\n                            yield this.doUpdateMany(tx, model, Object.assign(Object.assign({}, args), { where }), simpleUpdateMany);\n                        }));\n                        delete context.parent['updateMany'];\n                    }\n                }),\n                upsert: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args === null || args === void 0 ? void 0 : args.where);\n                    if (args.create) {\n                        this.doProcessCreatePayload(model, args === null || args === void 0 ? void 0 : args.create);\n                    }\n                    if (args.update) {\n                        this.doProcessUpdatePayload(model, args === null || args === void 0 ? void 0 : args.update);\n                    }\n                },\n                create: (model, args, _context) => {\n                    if ((0, cross_1.isDelegateModel)(this.options.modelMeta, model)) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `Model \"${model}\" is a delegate and cannot be created directly`);\n                    }\n                    this.doProcessCreatePayload(model, args);\n                },\n                createMany: (model, args, _context) => {\n                    if (args.skipDuplicates) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, '`createMany` with `skipDuplicates` set to true is not supported for delegated models');\n                    }\n                    for (const item of (0, cross_1.enumerate)(args === null || args === void 0 ? void 0 : args.data)) {\n                        this.doProcessCreatePayload(model, item);\n                    }\n                },\n                connect: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args);\n                },\n                connectOrCreate: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args.where);\n                    if (args.create) {\n                        this.doProcessCreatePayload(model, args.create);\n                    }\n                },\n                disconnect: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args);\n                },\n                set: (model, args, _context) => {\n                    this.injectWhereHierarchy(model, args);\n                },\n                delete: (model, _args, context) => __awaiter(this, void 0, void 0, function* () {\n                    const where = this.queryUtils.buildReversedQuery(context, false, false);\n                    yield this.queryUtils.transaction(db, (tx) => __awaiter(this, void 0, void 0, function* () {\n                        yield this.doDelete(tx, model, { where });\n                    }));\n                    delete context.parent['delete'];\n                }),\n                deleteMany: (model, _args, context) => __awaiter(this, void 0, void 0, function* () {\n                    const where = this.queryUtils.buildReversedQuery(context, false, false);\n                    yield this.queryUtils.transaction(db, (tx) => __awaiter(this, void 0, void 0, function* () {\n                        yield this.doDeleteMany(tx, model, where);\n                    }));\n                    delete context.parent['deleteMany'];\n                }),\n            });\n            yield visitor.visit(model, 'update', args);\n        });\n    }\n    doProcessUpdatePayload(model, data) {\n        if (!data) {\n            return;\n        }\n        for (const [field, value] of Object.entries(data)) {\n            const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n            if (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom) {\n                this.injectBaseFieldData(model, fieldInfo, value, data, 'update');\n                delete data[field];\n            }\n        }\n    }\n    // #endregion\n    // #region delete\n    delete(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n        }\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.delete(args);\n        }\n        return this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n            const selectInclude = this.buildSelectIncludeHierarchy(this.model, args);\n            // make sure id fields are selected\n            const idFields = this.getIdFields(this.model);\n            for (const idField of idFields) {\n                if ((selectInclude === null || selectInclude === void 0 ? void 0 : selectInclude.select) && !(idField.name in selectInclude.select)) {\n                    selectInclude.select[idField.name] = true;\n                }\n            }\n            const deleteArgs = Object.assign(Object.assign({}, (0, deepcopy_1.default)(args)), selectInclude);\n            return this.doDelete(tx, this.model, deleteArgs);\n        }));\n    }\n    deleteMany(args) {\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.deleteMany(args);\n        }\n        return this.queryUtils.transaction(this.prisma, (tx) => this.doDeleteMany(tx, this.model, args === null || args === void 0 ? void 0 : args.where));\n    }\n    doDeleteMany(db, model, where) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // query existing entities with id\n            const idSelection = this.queryUtils.makeIdSelection(model);\n            const findArgs = { where: (0, deepcopy_1.default)(where), select: idSelection };\n            this.injectWhereHierarchy(model, findArgs.where);\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`deleteMany\\` find candidates: ${this.getModelName(model)}: ${(0, utils_1.formatObject)(findArgs)}`);\n            }\n            const entities = yield db[model].findMany(findArgs);\n            // recursively delete base entities (they all have the same id values)\n            yield Promise.all(entities.map((entity) => this.doDelete(db, model, { where: entity })));\n            return { count: entities.length };\n        });\n    }\n    deleteBaseRecursively(db, model, idValues) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let base = this.getBaseModel(model);\n            while (base) {\n                yield db[base.name].delete({ where: idValues });\n                base = this.getBaseModel(base.name);\n            }\n        });\n    }\n    doDelete(db, model, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.injectWhereHierarchy(model, args.where);\n            if (this.options.logPrismaQuery) {\n                this.logger.info(`[delegate] \\`delete\\` ${this.getModelName(model)}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const result = yield db[model].delete(args);\n            const idValues = this.queryUtils.getEntityIds(model, result);\n            // recursively delete base entities (they all have the same id values)\n            yield this.deleteBaseRecursively(db, model, idValues);\n            return this.assembleHierarchy(model, result);\n        });\n    }\n    // #endregion\n    // #region aggregation\n    aggregate(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n        }\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.aggregate(args);\n        }\n        // check if any aggregation operator is using fields from base\n        this.checkAggregationArgs('aggregate', args);\n        args = (0, deepcopy_1.default)(args);\n        if (args.cursor) {\n            args.cursor = this.buildWhereHierarchy(this.model, args.cursor);\n        }\n        if (args.orderBy) {\n            args.orderBy = this.buildWhereHierarchy(this.model, args.orderBy);\n        }\n        if (args.where) {\n            args.where = this.buildWhereHierarchy(this.model, args.where);\n        }\n        if (this.options.logPrismaQuery) {\n            this.logger.info(`[delegate] \\`aggregate\\` ${this.getModelName(this.model)}: ${(0, utils_1.formatObject)(args)}`);\n        }\n        return super.aggregate(args);\n    }\n    count(args) {\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.count(args);\n        }\n        // check if count select is using fields from base\n        this.checkAggregationArgs('count', args);\n        args = (0, deepcopy_1.default)(args);\n        if (args === null || args === void 0 ? void 0 : args.cursor) {\n            args.cursor = this.buildWhereHierarchy(this.model, args.cursor);\n        }\n        if (args === null || args === void 0 ? void 0 : args.where) {\n            args.where = this.buildWhereHierarchy(this.model, args.where);\n        }\n        if (this.options.logPrismaQuery) {\n            this.logger.info(`[delegate] \\`count\\` ${this.getModelName(this.model)}: ${(0, utils_1.formatObject)(args)}`);\n        }\n        return super.count(args);\n    }\n    groupBy(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, 'query argument is required');\n        }\n        if (!this.involvesDelegateModel(this.model)) {\n            return super.groupBy(args);\n        }\n        // check if count select is using fields from base\n        this.checkAggregationArgs('groupBy', args);\n        if (args.by) {\n            for (const by of (0, cross_1.enumerate)(args.by)) {\n                const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, this.model, by);\n                if (fieldInfo && fieldInfo.inheritedFrom) {\n                    throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `groupBy with fields from base type is not supported yet: \"${by}\"`);\n                }\n            }\n        }\n        args = (0, deepcopy_1.default)(args);\n        if (args.where) {\n            args.where = this.buildWhereHierarchy(this.model, args.where);\n        }\n        if (this.options.logPrismaQuery) {\n            this.logger.info(`[delegate] \\`groupBy\\` ${this.getModelName(this.model)}: ${(0, utils_1.formatObject)(args)}`);\n        }\n        return super.groupBy(args);\n    }\n    checkAggregationArgs(operation, args) {\n        if (!args) {\n            return;\n        }\n        for (const op of ['_count', '_sum', '_avg', '_min', '_max', 'select', 'having']) {\n            if (args[op] && typeof args[op] === 'object') {\n                for (const field of Object.keys(args[op])) {\n                    const fieldInfo = (0, cross_1.resolveField)(this.options.modelMeta, this.model, field);\n                    if (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.inheritedFrom) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, `${operation} with fields from base type is not supported yet: \"${field}\"`);\n                    }\n                }\n            }\n        }\n    }\n    // #endregion\n    // #region utils\n    extractSelectInclude(args) {\n        if (!args) {\n            return undefined;\n        }\n        args = (0, deepcopy_1.default)(args);\n        return 'select' in args\n            ? { select: args['select'] }\n            : 'include' in args\n                ? { include: args['include'] }\n                : undefined;\n    }\n    makeAuxRelationName(model) {\n        return `${constants_1.DELEGATE_AUX_RELATION_PREFIX}_${(0, lower_case_first_1.lowerCaseFirst)(model.name)}`;\n    }\n    getModelName(model) {\n        const info = (0, cross_1.getModelInfo)(this.options.modelMeta, model, true);\n        return info.name;\n    }\n    getIdFields(model) {\n        const idFields = (0, cross_1.getIdFields)(this.options.modelMeta, model);\n        if (idFields && idFields.length > 0) {\n            return idFields;\n        }\n        const base = this.getBaseModel(model);\n        return base ? this.getIdFields(base.name) : [];\n    }\n    getModelInfo(model) {\n        return (0, cross_1.getModelInfo)(this.options.modelMeta, model, true);\n    }\n    getBaseModel(model) {\n        const baseNames = (0, cross_1.getModelInfo)(this.options.modelMeta, model, true).baseTypes;\n        if (!baseNames) {\n            return undefined;\n        }\n        if (baseNames.length > 1) {\n            throw new Error('Multi-inheritance is not supported');\n        }\n        return this.options.modelMeta.models[(0, lower_case_first_1.lowerCaseFirst)(baseNames[0])];\n    }\n    involvesDelegateModel(model, visited) {\n        if (this.isDelegateOrDescendantOfDelegate(model)) {\n            return true;\n        }\n        visited = visited !== null && visited !== void 0 ? visited : new Set();\n        if (visited.has(model)) {\n            return false;\n        }\n        visited.add(model);\n        const modelInfo = (0, cross_1.getModelInfo)(this.options.modelMeta, model, true);\n        return Object.values(modelInfo.fields).some((field) => field.isDataModel && this.involvesDelegateModel(field.type, visited));\n    }\n    isDelegateOrDescendantOfDelegate(model) {\n        var _a;\n        if ((0, cross_1.isDelegateModel)(this.options.modelMeta, model)) {\n            return true;\n        }\n        const baseTypes = (_a = (0, cross_1.getModelInfo)(this.options.modelMeta, model)) === null || _a === void 0 ? void 0 : _a.baseTypes;\n        return !!(baseTypes &&\n            baseTypes.length > 0 &&\n            baseTypes.some((base) => this.isDelegateOrDescendantOfDelegate(base)));\n    }\n    assembleHierarchy(model, entity) {\n        if (!entity || typeof entity !== 'object') {\n            return entity;\n        }\n        const upMerged = this.assembleUp(model, entity);\n        const downMerged = this.assembleDown(model, entity);\n        // https://www.npmjs.com/package/deepmerge#arraymerge-example-combine-arrays\n        const combineMerge = (target, source, options) => {\n            const destination = target.slice();\n            source.forEach((item, index) => {\n                if (typeof destination[index] === 'undefined') {\n                    destination[index] = options.cloneUnlessOtherwiseSpecified(item, options);\n                }\n                else if (options.isMergeableObject(item)) {\n                    destination[index] = (0, deepmerge_1.default)(target[index], item, options);\n                }\n                else if (target.indexOf(item) === -1) {\n                    destination.push(item);\n                }\n            });\n            return destination;\n        };\n        const result = (0, deepmerge_1.default)(upMerged, downMerged, {\n            arrayMerge: combineMerge,\n            isMergeableObject: (v) => (0, is_plain_object_1.isPlainObject)(v) || Array.isArray(v), // avoid messing with Decimal, Date, etc.\n        });\n        return result;\n    }\n    assembleUp(model, entity) {\n        if (!entity) {\n            return entity;\n        }\n        const result = {};\n        const base = this.getBaseModel(model);\n        if (base) {\n            // merge base fields\n            const baseRelationName = this.makeAuxRelationName(base);\n            const baseData = entity[baseRelationName];\n            if (baseData && typeof baseData === 'object') {\n                const baseAssembled = this.assembleUp(base.name, baseData);\n                Object.assign(result, baseAssembled);\n            }\n        }\n        const modelInfo = (0, cross_1.getModelInfo)(this.options.modelMeta, model, true);\n        for (const [key, value] of Object.entries(entity)) {\n            if (key.startsWith(constants_1.DELEGATE_AUX_RELATION_PREFIX)) {\n                continue;\n            }\n            const field = modelInfo.fields[key];\n            if (!field) {\n                // not a field, could be `_count`, `_sum`, etc.\n                result[key] = value;\n                continue;\n            }\n            if (field.inheritedFrom) {\n                // already merged from base\n                continue;\n            }\n            if (field.isDataModel) {\n                if (Array.isArray(value)) {\n                    result[field.name] = value.map((item) => this.assembleUp(field.type, item));\n                }\n                else {\n                    result[field.name] = this.assembleUp(field.type, value);\n                }\n            }\n            else {\n                result[field.name] = value;\n            }\n        }\n        return result;\n    }\n    assembleDown(model, entity) {\n        if (!entity) {\n            return entity;\n        }\n        const result = {};\n        const modelInfo = (0, cross_1.getModelInfo)(this.options.modelMeta, model, true);\n        if (modelInfo.discriminator) {\n            // model is a delegate, merge sub model fields\n            const subModelName = entity[modelInfo.discriminator];\n            if (subModelName) {\n                const subModel = (0, cross_1.getModelInfo)(this.options.modelMeta, subModelName, true);\n                const subRelationName = this.makeAuxRelationName(subModel);\n                const subData = entity[subRelationName];\n                if (subData && typeof subData === 'object') {\n                    const subAssembled = this.assembleDown(subModel.name, subData);\n                    Object.assign(result, subAssembled);\n                }\n            }\n        }\n        for (const [key, value] of Object.entries(entity)) {\n            if (key.startsWith(constants_1.DELEGATE_AUX_RELATION_PREFIX)) {\n                continue;\n            }\n            const field = modelInfo.fields[key];\n            if (!field) {\n                // not a field, could be `_count`, `_sum`, etc.\n                result[key] = value;\n                continue;\n            }\n            if (field.isDataModel) {\n                if (Array.isArray(value)) {\n                    result[field.name] = value.map((item) => this.assembleDown(field.type, item));\n                }\n                else {\n                    result[field.name] = this.assembleDown(field.type, value);\n                }\n            }\n            else {\n                result[field.name] = value;\n            }\n        }\n        return result;\n    }\n}\nexports.DelegateProxyHandler = DelegateProxyHandler;\n//# sourceMappingURL=delegate.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/delegate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/index.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/index.js ***!
  \**************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./create-enhancement */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/create-enhancement.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGFBQWEsbUJBQU8sQ0FBQywySkFBVTtBQUMvQixhQUFhLG1CQUFPLENBQUMsMkxBQXNCO0FBQzNDLGFBQWEsbUJBQU8sQ0FBQyxpS0FBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsaUtBQVM7QUFDOUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dC1qcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AemVuc3RhY2tocStydW50aW1lQDIuMi40X0BwcmlzbWErY2xpZW50QDUuMTcuMF9wcmlzbWFANS4xNy4wXy9ub2RlX21vZHVsZXMvQHplbnN0YWNraHEvcnVudGltZS9lbmhhbmNlbWVudHMvaW5kZXguanM/ZDM4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuLi9jcm9zc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY3JlYXRlLWVuaGFuY2VtZW50XCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi90eXBlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdXRpbHNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js":
/*!***************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js ***!
  \***************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Logger = void 0;\n/**\n * A logger that uses an existing Prisma client to emit.\n */\nclass Logger {\n    constructor(prisma) {\n        this.prisma = prisma;\n        this.eventNames = [];\n        const engine = this.prisma._engine;\n        this.emitter = engine ? engine.logEmitter : undefined;\n        if (this.emitter) {\n            if (typeof this.emitter.eventNames === 'function') {\n                // Node.js\n                this.eventNames = this.emitter.eventNames();\n            }\n            else if ('events' in this.emitter && this.emitter.events && typeof this.emitter.events === 'object') {\n                // edge runtime\n                this.eventNames = Object.keys(this.emitter.events);\n            }\n            else {\n                this.eventNames = [];\n            }\n        }\n    }\n    /**\n     * Checks if a log level is enabled.\n     */\n    enabled(level) {\n        return !!this.eventNames.includes(level);\n    }\n    /**\n     * Generates a message with the given level.\n     */\n    log(level, message) {\n        var _a;\n        (_a = this.emitter) === null || _a === void 0 ? void 0 : _a.emit(level, {\n            timestamp: new Date(),\n            message,\n            target: 'zenstack',\n        });\n    }\n    /**\n     * Generates a log message with info level.\n     */\n    info(message) {\n        this.log('info', message);\n    }\n    /**\n     * Generates a log message with warn level.\n     */\n    warn(message) {\n        this.log('warn', message);\n    }\n    /**\n     * Generates a log message with error level.\n     */\n    error(message) {\n        this.log('error', message);\n    }\n}\nexports.Logger = Logger;\n//# sourceMappingURL=logger.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL2xvZ2dlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGNBQWM7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dC1qcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AemVuc3RhY2tocStydW50aW1lQDIuMi40X0BwcmlzbWErY2xpZW50QDUuMTcuMF9wcmlzbWFANS4xNy4wXy9ub2RlX21vZHVsZXMvQHplbnN0YWNraHEvcnVudGltZS9lbmhhbmNlbWVudHMvbG9nZ2VyLmpzPzQ5ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkxvZ2dlciA9IHZvaWQgMDtcbi8qKlxuICogQSBsb2dnZXIgdGhhdCB1c2VzIGFuIGV4aXN0aW5nIFByaXNtYSBjbGllbnQgdG8gZW1pdC5cbiAqL1xuY2xhc3MgTG9nZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihwcmlzbWEpIHtcbiAgICAgICAgdGhpcy5wcmlzbWEgPSBwcmlzbWE7XG4gICAgICAgIHRoaXMuZXZlbnROYW1lcyA9IFtdO1xuICAgICAgICBjb25zdCBlbmdpbmUgPSB0aGlzLnByaXNtYS5fZW5naW5lO1xuICAgICAgICB0aGlzLmVtaXR0ZXIgPSBlbmdpbmUgPyBlbmdpbmUubG9nRW1pdHRlciA6IHVuZGVmaW5lZDtcbiAgICAgICAgaWYgKHRoaXMuZW1pdHRlcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmVtaXR0ZXIuZXZlbnROYW1lcyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgIC8vIE5vZGUuanNcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TmFtZXMgPSB0aGlzLmVtaXR0ZXIuZXZlbnROYW1lcygpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoJ2V2ZW50cycgaW4gdGhpcy5lbWl0dGVyICYmIHRoaXMuZW1pdHRlci5ldmVudHMgJiYgdHlwZW9mIHRoaXMuZW1pdHRlci5ldmVudHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgLy8gZWRnZSBydW50aW1lXG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudE5hbWVzID0gT2JqZWN0LmtleXModGhpcy5lbWl0dGVyLmV2ZW50cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50TmFtZXMgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3MgaWYgYSBsb2cgbGV2ZWwgaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBlbmFibGVkKGxldmVsKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZXZlbnROYW1lcy5pbmNsdWRlcyhsZXZlbCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIG1lc3NhZ2Ugd2l0aCB0aGUgZ2l2ZW4gbGV2ZWwuXG4gICAgICovXG4gICAgbG9nKGxldmVsLCBtZXNzYWdlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgKF9hID0gdGhpcy5lbWl0dGVyKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZW1pdChsZXZlbCwge1xuICAgICAgICAgICAgdGltZXN0YW1wOiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgIHRhcmdldDogJ3plbnN0YWNrJyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlcyBhIGxvZyBtZXNzYWdlIHdpdGggaW5mbyBsZXZlbC5cbiAgICAgKi9cbiAgICBpbmZvKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5sb2coJ2luZm8nLCBtZXNzYWdlKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGVzIGEgbG9nIG1lc3NhZ2Ugd2l0aCB3YXJuIGxldmVsLlxuICAgICAqL1xuICAgIHdhcm4obWVzc2FnZSkge1xuICAgICAgICB0aGlzLmxvZygnd2FybicsIG1lc3NhZ2UpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZXMgYSBsb2cgbWVzc2FnZSB3aXRoIGVycm9yIGxldmVsLlxuICAgICAqL1xuICAgIGVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgdGhpcy5sb2coJ2Vycm9yJywgbWVzc2FnZSk7XG4gICAgfVxufVxuZXhwb3J0cy5Mb2dnZXIgPSBMb2dnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1sb2dnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/omit.js":
/*!*************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/omit.js ***!
  \*************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.withOmit = void 0;\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst proxy_1 = __webpack_require__(/*! ./proxy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\");\n/**\n * Gets an enhanced Prisma client that supports `@omit` attribute.\n *\n * @private\n */\nfunction withOmit(prisma, options) {\n    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new OmitHandler(_prisma, model, options), 'omit');\n}\nexports.withOmit = withOmit;\nclass OmitHandler extends proxy_1.DefaultPrismaProxyHandler {\n    constructor(prisma, model, options) {\n        super(prisma, model, options);\n    }\n    // base override\n    processResultEntity(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (data) {\n                for (const value of (0, cross_1.enumerate)(data)) {\n                    yield this.doPostProcess(value, this.model);\n                }\n            }\n            return data;\n        });\n    }\n    doPostProcess(entityData, model) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            for (const field of (0, cross_1.getModelFields)(entityData)) {\n                const fieldInfo = yield (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n                if (!fieldInfo) {\n                    continue;\n                }\n                const shouldOmit = (_a = fieldInfo.attributes) === null || _a === void 0 ? void 0 : _a.find((attr) => attr.name === '@omit');\n                if (shouldOmit) {\n                    delete entityData[field];\n                }\n                if (fieldInfo.isDataModel) {\n                    const items = fieldInfo.isArray && Array.isArray(entityData[field]) ? entityData[field] : [entityData[field]];\n                    for (const item of items) {\n                        // recurse\n                        yield this.doPostProcess(item, fieldInfo.type);\n                    }\n                }\n            }\n        });\n    }\n}\n//# sourceMappingURL=omit.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL29taXQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0I7QUFDaEIsZ0JBQWdCLG1CQUFPLENBQUMsMkpBQVU7QUFDbEMsZ0JBQWdCLG1CQUFPLENBQUMsaUtBQVM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHQtanMvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL29taXQuanM/ZGFkNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbi8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFycyAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xudmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLndpdGhPbWl0ID0gdm9pZCAwO1xuY29uc3QgY3Jvc3NfMSA9IHJlcXVpcmUoXCIuLi9jcm9zc1wiKTtcbmNvbnN0IHByb3h5XzEgPSByZXF1aXJlKFwiLi9wcm94eVwiKTtcbi8qKlxuICogR2V0cyBhbiBlbmhhbmNlZCBQcmlzbWEgY2xpZW50IHRoYXQgc3VwcG9ydHMgYEBvbWl0YCBhdHRyaWJ1dGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gd2l0aE9taXQocHJpc21hLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuICgwLCBwcm94eV8xLm1ha2VQcm94eSkocHJpc21hLCBvcHRpb25zLm1vZGVsTWV0YSwgKF9wcmlzbWEsIG1vZGVsKSA9PiBuZXcgT21pdEhhbmRsZXIoX3ByaXNtYSwgbW9kZWwsIG9wdGlvbnMpLCAnb21pdCcpO1xufVxuZXhwb3J0cy53aXRoT21pdCA9IHdpdGhPbWl0O1xuY2xhc3MgT21pdEhhbmRsZXIgZXh0ZW5kcyBwcm94eV8xLkRlZmF1bHRQcmlzbWFQcm94eUhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXNtYSwgbW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIocHJpc21hLCBtb2RlbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIGJhc2Ugb3ZlcnJpZGVcbiAgICBwcm9jZXNzUmVzdWx0RW50aXR5KGRhdGEpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB2YWx1ZSBvZiAoMCwgY3Jvc3NfMS5lbnVtZXJhdGUpKGRhdGEpKSB7XG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuZG9Qb3N0UHJvY2Vzcyh2YWx1ZSwgdGhpcy5tb2RlbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBkb1Bvc3RQcm9jZXNzKGVudGl0eURhdGEsIG1vZGVsKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkIG9mICgwLCBjcm9zc18xLmdldE1vZGVsRmllbGRzKShlbnRpdHlEYXRhKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkSW5mbyA9IHlpZWxkICgwLCBjcm9zc18xLnJlc29sdmVGaWVsZCkodGhpcy5vcHRpb25zLm1vZGVsTWV0YSwgbW9kZWwsIGZpZWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoIWZpZWxkSW5mbykge1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY29uc3Qgc2hvdWxkT21pdCA9IChfYSA9IGZpZWxkSW5mby5hdHRyaWJ1dGVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZmluZCgoYXR0cikgPT4gYXR0ci5uYW1lID09PSAnQG9taXQnKTtcbiAgICAgICAgICAgICAgICBpZiAoc2hvdWxkT21pdCkge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgZW50aXR5RGF0YVtmaWVsZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChmaWVsZEluZm8uaXNEYXRhTW9kZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBmaWVsZEluZm8uaXNBcnJheSAmJiBBcnJheS5pc0FycmF5KGVudGl0eURhdGFbZmllbGRdKSA/IGVudGl0eURhdGFbZmllbGRdIDogW2VudGl0eURhdGFbZmllbGRdXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIGl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyByZWN1cnNlXG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB0aGlzLmRvUG9zdFByb2Nlc3MoaXRlbSwgZmllbGRJbmZvLnR5cGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vbWl0LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/omit.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/password.js":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/password.js ***!
  \*****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-unused-vars */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.withPassword = void 0;\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst proxy_1 = __webpack_require__(/*! ./proxy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\");\n/**\n * Gets an enhanced Prisma client that supports `@password` attribute.\n *\n * @private\n */\nfunction withPassword(prisma, options) {\n    return (0, proxy_1.makeProxy)(prisma, options.modelMeta, (_prisma, model) => new PasswordHandler(_prisma, model, options), 'password');\n}\nexports.withPassword = withPassword;\n// eslint-disable-next-line @typescript-eslint/no-var-requires\nconst hashFunc = typeof EdgeRuntime === 'string' ? (__webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/.pnpm/bcryptjs@2.4.3/node_modules/bcryptjs/index.js\").hashSync) : (__webpack_require__(/*! bcryptjs */ \"(rsc)/./node_modules/.pnpm/bcryptjs@2.4.3/node_modules/bcryptjs/index.js\").hash);\nclass PasswordHandler extends proxy_1.DefaultPrismaProxyHandler {\n    constructor(prisma, model, options) {\n        super(prisma, model, options);\n    }\n    // base override\n    preprocessArgs(action, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const actionsOfInterest = ['create', 'createMany', 'update', 'updateMany', 'upsert'];\n            if (args && args.data && actionsOfInterest.includes(action)) {\n                yield this.preprocessWritePayload(this.model, action, args);\n            }\n            return args;\n        });\n    }\n    preprocessWritePayload(model, action, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const visitor = new cross_1.NestedWriteVisitor(this.options.modelMeta, {\n                field: (field, _action, data, context) => __awaiter(this, void 0, void 0, function* () {\n                    var _a, _b, _c;\n                    const pwdAttr = (_a = field.attributes) === null || _a === void 0 ? void 0 : _a.find((attr) => attr.name === '@password');\n                    if (pwdAttr && field.type === 'String') {\n                        // hash password value\n                        let salt = (_b = pwdAttr.args.find((arg) => arg.name === 'salt')) === null || _b === void 0 ? void 0 : _b.value;\n                        if (!salt) {\n                            salt = (_c = pwdAttr.args.find((arg) => arg.name === 'saltLength')) === null || _c === void 0 ? void 0 : _c.value;\n                        }\n                        if (!salt) {\n                            salt = constants_1.DEFAULT_PASSWORD_SALT_LENGTH;\n                        }\n                        context.parent[field.name] = yield hashFunc(data, salt);\n                    }\n                }),\n            });\n            yield visitor.visit(model, action, args);\n        });\n    }\n}\n//# sourceMappingURL=password.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3Bhc3N3b3JkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsb0JBQW9CO0FBQ3BCLG9CQUFvQixtQkFBTyxDQUFDLDZKQUFjO0FBQzFDLGdCQUFnQixtQkFBTyxDQUFDLDJKQUFVO0FBQ2xDLGdCQUFnQixtQkFBTyxDQUFDLGlLQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSxtREFBbUQsMEhBQTRCLEdBQUcsc0hBQXdCO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIsYUFBYTtBQUNiO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2VuaGFuY2VtZW50cy9wYXNzd29yZC5qcz9iMzllIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXVudXNlZC12YXJzICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2l0aFBhc3N3b3JkID0gdm9pZCAwO1xuY29uc3QgY29uc3RhbnRzXzEgPSByZXF1aXJlKFwiLi4vY29uc3RhbnRzXCIpO1xuY29uc3QgY3Jvc3NfMSA9IHJlcXVpcmUoXCIuLi9jcm9zc1wiKTtcbmNvbnN0IHByb3h5XzEgPSByZXF1aXJlKFwiLi9wcm94eVwiKTtcbi8qKlxuICogR2V0cyBhbiBlbmhhbmNlZCBQcmlzbWEgY2xpZW50IHRoYXQgc3VwcG9ydHMgYEBwYXNzd29yZGAgYXR0cmlidXRlLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHdpdGhQYXNzd29yZChwcmlzbWEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gKDAsIHByb3h5XzEubWFrZVByb3h5KShwcmlzbWEsIG9wdGlvbnMubW9kZWxNZXRhLCAoX3ByaXNtYSwgbW9kZWwpID0+IG5ldyBQYXNzd29yZEhhbmRsZXIoX3ByaXNtYSwgbW9kZWwsIG9wdGlvbnMpLCAncGFzc3dvcmQnKTtcbn1cbmV4cG9ydHMud2l0aFBhc3N3b3JkID0gd2l0aFBhc3N3b3JkO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby12YXItcmVxdWlyZXNcbmNvbnN0IGhhc2hGdW5jID0gdHlwZW9mIEVkZ2VSdW50aW1lID09PSAnc3RyaW5nJyA/IHJlcXVpcmUoJ2JjcnlwdGpzJykuaGFzaFN5bmMgOiByZXF1aXJlKCdiY3J5cHRqcycpLmhhc2g7XG5jbGFzcyBQYXNzd29yZEhhbmRsZXIgZXh0ZW5kcyBwcm94eV8xLkRlZmF1bHRQcmlzbWFQcm94eUhhbmRsZXIge1xuICAgIGNvbnN0cnVjdG9yKHByaXNtYSwgbW9kZWwsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIocHJpc21hLCBtb2RlbCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIGJhc2Ugb3ZlcnJpZGVcbiAgICBwcmVwcm9jZXNzQXJncyhhY3Rpb24sIGFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbnNPZkludGVyZXN0ID0gWydjcmVhdGUnLCAnY3JlYXRlTWFueScsICd1cGRhdGUnLCAndXBkYXRlTWFueScsICd1cHNlcnQnXTtcbiAgICAgICAgICAgIGlmIChhcmdzICYmIGFyZ3MuZGF0YSAmJiBhY3Rpb25zT2ZJbnRlcmVzdC5pbmNsdWRlcyhhY3Rpb24pKSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdGhpcy5wcmVwcm9jZXNzV3JpdGVQYXlsb2FkKHRoaXMubW9kZWwsIGFjdGlvbiwgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYXJncztcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHByZXByb2Nlc3NXcml0ZVBheWxvYWQobW9kZWwsIGFjdGlvbiwgYXJncykge1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgdmlzaXRvciA9IG5ldyBjcm9zc18xLk5lc3RlZFdyaXRlVmlzaXRvcih0aGlzLm9wdGlvbnMubW9kZWxNZXRhLCB7XG4gICAgICAgICAgICAgICAgZmllbGQ6IChmaWVsZCwgX2FjdGlvbiwgZGF0YSwgY29udGV4dCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2EsIF9iLCBfYztcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcHdkQXR0ciA9IChfYSA9IGZpZWxkLmF0dHJpYnV0ZXMpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5maW5kKChhdHRyKSA9PiBhdHRyLm5hbWUgPT09ICdAcGFzc3dvcmQnKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHB3ZEF0dHIgJiYgZmllbGQudHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGhhc2ggcGFzc3dvcmQgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBzYWx0ID0gKF9iID0gcHdkQXR0ci5hcmdzLmZpbmQoKGFyZykgPT4gYXJnLm5hbWUgPT09ICdzYWx0JykpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc2FsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbHQgPSAoX2MgPSBwd2RBdHRyLmFyZ3MuZmluZCgoYXJnKSA9PiBhcmcubmFtZSA9PT0gJ3NhbHRMZW5ndGgnKSkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzYWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FsdCA9IGNvbnN0YW50c18xLkRFRkFVTFRfUEFTU1dPUkRfU0FMVF9MRU5HVEg7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0LnBhcmVudFtmaWVsZC5uYW1lXSA9IHlpZWxkIGhhc2hGdW5jKGRhdGEsIHNhbHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHlpZWxkIHZpc2l0b3IudmlzaXQobW9kZWwsIGFjdGlvbiwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhc3N3b3JkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/password.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/constraint-solver.js":
/*!*********************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/constraint-solver.js ***!
  \*********************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConstraintSolver = void 0;\nconst logic_solver_1 = __importDefault(__webpack_require__(/*! logic-solver */ \"(rsc)/./node_modules/.pnpm/logic-solver@2.0.1/node_modules/logic-solver/logic-solver.js\"));\nconst ts_pattern_1 = __webpack_require__(/*! ts-pattern */ \"(rsc)/./node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/dist/index.cjs\");\n/**\n * A boolean constraint solver based on `logic-solver`. Only boolean and integer types are supported.\n */\nclass ConstraintSolver {\n    constructor() {\n        // a table for internalizing string literals\n        this.stringTable = [];\n        // a map for storing variable names and their corresponding formulas\n        this.variables = new Map();\n    }\n    /**\n     * Check the satisfiability of the given constraint.\n     */\n    checkSat(constraint) {\n        // reset state\n        this.stringTable = [];\n        this.variables = new Map();\n        // convert the constraint to a \"logic-solver\" formula\n        const formula = this.buildFormula(constraint);\n        // solve the formula\n        const solver = new logic_solver_1.default.Solver();\n        solver.require(formula);\n        // DEBUG:\n        // const solution = solver.solve();\n        // if (solution) {\n        //     console.log('Solution:');\n        //     this.variables.forEach((v, k) => console.log(`\\t${k}=${solution?.evaluate(v)}`));\n        // } else {\n        //     console.log('No solution');\n        // }\n        return !!solver.solve();\n    }\n    buildFormula(constraint) {\n        return (0, ts_pattern_1.match)(constraint)\n            .when((c) => c.kind === 'value', (c) => this.buildValueFormula(c))\n            .when((c) => c.kind === 'variable', (c) => this.buildVariableFormula(c))\n            .when((c) => ['eq', 'ne', 'gt', 'gte', 'lt', 'lte'].includes(c.kind), (c) => this.buildComparisonFormula(c))\n            .when((c) => ['and', 'or', 'not'].includes(c.kind), (c) => this.buildLogicalFormula(c))\n            .otherwise(() => {\n            throw new Error(`Unsupported constraint format: ${JSON.stringify(constraint)}`);\n        });\n    }\n    buildLogicalFormula(constraint) {\n        return (0, ts_pattern_1.match)(constraint.kind)\n            .with('and', () => this.buildAndFormula(constraint))\n            .with('or', () => this.buildOrFormula(constraint))\n            .with('not', () => this.buildNotFormula(constraint))\n            .exhaustive();\n    }\n    buildAndFormula(constraint) {\n        if (constraint.children.some((c) => this.isFalse(c))) {\n            // short-circuit\n            return logic_solver_1.default.FALSE;\n        }\n        return logic_solver_1.default.and(...constraint.children.map((c) => this.buildFormula(c)));\n    }\n    buildOrFormula(constraint) {\n        if (constraint.children.some((c) => this.isTrue(c))) {\n            // short-circuit\n            return logic_solver_1.default.TRUE;\n        }\n        return logic_solver_1.default.or(...constraint.children.map((c) => this.buildFormula(c)));\n    }\n    buildNotFormula(constraint) {\n        if (constraint.children.length !== 1) {\n            throw new Error('\"not\" constraint must have exactly one child');\n        }\n        return logic_solver_1.default.not(this.buildFormula(constraint.children[0]));\n    }\n    isTrue(constraint) {\n        return constraint.kind === 'value' && constraint.value === true;\n    }\n    isFalse(constraint) {\n        return constraint.kind === 'value' && constraint.value === false;\n    }\n    buildComparisonFormula(constraint) {\n        if (constraint.left.kind === 'value' && constraint.right.kind === 'value') {\n            // constant comparison\n            const left = constraint.left;\n            const right = constraint.right;\n            return (0, ts_pattern_1.match)(constraint.kind)\n                .with('eq', () => (left.value === right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .with('ne', () => (left.value !== right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .with('gt', () => (left.value > right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .with('gte', () => (left.value >= right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .with('lt', () => (left.value < right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .with('lte', () => (left.value <= right.value ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n                .exhaustive();\n        }\n        return (0, ts_pattern_1.match)(constraint.kind)\n            .with('eq', () => this.transformEquality(constraint.left, constraint.right))\n            .with('ne', () => this.transformInequality(constraint.left, constraint.right))\n            .with('gt', () => this.transformComparison(constraint.left, constraint.right, (l, r) => logic_solver_1.default.greaterThan(l, r)))\n            .with('gte', () => this.transformComparison(constraint.left, constraint.right, (l, r) => logic_solver_1.default.greaterThanOrEqual(l, r)))\n            .with('lt', () => this.transformComparison(constraint.left, constraint.right, (l, r) => logic_solver_1.default.lessThan(l, r)))\n            .with('lte', () => this.transformComparison(constraint.left, constraint.right, (l, r) => logic_solver_1.default.lessThanOrEqual(l, r)))\n            .exhaustive();\n    }\n    buildVariableFormula(constraint) {\n        return ((0, ts_pattern_1.match)(constraint.type)\n            .with('boolean', () => this.booleanVariable(constraint.name))\n            .with('number', () => this.intVariable(constraint.name))\n            // strings are internalized and represented by their indices\n            .with('string', () => this.intVariable(constraint.name))\n            .exhaustive());\n    }\n    buildValueFormula(constraint) {\n        return (0, ts_pattern_1.match)(constraint.value)\n            .when((v) => typeof v === 'boolean', (v) => (v === true ? logic_solver_1.default.TRUE : logic_solver_1.default.FALSE))\n            .when((v) => typeof v === 'number', (v) => logic_solver_1.default.constantBits(v))\n            .when((v) => typeof v === 'string', (v) => {\n            // internalize the string and use its index as formula representation\n            const index = this.stringTable.indexOf(v);\n            if (index === -1) {\n                this.stringTable.push(v);\n                return logic_solver_1.default.constantBits(this.stringTable.length - 1);\n            }\n            else {\n                return logic_solver_1.default.constantBits(index);\n            }\n        })\n            .exhaustive();\n    }\n    booleanVariable(name) {\n        this.variables.set(name, name);\n        return name;\n    }\n    intVariable(name) {\n        const r = logic_solver_1.default.variableBits(name, 32);\n        this.variables.set(name, r);\n        return r;\n    }\n    transformEquality(left, right) {\n        if (left.type !== right.type) {\n            throw new Error(`Type mismatch in equality constraint: ${JSON.stringify(left)}, ${JSON.stringify(right)}`);\n        }\n        const leftFormula = this.buildFormula(left);\n        const rightFormula = this.buildFormula(right);\n        if (left.type === 'boolean' && right.type === 'boolean') {\n            // logical equivalence\n            return logic_solver_1.default.equiv(leftFormula, rightFormula);\n        }\n        else {\n            // integer equality\n            return logic_solver_1.default.equalBits(leftFormula, rightFormula);\n        }\n    }\n    transformInequality(left, right) {\n        return logic_solver_1.default.not(this.transformEquality(left, right));\n    }\n    transformComparison(left, right, func) {\n        return func(this.buildFormula(left), this.buildFormula(right));\n    }\n}\nexports.ConstraintSolver = ConstraintSolver;\n//# sourceMappingURL=constraint-solver.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3BvbGljeS9jb25zdHJhaW50LXNvbHZlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdCQUF3QjtBQUN4Qix1Q0FBdUMsbUJBQU8sQ0FBQyw2R0FBYztBQUM3RCxxQkFBcUIsbUJBQU8sQ0FBQyxzR0FBWTtBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLEVBQUUsR0FBRyxzQkFBc0I7QUFDNUYsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsMkJBQTJCO0FBQ3pGLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxxQkFBcUIsSUFBSSxzQkFBc0I7QUFDcEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dC1qcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AemVuc3RhY2tocStydW50aW1lQDIuMi40X0BwcmlzbWErY2xpZW50QDUuMTcuMF9wcmlzbWFANS4xNy4wXy9ub2RlX21vZHVsZXMvQHplbnN0YWNraHEvcnVudGltZS9lbmhhbmNlbWVudHMvcG9saWN5L2NvbnN0cmFpbnQtc29sdmVyLmpzP2M2MTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNvbnN0cmFpbnRTb2x2ZXIgPSB2b2lkIDA7XG5jb25zdCBsb2dpY19zb2x2ZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibG9naWMtc29sdmVyXCIpKTtcbmNvbnN0IHRzX3BhdHRlcm5fMSA9IHJlcXVpcmUoXCJ0cy1wYXR0ZXJuXCIpO1xuLyoqXG4gKiBBIGJvb2xlYW4gY29uc3RyYWludCBzb2x2ZXIgYmFzZWQgb24gYGxvZ2ljLXNvbHZlcmAuIE9ubHkgYm9vbGVhbiBhbmQgaW50ZWdlciB0eXBlcyBhcmUgc3VwcG9ydGVkLlxuICovXG5jbGFzcyBDb25zdHJhaW50U29sdmVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgLy8gYSB0YWJsZSBmb3IgaW50ZXJuYWxpemluZyBzdHJpbmcgbGl0ZXJhbHNcbiAgICAgICAgdGhpcy5zdHJpbmdUYWJsZSA9IFtdO1xuICAgICAgICAvLyBhIG1hcCBmb3Igc3RvcmluZyB2YXJpYWJsZSBuYW1lcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBmb3JtdWxhc1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IG5ldyBNYXAoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2sgdGhlIHNhdGlzZmlhYmlsaXR5IG9mIHRoZSBnaXZlbiBjb25zdHJhaW50LlxuICAgICAqL1xuICAgIGNoZWNrU2F0KGNvbnN0cmFpbnQpIHtcbiAgICAgICAgLy8gcmVzZXQgc3RhdGVcbiAgICAgICAgdGhpcy5zdHJpbmdUYWJsZSA9IFtdO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgLy8gY29udmVydCB0aGUgY29uc3RyYWludCB0byBhIFwibG9naWMtc29sdmVyXCIgZm9ybXVsYVxuICAgICAgICBjb25zdCBmb3JtdWxhID0gdGhpcy5idWlsZEZvcm11bGEoY29uc3RyYWludCk7XG4gICAgICAgIC8vIHNvbHZlIHRoZSBmb3JtdWxhXG4gICAgICAgIGNvbnN0IHNvbHZlciA9IG5ldyBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LlNvbHZlcigpO1xuICAgICAgICBzb2x2ZXIucmVxdWlyZShmb3JtdWxhKTtcbiAgICAgICAgLy8gREVCVUc6XG4gICAgICAgIC8vIGNvbnN0IHNvbHV0aW9uID0gc29sdmVyLnNvbHZlKCk7XG4gICAgICAgIC8vIGlmIChzb2x1dGlvbikge1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ1NvbHV0aW9uOicpO1xuICAgICAgICAvLyAgICAgdGhpcy52YXJpYWJsZXMuZm9yRWFjaCgodiwgaykgPT4gY29uc29sZS5sb2coYFxcdCR7a309JHtzb2x1dGlvbj8uZXZhbHVhdGUodil9YCkpO1xuICAgICAgICAvLyB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgY29uc29sZS5sb2coJ05vIHNvbHV0aW9uJyk7XG4gICAgICAgIC8vIH1cbiAgICAgICAgcmV0dXJuICEhc29sdmVyLnNvbHZlKCk7XG4gICAgfVxuICAgIGJ1aWxkRm9ybXVsYShjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiAoMCwgdHNfcGF0dGVybl8xLm1hdGNoKShjb25zdHJhaW50KVxuICAgICAgICAgICAgLndoZW4oKGMpID0+IGMua2luZCA9PT0gJ3ZhbHVlJywgKGMpID0+IHRoaXMuYnVpbGRWYWx1ZUZvcm11bGEoYykpXG4gICAgICAgICAgICAud2hlbigoYykgPT4gYy5raW5kID09PSAndmFyaWFibGUnLCAoYykgPT4gdGhpcy5idWlsZFZhcmlhYmxlRm9ybXVsYShjKSlcbiAgICAgICAgICAgIC53aGVuKChjKSA9PiBbJ2VxJywgJ25lJywgJ2d0JywgJ2d0ZScsICdsdCcsICdsdGUnXS5pbmNsdWRlcyhjLmtpbmQpLCAoYykgPT4gdGhpcy5idWlsZENvbXBhcmlzb25Gb3JtdWxhKGMpKVxuICAgICAgICAgICAgLndoZW4oKGMpID0+IFsnYW5kJywgJ29yJywgJ25vdCddLmluY2x1ZGVzKGMua2luZCksIChjKSA9PiB0aGlzLmJ1aWxkTG9naWNhbEZvcm11bGEoYykpXG4gICAgICAgICAgICAub3RoZXJ3aXNlKCgpID0+IHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgY29uc3RyYWludCBmb3JtYXQ6ICR7SlNPTi5zdHJpbmdpZnkoY29uc3RyYWludCl9YCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBidWlsZExvZ2ljYWxGb3JtdWxhKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuICgwLCB0c19wYXR0ZXJuXzEubWF0Y2gpKGNvbnN0cmFpbnQua2luZClcbiAgICAgICAgICAgIC53aXRoKCdhbmQnLCAoKSA9PiB0aGlzLmJ1aWxkQW5kRm9ybXVsYShjb25zdHJhaW50KSlcbiAgICAgICAgICAgIC53aXRoKCdvcicsICgpID0+IHRoaXMuYnVpbGRPckZvcm11bGEoY29uc3RyYWludCkpXG4gICAgICAgICAgICAud2l0aCgnbm90JywgKCkgPT4gdGhpcy5idWlsZE5vdEZvcm11bGEoY29uc3RyYWludCkpXG4gICAgICAgICAgICAuZXhoYXVzdGl2ZSgpO1xuICAgIH1cbiAgICBidWlsZEFuZEZvcm11bGEoY29uc3RyYWludCkge1xuICAgICAgICBpZiAoY29uc3RyYWludC5jaGlsZHJlbi5zb21lKChjKSA9PiB0aGlzLmlzRmFsc2UoYykpKSB7XG4gICAgICAgICAgICAvLyBzaG9ydC1jaXJjdWl0XG4gICAgICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5GQUxTRTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5hbmQoLi4uY29uc3RyYWludC5jaGlsZHJlbi5tYXAoKGMpID0+IHRoaXMuYnVpbGRGb3JtdWxhKGMpKSk7XG4gICAgfVxuICAgIGJ1aWxkT3JGb3JtdWxhKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgaWYgKGNvbnN0cmFpbnQuY2hpbGRyZW4uc29tZSgoYykgPT4gdGhpcy5pc1RydWUoYykpKSB7XG4gICAgICAgICAgICAvLyBzaG9ydC1jaXJjdWl0XG4gICAgICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5UUlVFO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0Lm9yKC4uLmNvbnN0cmFpbnQuY2hpbGRyZW4ubWFwKChjKSA9PiB0aGlzLmJ1aWxkRm9ybXVsYShjKSkpO1xuICAgIH1cbiAgICBidWlsZE5vdEZvcm11bGEoY29uc3RyYWludCkge1xuICAgICAgICBpZiAoY29uc3RyYWludC5jaGlsZHJlbi5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignXCJub3RcIiBjb25zdHJhaW50IG11c3QgaGF2ZSBleGFjdGx5IG9uZSBjaGlsZCcpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0Lm5vdCh0aGlzLmJ1aWxkRm9ybXVsYShjb25zdHJhaW50LmNoaWxkcmVuWzBdKSk7XG4gICAgfVxuICAgIGlzVHJ1ZShjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiBjb25zdHJhaW50LmtpbmQgPT09ICd2YWx1ZScgJiYgY29uc3RyYWludC52YWx1ZSA9PT0gdHJ1ZTtcbiAgICB9XG4gICAgaXNGYWxzZShjb25zdHJhaW50KSB7XG4gICAgICAgIHJldHVybiBjb25zdHJhaW50LmtpbmQgPT09ICd2YWx1ZScgJiYgY29uc3RyYWludC52YWx1ZSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIGJ1aWxkQ29tcGFyaXNvbkZvcm11bGEoY29uc3RyYWludCkge1xuICAgICAgICBpZiAoY29uc3RyYWludC5sZWZ0LmtpbmQgPT09ICd2YWx1ZScgJiYgY29uc3RyYWludC5yaWdodC5raW5kID09PSAndmFsdWUnKSB7XG4gICAgICAgICAgICAvLyBjb25zdGFudCBjb21wYXJpc29uXG4gICAgICAgICAgICBjb25zdCBsZWZ0ID0gY29uc3RyYWludC5sZWZ0O1xuICAgICAgICAgICAgY29uc3QgcmlnaHQgPSBjb25zdHJhaW50LnJpZ2h0O1xuICAgICAgICAgICAgcmV0dXJuICgwLCB0c19wYXR0ZXJuXzEubWF0Y2gpKGNvbnN0cmFpbnQua2luZClcbiAgICAgICAgICAgICAgICAud2l0aCgnZXEnLCAoKSA9PiAobGVmdC52YWx1ZSA9PT0gcmlnaHQudmFsdWUgPyBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LlRSVUUgOiBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LkZBTFNFKSlcbiAgICAgICAgICAgICAgICAud2l0aCgnbmUnLCAoKSA9PiAobGVmdC52YWx1ZSAhPT0gcmlnaHQudmFsdWUgPyBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LlRSVUUgOiBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LkZBTFNFKSlcbiAgICAgICAgICAgICAgICAud2l0aCgnZ3QnLCAoKSA9PiAobGVmdC52YWx1ZSA+IHJpZ2h0LnZhbHVlID8gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5UUlVFIDogbG9naWNfc29sdmVyXzEuZGVmYXVsdC5GQUxTRSkpXG4gICAgICAgICAgICAgICAgLndpdGgoJ2d0ZScsICgpID0+IChsZWZ0LnZhbHVlID49IHJpZ2h0LnZhbHVlID8gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5UUlVFIDogbG9naWNfc29sdmVyXzEuZGVmYXVsdC5GQUxTRSkpXG4gICAgICAgICAgICAgICAgLndpdGgoJ2x0JywgKCkgPT4gKGxlZnQudmFsdWUgPCByaWdodC52YWx1ZSA/IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuVFJVRSA6IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuRkFMU0UpKVxuICAgICAgICAgICAgICAgIC53aXRoKCdsdGUnLCAoKSA9PiAobGVmdC52YWx1ZSA8PSByaWdodC52YWx1ZSA/IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuVFJVRSA6IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuRkFMU0UpKVxuICAgICAgICAgICAgICAgIC5leGhhdXN0aXZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgwLCB0c19wYXR0ZXJuXzEubWF0Y2gpKGNvbnN0cmFpbnQua2luZClcbiAgICAgICAgICAgIC53aXRoKCdlcScsICgpID0+IHRoaXMudHJhbnNmb3JtRXF1YWxpdHkoY29uc3RyYWludC5sZWZ0LCBjb25zdHJhaW50LnJpZ2h0KSlcbiAgICAgICAgICAgIC53aXRoKCduZScsICgpID0+IHRoaXMudHJhbnNmb3JtSW5lcXVhbGl0eShjb25zdHJhaW50LmxlZnQsIGNvbnN0cmFpbnQucmlnaHQpKVxuICAgICAgICAgICAgLndpdGgoJ2d0JywgKCkgPT4gdGhpcy50cmFuc2Zvcm1Db21wYXJpc29uKGNvbnN0cmFpbnQubGVmdCwgY29uc3RyYWludC5yaWdodCwgKGwsIHIpID0+IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuZ3JlYXRlclRoYW4obCwgcikpKVxuICAgICAgICAgICAgLndpdGgoJ2d0ZScsICgpID0+IHRoaXMudHJhbnNmb3JtQ29tcGFyaXNvbihjb25zdHJhaW50LmxlZnQsIGNvbnN0cmFpbnQucmlnaHQsIChsLCByKSA9PiBsb2dpY19zb2x2ZXJfMS5kZWZhdWx0LmdyZWF0ZXJUaGFuT3JFcXVhbChsLCByKSkpXG4gICAgICAgICAgICAud2l0aCgnbHQnLCAoKSA9PiB0aGlzLnRyYW5zZm9ybUNvbXBhcmlzb24oY29uc3RyYWludC5sZWZ0LCBjb25zdHJhaW50LnJpZ2h0LCAobCwgcikgPT4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5sZXNzVGhhbihsLCByKSkpXG4gICAgICAgICAgICAud2l0aCgnbHRlJywgKCkgPT4gdGhpcy50cmFuc2Zvcm1Db21wYXJpc29uKGNvbnN0cmFpbnQubGVmdCwgY29uc3RyYWludC5yaWdodCwgKGwsIHIpID0+IGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQubGVzc1RoYW5PckVxdWFsKGwsIHIpKSlcbiAgICAgICAgICAgIC5leGhhdXN0aXZlKCk7XG4gICAgfVxuICAgIGJ1aWxkVmFyaWFibGVGb3JtdWxhKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuICgoMCwgdHNfcGF0dGVybl8xLm1hdGNoKShjb25zdHJhaW50LnR5cGUpXG4gICAgICAgICAgICAud2l0aCgnYm9vbGVhbicsICgpID0+IHRoaXMuYm9vbGVhblZhcmlhYmxlKGNvbnN0cmFpbnQubmFtZSkpXG4gICAgICAgICAgICAud2l0aCgnbnVtYmVyJywgKCkgPT4gdGhpcy5pbnRWYXJpYWJsZShjb25zdHJhaW50Lm5hbWUpKVxuICAgICAgICAgICAgLy8gc3RyaW5ncyBhcmUgaW50ZXJuYWxpemVkIGFuZCByZXByZXNlbnRlZCBieSB0aGVpciBpbmRpY2VzXG4gICAgICAgICAgICAud2l0aCgnc3RyaW5nJywgKCkgPT4gdGhpcy5pbnRWYXJpYWJsZShjb25zdHJhaW50Lm5hbWUpKVxuICAgICAgICAgICAgLmV4aGF1c3RpdmUoKSk7XG4gICAgfVxuICAgIGJ1aWxkVmFsdWVGb3JtdWxhKGNvbnN0cmFpbnQpIHtcbiAgICAgICAgcmV0dXJuICgwLCB0c19wYXR0ZXJuXzEubWF0Y2gpKGNvbnN0cmFpbnQudmFsdWUpXG4gICAgICAgICAgICAud2hlbigodikgPT4gdHlwZW9mIHYgPT09ICdib29sZWFuJywgKHYpID0+ICh2ID09PSB0cnVlID8gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5UUlVFIDogbG9naWNfc29sdmVyXzEuZGVmYXVsdC5GQUxTRSkpXG4gICAgICAgICAgICAud2hlbigodikgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInLCAodikgPT4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5jb25zdGFudEJpdHModikpXG4gICAgICAgICAgICAud2hlbigodikgPT4gdHlwZW9mIHYgPT09ICdzdHJpbmcnLCAodikgPT4ge1xuICAgICAgICAgICAgLy8gaW50ZXJuYWxpemUgdGhlIHN0cmluZyBhbmQgdXNlIGl0cyBpbmRleCBhcyBmb3JtdWxhIHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuc3RyaW5nVGFibGUuaW5kZXhPZih2KTtcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmluZ1RhYmxlLnB1c2godik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuY29uc3RhbnRCaXRzKHRoaXMuc3RyaW5nVGFibGUubGVuZ3RoIC0gMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5jb25zdGFudEJpdHMoaW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgICAgICAgLmV4aGF1c3RpdmUoKTtcbiAgICB9XG4gICAgYm9vbGVhblZhcmlhYmxlKG5hbWUpIHtcbiAgICAgICAgdGhpcy52YXJpYWJsZXMuc2V0KG5hbWUsIG5hbWUpO1xuICAgICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gICAgaW50VmFyaWFibGUobmFtZSkge1xuICAgICAgICBjb25zdCByID0gbG9naWNfc29sdmVyXzEuZGVmYXVsdC52YXJpYWJsZUJpdHMobmFtZSwgMzIpO1xuICAgICAgICB0aGlzLnZhcmlhYmxlcy5zZXQobmFtZSwgcik7XG4gICAgICAgIHJldHVybiByO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1FcXVhbGl0eShsZWZ0LCByaWdodCkge1xuICAgICAgICBpZiAobGVmdC50eXBlICE9PSByaWdodC50eXBlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFR5cGUgbWlzbWF0Y2ggaW4gZXF1YWxpdHkgY29uc3RyYWludDogJHtKU09OLnN0cmluZ2lmeShsZWZ0KX0sICR7SlNPTi5zdHJpbmdpZnkocmlnaHQpfWApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGxlZnRGb3JtdWxhID0gdGhpcy5idWlsZEZvcm11bGEobGVmdCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0Rm9ybXVsYSA9IHRoaXMuYnVpbGRGb3JtdWxhKHJpZ2h0KTtcbiAgICAgICAgaWYgKGxlZnQudHlwZSA9PT0gJ2Jvb2xlYW4nICYmIHJpZ2h0LnR5cGUgPT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgLy8gbG9naWNhbCBlcXVpdmFsZW5jZVxuICAgICAgICAgICAgcmV0dXJuIGxvZ2ljX3NvbHZlcl8xLmRlZmF1bHQuZXF1aXYobGVmdEZvcm11bGEsIHJpZ2h0Rm9ybXVsYSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBpbnRlZ2VyIGVxdWFsaXR5XG4gICAgICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5lcXVhbEJpdHMobGVmdEZvcm11bGEsIHJpZ2h0Rm9ybXVsYSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdHJhbnNmb3JtSW5lcXVhbGl0eShsZWZ0LCByaWdodCkge1xuICAgICAgICByZXR1cm4gbG9naWNfc29sdmVyXzEuZGVmYXVsdC5ub3QodGhpcy50cmFuc2Zvcm1FcXVhbGl0eShsZWZ0LCByaWdodCkpO1xuICAgIH1cbiAgICB0cmFuc2Zvcm1Db21wYXJpc29uKGxlZnQsIHJpZ2h0LCBmdW5jKSB7XG4gICAgICAgIHJldHVybiBmdW5jKHRoaXMuYnVpbGRGb3JtdWxhKGxlZnQpLCB0aGlzLmJ1aWxkRm9ybXVsYShyaWdodCkpO1xuICAgIH1cbn1cbmV4cG9ydHMuQ29uc3RyYWludFNvbHZlciA9IENvbnN0cmFpbnRTb2x2ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdHJhaW50LXNvbHZlci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/constraint-solver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/handler.js":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/handler.js ***!
  \***********************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PolicyProxyHandler = void 0;\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js\"));\nconst lower_case_first_1 = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nconst tiny_invariant_1 = __importDefault(__webpack_require__(/*! tiny-invariant */ \"(rsc)/./node_modules/.pnpm/tiny-invariant@1.3.3/node_modules/tiny-invariant/dist/tiny-invariant.cjs.js\"));\nconst ts_pattern_1 = __webpack_require__(/*! ts-pattern */ \"(rsc)/./node_modules/.pnpm/ts-pattern@4.3.0/node_modules/ts-pattern/dist/index.cjs\");\nconst upper_case_first_1 = __webpack_require__(/*! upper-case-first */ \"(rsc)/./node_modules/.pnpm/upper-case-first@2.0.2/node_modules/upper-case-first/dist.es2015/index.js\");\nconst zod_validation_error_1 = __webpack_require__(/*! zod-validation-error */ \"(rsc)/./node_modules/.pnpm/zod-validation-error@1.5.0_zod@3.23.8/node_modules/zod-validation-error/dist/esm/index.js\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst cross_1 = __webpack_require__(/*! ../../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\");\nconst promise_1 = __webpack_require__(/*! ../promise */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/promise.js\");\nconst query_utils_1 = __webpack_require__(/*! ../query-utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\");\nconst constraint_solver_1 = __webpack_require__(/*! ./constraint-solver */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/constraint-solver.js\");\nconst policy_utils_1 = __webpack_require__(/*! ./policy-utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/policy-utils.js\");\n/**\n * Prisma proxy handler for injecting access policy check.\n */\nclass PolicyProxyHandler {\n    constructor(prisma, model, options, context) {\n        this.prisma = prisma;\n        this.options = options;\n        this.context = context;\n        this.logger = new logger_1.Logger(prisma);\n        this.model = (0, lower_case_first_1.lowerCaseFirst)(model);\n        ({ modelMeta: this.modelMeta, prismaModule: this.prismaModule } = options);\n        this.policyUtils = new policy_utils_1.PolicyUtil(prisma, options, context, this.shouldLogQuery);\n        this.queryUtils = new query_utils_1.QueryUtils(prisma, options);\n    }\n    get modelClient() {\n        return this.prisma[this.model];\n    }\n    //#region Find\n    // find operations behaves as if the entities that don't match access policies don't exist\n    findUnique(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.where) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'where field is required in query argument');\n        }\n        return this.findWithFluent('findUnique', args, () => null);\n    }\n    findUniqueOrThrow(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.where) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'where field is required in query argument');\n        }\n        return this.findWithFluent('findUniqueOrThrow', args, () => {\n            throw this.policyUtils.notFound(this.model);\n        });\n    }\n    findFirst(args) {\n        return this.findWithFluent('findFirst', args, () => null);\n    }\n    findFirstOrThrow(args) {\n        return this.findWithFluent('findFirstOrThrow', args, () => {\n            throw this.policyUtils.notFound(this.model);\n        });\n    }\n    findMany(args) {\n        return (0, promise_1.createDeferredPromise)(() => this.doFind(args, 'findMany', () => []));\n    }\n    // make a find query promise with fluent API call stubs installed\n    findWithFluent(method, args, handleRejection) {\n        args = (0, utils_1.clone)(args);\n        return (0, promise_1.createFluentPromise)(() => this.doFind(args, method, handleRejection), args, this.options.modelMeta, this.model);\n    }\n    doFind(args, actionName, handleRejection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const origArgs = args;\n            const _args = (0, utils_1.clone)(args);\n            if (!this.policyUtils.injectForRead(this.prisma, this.model, _args)) {\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`${actionName}\\` ${this.model}: unconditionally denied`);\n                }\n                return handleRejection();\n            }\n            this.policyUtils.injectReadCheckSelect(this.model, _args);\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`${actionName}\\` ${this.model}:\\n${(0, utils_1.formatObject)(_args)}`);\n            }\n            const result = yield this.modelClient[actionName](_args);\n            return this.policyUtils.postProcessForRead(result, this.model, origArgs);\n        });\n    }\n    //#endregion\n    //#region Create\n    create(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'data field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            this.policyUtils.tryReject(this.prisma, this.model, 'create');\n            const origArgs = args;\n            args = (0, utils_1.clone)(args);\n            // static input policy check for top-level create data\n            const inputCheck = this.policyUtils.checkInputGuard(this.model, args.data, 'create');\n            if (inputCheck === false) {\n                throw this.policyUtils.deniedByPolicy(this.model, 'create', undefined, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n            }\n            const hasNestedCreateOrConnect = yield this.hasNestedCreateOrConnect(args);\n            const { result, error } = yield this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                if (\n                // MUST check true here since inputCheck can be undefined (meaning static input check not possible)\n                inputCheck === true &&\n                    // simple create: no nested create/connect\n                    !hasNestedCreateOrConnect) {\n                    // there's no nested write and we've passed input check, proceed with the create directly\n                    // validate zod schema if any\n                    args.data = this.validateCreateInputSchema(this.model, args.data);\n                    // make a create args only containing data and ID selection\n                    const createArgs = { data: args.data, select: this.policyUtils.makeIdSelection(this.model) };\n                    if (this.shouldLogQuery) {\n                        this.logger.info(`[policy] \\`create\\` ${this.model}: ${(0, utils_1.formatObject)(createArgs)}`);\n                    }\n                    const result = yield tx[this.model].create(createArgs);\n                    // filter the read-back data\n                    return this.policyUtils.readBack(tx, this.model, 'create', args, result);\n                }\n                else {\n                    // proceed with a complex create and collect post-write checks\n                    const { result, postWriteChecks } = yield this.doCreate(this.model, args, tx);\n                    // execute post-write checks\n                    yield this.runPostWriteChecks(postWriteChecks, tx);\n                    // filter the read-back data\n                    return this.policyUtils.readBack(tx, this.model, 'create', origArgs, result);\n                }\n            }));\n            if (error) {\n                throw error;\n            }\n            else {\n                return result;\n            }\n        }));\n    }\n    // create with nested write\n    doCreate(model, args, db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // record id fields involved in the nesting context\n            const idSelections = [];\n            const pushIdFields = (model, context) => {\n                const idFields = (0, cross_1.getIdFields)(this.modelMeta, model);\n                idSelections.push({\n                    path: context.nestingPath.map((p) => p.field).filter((f) => !!f),\n                    ids: idFields.map((f) => f.name),\n                });\n            };\n            // create a string key that uniquely identifies an entity\n            const getEntityKey = (model, ids) => `${(0, upper_case_first_1.upperCaseFirst)(model)}#${Object.keys(ids)\n                .sort()\n                .map((f) => { var _a; return `${f}:${(_a = ids[f]) === null || _a === void 0 ? void 0 : _a.toString()}`; })\n                .join('_')}`;\n            // record keys of entities that are connected instead of created\n            const connectedEntities = new Set();\n            // visit the create payload\n            const visitor = new cross_1.NestedWriteVisitor(this.modelMeta, {\n                create: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    const validateResult = this.validateCreateInputSchema(model, args);\n                    if (validateResult !== args) {\n                        this.policyUtils.replace(args, validateResult);\n                    }\n                    pushIdFields(model, context);\n                }),\n                createMany: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    (0, cross_1.enumerate)(args.data).forEach((item) => {\n                        const r = this.validateCreateInputSchema(model, item);\n                        if (r !== item) {\n                            this.policyUtils.replace(item, r);\n                        }\n                    });\n                    pushIdFields(model, context);\n                }),\n                connectOrCreate: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    if (!args.where) {\n                        throw this.policyUtils.validationError(`'where' field is required for connectOrCreate`);\n                    }\n                    if (args.create) {\n                        args.create = this.validateCreateInputSchema(model, args.create);\n                    }\n                    const existing = yield this.policyUtils.checkExistence(db, model, args.where);\n                    if (existing) {\n                        // connect case\n                        if ((_a = context.field) === null || _a === void 0 ? void 0 : _a.backLink) {\n                            const backLinkField = (0, cross_1.resolveField)(this.modelMeta, model, context.field.backLink);\n                            if (backLinkField === null || backLinkField === void 0 ? void 0 : backLinkField.isRelationOwner) {\n                                // the target side of relation owns the relation,\n                                // check if it's updatable\n                                yield this.policyUtils.checkPolicyForUnique(model, args.where, 'update', db, args);\n                            }\n                        }\n                        this.mergeToParent(context.parent, 'connect', args.where);\n                        // record the key of connected entities so we can avoid validating them later\n                        connectedEntities.add(getEntityKey(model, existing));\n                    }\n                    else {\n                        // create case\n                        pushIdFields(model, context);\n                        // create a new \"create\" clause at the parent level\n                        this.mergeToParent(context.parent, 'create', args.create);\n                    }\n                    // remove the connectOrCreate clause\n                    this.removeFromParent(context.parent, 'connectOrCreate', args);\n                    // return false to prevent visiting the nested payload\n                    return false;\n                }),\n                connect: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    var _b;\n                    if (!args || typeof args !== 'object' || Object.keys(args).length === 0) {\n                        throw this.policyUtils.validationError(`'connect' field must be an non-empty object`);\n                    }\n                    if ((_b = context.field) === null || _b === void 0 ? void 0 : _b.backLink) {\n                        const backLinkField = (0, cross_1.resolveField)(this.modelMeta, model, context.field.backLink);\n                        if (backLinkField === null || backLinkField === void 0 ? void 0 : backLinkField.isRelationOwner) {\n                            // check existence\n                            yield this.policyUtils.checkExistence(db, model, args, true);\n                            // the target side of relation owns the relation,\n                            // check if it's updatable\n                            yield this.policyUtils.checkPolicyForUnique(model, args, 'update', db, args);\n                        }\n                    }\n                }),\n            });\n            yield visitor.visit(model, 'create', args);\n            // build the final \"select\" clause including all nested ID fields\n            let select = undefined;\n            if (idSelections.length > 0) {\n                select = {};\n                idSelections.forEach(({ path, ids }) => {\n                    let curr = select;\n                    for (const p of path) {\n                        if (!curr[p.name]) {\n                            curr[p.name] = { select: {} };\n                        }\n                        curr = curr[p.name].select;\n                    }\n                    Object.assign(curr, ...ids.map((f) => ({ [f]: true })));\n                });\n            }\n            // proceed with the create\n            const createArgs = { data: args.data, select };\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`create\\` ${model}: ${(0, utils_1.formatObject)(createArgs)}`);\n            }\n            const result = yield db[model].create(createArgs);\n            // post create policy check for the top-level and nested creates\n            const postCreateChecks = new Map();\n            // visit the create result and collect entities that need to be post-checked\n            const modelDataVisitor = new cross_1.ModelDataVisitor(this.modelMeta);\n            modelDataVisitor.visit(model, result, (model, _data, scalarData) => {\n                const key = getEntityKey(model, scalarData);\n                // only check if entity is created, not connected\n                if (!connectedEntities.has(key) && !postCreateChecks.has(key)) {\n                    const idFields = this.policyUtils.getIdFieldValues(model, scalarData);\n                    postCreateChecks.set(key, { model, operation: 'create', uniqueFilter: idFields });\n                }\n            });\n            // return only the ids of the top-level entity\n            const ids = this.policyUtils.getEntityIds(model, result);\n            return { result: ids, postWriteChecks: [...postCreateChecks.values()] };\n        });\n    }\n    // Checks if the given create payload has nested create or connect\n    hasNestedCreateOrConnect(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let hasNestedCreateOrConnect = false;\n            const visitor = new cross_1.NestedWriteVisitor(this.modelMeta, {\n                create(_model, _args, context) {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        if (context.field) {\n                            hasNestedCreateOrConnect = true;\n                            return false;\n                        }\n                        else {\n                            return true;\n                        }\n                    });\n                },\n                connect() {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        hasNestedCreateOrConnect = true;\n                        return false;\n                    });\n                },\n                connectOrCreate() {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        hasNestedCreateOrConnect = true;\n                        return false;\n                    });\n                },\n                createMany() {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        hasNestedCreateOrConnect = true;\n                        return false;\n                    });\n                },\n            });\n            yield visitor.visit(this.model, 'create', args);\n            return hasNestedCreateOrConnect;\n        });\n    }\n    // Validates the given create payload against Zod schema if any\n    validateCreateInputSchema(model, data) {\n        const schema = this.policyUtils.getZodSchema(model, 'create');\n        if (schema && data) {\n            const parseResult = schema.safeParse(data);\n            if (!parseResult.success) {\n                throw this.policyUtils.deniedByPolicy(model, 'create', `input failed validation: ${(0, zod_validation_error_1.fromZodError)(parseResult.error)}`, constants_1.CrudFailureReason.DATA_VALIDATION_VIOLATION, parseResult.error);\n            }\n            return parseResult.data;\n        }\n        else {\n            return data;\n        }\n    }\n    createMany(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'data field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            this.policyUtils.tryReject(this.prisma, this.model, 'create');\n            args = (0, utils_1.clone)(args);\n            // go through create items, statically check input to determine if post-create\n            // check is needed, and also validate zod schema\n            const needPostCreateCheck = this.validateCreateInput(args);\n            if (!needPostCreateCheck) {\n                // direct create\n                return this.modelClient.createMany(args);\n            }\n            else {\n                // create entities in a transaction with post-create checks\n                return this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                    const { result, postWriteChecks } = yield this.doCreateMany(this.model, args, tx);\n                    // post-create check\n                    yield this.runPostWriteChecks(postWriteChecks, tx);\n                    return { count: result.length };\n                }));\n            }\n        }));\n    }\n    createManyAndReturn(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'data field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            this.policyUtils.tryReject(this.prisma, this.model, 'create');\n            const origArgs = args;\n            args = (0, utils_1.clone)(args);\n            // go through create items, statically check input to determine if post-create\n            // check is needed, and also validate zod schema\n            const needPostCreateCheck = this.validateCreateInput(args);\n            let result;\n            if (!needPostCreateCheck) {\n                // direct create\n                const created = yield this.modelClient.createManyAndReturn(args);\n                // process read-back\n                result = yield Promise.all(created.map((item) => this.policyUtils.readBack(this.prisma, this.model, 'create', origArgs, item)));\n            }\n            else {\n                // create entities in a transaction with post-create checks\n                result = yield this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                    const { result: created, postWriteChecks } = yield this.doCreateMany(this.model, args, tx);\n                    // post-create check\n                    yield this.runPostWriteChecks(postWriteChecks, tx);\n                    // process read-back\n                    return Promise.all(created.map((item) => this.policyUtils.readBack(tx, this.model, 'create', origArgs, item)));\n                }));\n            }\n            // throw read-back error if any of create result read-back fails\n            const error = (_a = result.find((r) => !!r.error)) === null || _a === void 0 ? void 0 : _a.error;\n            if (error) {\n                throw error;\n            }\n            else {\n                return result.map((r) => r.result);\n            }\n        }));\n    }\n    validateCreateInput(args) {\n        let needPostCreateCheck = false;\n        for (const item of (0, cross_1.enumerate)(args.data)) {\n            const validationResult = this.validateCreateInputSchema(this.model, item);\n            if (validationResult !== item) {\n                this.policyUtils.replace(item, validationResult);\n            }\n            const inputCheck = this.policyUtils.checkInputGuard(this.model, item, 'create');\n            if (inputCheck === false) {\n                // unconditionally deny\n                throw this.policyUtils.deniedByPolicy(this.model, 'create', undefined, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n            }\n            else if (inputCheck === true) {\n                // unconditionally allow\n            }\n            else if (inputCheck === undefined) {\n                // static policy check is not possible, need to do post-create check\n                needPostCreateCheck = true;\n            }\n        }\n        return needPostCreateCheck;\n    }\n    doCreateMany(model, args, db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // We can't call the native \"createMany\" because we can't get back what was created\n            // for post-create checks. Instead, do a \"create\" for each item and collect the results.\n            let createResult = yield Promise.all((0, cross_1.enumerate)(args.data).map((item) => __awaiter(this, void 0, void 0, function* () {\n                if (args.skipDuplicates) {\n                    if (yield this.hasDuplicatedUniqueConstraint(model, item, undefined, db)) {\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] \\`createMany\\` skipping duplicate ${(0, utils_1.formatObject)(item)}`);\n                        }\n                        return undefined;\n                    }\n                }\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`create\\` for \\`createMany\\` ${model}: ${(0, utils_1.formatObject)(item)}`);\n                }\n                return yield db[model].create({ select: this.policyUtils.makeIdSelection(model), data: item });\n            })));\n            // filter undefined values due to skipDuplicates\n            createResult = createResult.filter((p) => !!p);\n            return {\n                result: createResult,\n                postWriteChecks: createResult.map((item) => ({\n                    model,\n                    operation: 'create',\n                    uniqueFilter: item,\n                })),\n            };\n        });\n    }\n    hasDuplicatedUniqueConstraint(model, createData, upstreamQuery, db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // check unique constraint conflicts\n            // we can't rely on try/catch/ignore constraint violation error: https://github.com/prisma/prisma/issues/20496\n            // TODO: for simple cases we should be able to translate it to an `upsert` with empty `update` payload\n            var _a;\n            // for each unique constraint, check if the input item has all fields set, and if so, check if\n            // an entity already exists, and ignore accordingly\n            const uniqueConstraints = this.policyUtils.getUniqueConstraints(model);\n            for (const constraint of Object.values(uniqueConstraints)) {\n                // the unique filter used to check existence\n                const uniqueFilter = {};\n                // unique constraint fields not covered yet\n                const remainingConstraintFields = new Set(constraint.fields);\n                // collect constraint fields from the create data\n                for (const [k, v] of Object.entries(createData)) {\n                    if (v === undefined) {\n                        continue;\n                    }\n                    if (remainingConstraintFields.has(k)) {\n                        uniqueFilter[k] = v;\n                        remainingConstraintFields.delete(k);\n                    }\n                }\n                // collect constraint fields from the upstream query\n                if (upstreamQuery) {\n                    for (const [k, v] of Object.entries(upstreamQuery)) {\n                        if (v === undefined) {\n                            continue;\n                        }\n                        if (remainingConstraintFields.has(k)) {\n                            uniqueFilter[k] = v;\n                            remainingConstraintFields.delete(k);\n                            continue;\n                        }\n                        // check if the upstream query contains a relation field which covers\n                        // a foreign key field constraint\n                        const fieldInfo = (0, cross_1.requireField)(this.modelMeta, model, k);\n                        if (!fieldInfo.isDataModel) {\n                            // only care about relation fields\n                            continue;\n                        }\n                        // merge the upstream query into the unique filter\n                        uniqueFilter[k] = v;\n                        // mark the corresponding foreign key fields as covered\n                        const fkMapping = (_a = fieldInfo.foreignKeyMapping) !== null && _a !== void 0 ? _a : {};\n                        for (const fk of Object.values(fkMapping)) {\n                            remainingConstraintFields.delete(fk);\n                        }\n                    }\n                }\n                if (remainingConstraintFields.size === 0) {\n                    // all constraint fields set, check existence\n                    const existing = yield this.policyUtils.checkExistence(db, model, uniqueFilter);\n                    if (existing) {\n                        return true;\n                    }\n                }\n            }\n            return false;\n        });\n    }\n    //#endregion\n    //#region Update & Upsert\n    // \"update\" and \"upsert\" work against unique entity, so we actively rejects the request if the\n    // entity fails policy check\n    //\n    // \"updateMany\" works against a set of entities, entities not passing policy check are silently\n    // ignored\n    update(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.where) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'where field is required in query argument');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'data field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            args = (0, utils_1.clone)(args);\n            const { result, error } = yield this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                // proceed with nested writes and collect post-write checks\n                const { result, postWriteChecks } = yield this.doUpdate(args, tx);\n                // post-write check\n                yield this.runPostWriteChecks(postWriteChecks, tx);\n                // filter the read-back data\n                return this.policyUtils.readBack(tx, this.model, 'update', args, result);\n            }));\n            if (error) {\n                throw error;\n            }\n            else {\n                return result;\n            }\n        }));\n    }\n    doUpdate(args, db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // collected post-update checks\n            const postWriteChecks = [];\n            // registers a post-update check task\n            const _registerPostUpdateCheck = (model, preUpdateLookupFilter, postUpdateLookupFilter) => __awaiter(this, void 0, void 0, function* () {\n                // both \"post-update\" rules and Zod schemas require a post-update check\n                if (this.policyUtils.hasAuthGuard(model, 'postUpdate') || this.policyUtils.getZodSchema(model)) {\n                    // select pre-update field values\n                    let preValue;\n                    const preValueSelect = this.policyUtils.getPreValueSelect(model);\n                    if (preValueSelect && Object.keys(preValueSelect).length > 0) {\n                        preValue = yield db[model].findFirst({ where: preUpdateLookupFilter, select: preValueSelect });\n                    }\n                    postWriteChecks.push({\n                        model,\n                        operation: 'postUpdate',\n                        uniqueFilter: postUpdateLookupFilter,\n                        preValue,\n                    });\n                }\n            });\n            // We can't let the native \"update\" to handle nested \"create\" because we can't get back what\n            // was created for doing post-update checks.\n            // Instead, handle nested create inside update as an atomic operation that creates an entire\n            // subtree (containing nested creates/connects)\n            const _create = (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                var _a;\n                let createData = args;\n                if ((_a = context.field) === null || _a === void 0 ? void 0 : _a.backLink) {\n                    // Check if the create payload contains any \"unsafe\" assignment:\n                    // assign id or foreign key fields.\n                    //\n                    // The reason why we need to do that is Prisma's mutations payload\n                    // structure has two mutually exclusive forms for safe and unsafe\n                    // operations. E.g.:\n                    //     - safe: { data: { user: { connect: { id: 1 }} } }\n                    //     - unsafe: { data: { userId: 1 } }\n                    const unsafe = (0, utils_1.isUnsafeMutate)(model, args, this.modelMeta);\n                    // handles the connection to upstream entity\n                    const reversedQuery = this.policyUtils.buildReversedQuery(context, true, unsafe);\n                    if ((!unsafe || context.field.isRelationOwner) && reversedQuery[context.field.backLink]) {\n                        // if mutation is safe, or current field owns the relation (so the other side has no fk),\n                        // and the reverse query contains the back link, then we can build a \"connect\" with it\n                        createData = Object.assign(Object.assign({}, createData), { [context.field.backLink]: {\n                                connect: reversedQuery[context.field.backLink],\n                            } });\n                    }\n                    else {\n                        // otherwise, the reverse query should be translated to foreign key setting\n                        // and merged to the create data\n                        const backLinkField = this.requireBackLink(context.field);\n                        (0, tiny_invariant_1.default)(backLinkField.foreignKeyMapping);\n                        // try to extract foreign key values from the reverse query\n                        let fkValues = Object.values(backLinkField.foreignKeyMapping).reduce((obj, fk) => {\n                            obj[fk] = reversedQuery[fk];\n                            return obj;\n                        }, {});\n                        if (Object.values(fkValues).every((v) => v !== undefined)) {\n                            // all foreign key values are available, merge them to the create data\n                            createData = Object.assign(Object.assign({}, createData), fkValues);\n                        }\n                        else {\n                            // some foreign key values are missing, need to look up the upstream entity,\n                            // this can happen when the upstream entity doesn't have a unique where clause,\n                            // for example when it's nested inside a one-to-one update\n                            const upstreamQuery = {\n                                where: reversedQuery[backLinkField.name],\n                                select: this.policyUtils.makeIdSelection(backLinkField.type),\n                            };\n                            // fetch the upstream entity\n                            if (this.shouldLogQuery) {\n                                this.logger.info(`[policy] \\`findUniqueOrThrow\\` ${model}: looking up upstream entity of ${backLinkField.type}, ${(0, utils_1.formatObject)(upstreamQuery)}`);\n                            }\n                            const upstreamEntity = yield this.prisma[backLinkField.type].findUniqueOrThrow(upstreamQuery);\n                            // map ids to foreign keys\n                            fkValues = Object.entries(backLinkField.foreignKeyMapping).reduce((obj, [id, fk]) => {\n                                obj[fk] = upstreamEntity[id];\n                                return obj;\n                            }, {});\n                            // merge them to the create data\n                            createData = Object.assign(Object.assign({}, createData), fkValues);\n                        }\n                    }\n                }\n                // proceed with the create and collect post-create checks\n                const { postWriteChecks: checks, result } = yield this.doCreate(model, { data: createData }, db);\n                postWriteChecks.push(...checks);\n                return result;\n            });\n            const _createMany = (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                for (const item of (0, cross_1.enumerate)(args.data)) {\n                    if (args.skipDuplicates) {\n                        // get a reversed query to include fields inherited from upstream mutation,\n                        // it'll be merged with the create payload for unique constraint checking\n                        const upstreamQuery = this.policyUtils.buildReversedQuery(context);\n                        if (yield this.hasDuplicatedUniqueConstraint(model, item, upstreamQuery, db)) {\n                            if (this.shouldLogQuery) {\n                                this.logger.info(`[policy] \\`createMany\\` skipping duplicate ${(0, utils_1.formatObject)(item)}`);\n                            }\n                            continue;\n                        }\n                    }\n                    yield _create(model, item, context);\n                }\n            });\n            const _connectDisconnect = (model, args, context, operation) => __awaiter(this, void 0, void 0, function* () {\n                var _b;\n                if ((_b = context.field) === null || _b === void 0 ? void 0 : _b.backLink) {\n                    const backLinkField = this.policyUtils.getModelField(model, context.field.backLink);\n                    if (backLinkField === null || backLinkField === void 0 ? void 0 : backLinkField.isRelationOwner) {\n                        let uniqueFilter = args;\n                        if (operation === 'disconnect') {\n                            // disconnect filter is not unique, need to build a reversed query to\n                            // locate the entity and use its id fields as unique filter\n                            const reversedQuery = this.policyUtils.buildReversedQuery(context);\n                            const found = yield db[model].findUnique({\n                                where: reversedQuery,\n                                select: this.policyUtils.makeIdSelection(model),\n                            });\n                            uniqueFilter = found && this.policyUtils.getIdFieldValues(model, found);\n                        }\n                        // update happens on the related model, require updatable,\n                        // translate args to foreign keys so field-level policies can be checked\n                        const checkArgs = {};\n                        if (args && typeof args === 'object' && backLinkField.foreignKeyMapping) {\n                            for (const key of Object.keys(args)) {\n                                const fk = backLinkField.foreignKeyMapping[key];\n                                if (fk) {\n                                    checkArgs[fk] = args[key];\n                                }\n                            }\n                        }\n                        // `uniqueFilter` can be undefined if the entity to be disconnected doesn't exist\n                        if (uniqueFilter) {\n                            // check for update\n                            yield this.policyUtils.checkPolicyForUnique(model, uniqueFilter, 'update', db, checkArgs);\n                            // register post-update check\n                            yield _registerPostUpdateCheck(model, uniqueFilter, uniqueFilter);\n                        }\n                    }\n                }\n            });\n            // visit nested writes\n            const visitor = new cross_1.NestedWriteVisitor(this.modelMeta, {\n                update: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    var _c;\n                    // build a unique query including upstream conditions\n                    const uniqueFilter = this.policyUtils.buildReversedQuery(context);\n                    // handle not-found\n                    const existing = yield this.policyUtils.checkExistence(db, model, uniqueFilter, true);\n                    // check if the update actually writes to this model\n                    let thisModelUpdate = false;\n                    const updatePayload = (_c = args.data) !== null && _c !== void 0 ? _c : args;\n                    const validatedPayload = this.validateUpdateInputSchema(model, updatePayload);\n                    if (validatedPayload !== updatePayload) {\n                        this.policyUtils.replace(updatePayload, validatedPayload);\n                    }\n                    if (updatePayload) {\n                        for (const key of Object.keys(updatePayload)) {\n                            const field = (0, cross_1.resolveField)(this.modelMeta, model, key);\n                            if (field) {\n                                if (!field.isDataModel) {\n                                    // scalar field, require this model to be updatable\n                                    thisModelUpdate = true;\n                                    break;\n                                }\n                                else if (field.isRelationOwner) {\n                                    // relation is being updated and this model owns foreign key, require updatable\n                                    thisModelUpdate = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (thisModelUpdate) {\n                        this.policyUtils.tryReject(db, this.model, 'update');\n                        // check pre-update guard\n                        yield this.policyUtils.checkPolicyForUnique(model, uniqueFilter, 'update', db, args);\n                        // handle the case where id fields are updated\n                        const _args = args;\n                        const updatePayload = _args.data && typeof _args.data === 'object' ? _args.data : _args;\n                        const postUpdateIds = this.calculatePostUpdateIds(model, existing, updatePayload);\n                        // register post-update check\n                        yield _registerPostUpdateCheck(model, existing, postUpdateIds);\n                    }\n                }),\n                updateMany: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // prepare for post-update check\n                    if (this.policyUtils.hasAuthGuard(model, 'postUpdate') || this.policyUtils.getZodSchema(model)) {\n                        let select = this.policyUtils.makeIdSelection(model);\n                        const preValueSelect = this.policyUtils.getPreValueSelect(model);\n                        if (preValueSelect) {\n                            select = Object.assign(Object.assign({}, select), preValueSelect);\n                        }\n                        const reversedQuery = this.policyUtils.buildReversedQuery(context);\n                        const currentSetQuery = { select, where: reversedQuery };\n                        this.policyUtils.injectAuthGuardAsWhere(db, currentSetQuery, model, 'read');\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] \\`findMany\\` for post update check ${model}:\\n${(0, utils_1.formatObject)(currentSetQuery)}`);\n                        }\n                        const currentSet = yield db[model].findMany(currentSetQuery);\n                        postWriteChecks.push(...currentSet.map((preValue) => ({\n                            model,\n                            operation: 'postUpdate',\n                            uniqueFilter: preValue,\n                            preValue: preValueSelect ? preValue : undefined,\n                        })));\n                    }\n                    args.data = this.validateUpdateInputSchema(model, args.data);\n                    const updateGuard = this.policyUtils.getAuthGuard(db, model, 'update');\n                    if (this.policyUtils.isTrue(updateGuard) || this.policyUtils.isFalse(updateGuard)) {\n                        // injects simple auth guard into where clause\n                        this.policyUtils.injectAuthGuardAsWhere(db, args, model, 'update');\n                    }\n                    else {\n                        // we have to process `updateMany` separately because the guard may contain\n                        // filters using relation fields which are not allowed in nested `updateMany`\n                        const reversedQuery = this.policyUtils.buildReversedQuery(context);\n                        const updateWhere = this.policyUtils.and(reversedQuery, updateGuard);\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] \\`updateMany\\` ${model}:\\n${(0, utils_1.formatObject)({\n                                where: updateWhere,\n                                data: args.data,\n                            })}`);\n                        }\n                        yield db[model].updateMany({ where: updateWhere, data: args.data });\n                        delete context.parent.updateMany;\n                    }\n                }),\n                create: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // process the entire create subtree separately\n                    yield _create(model, args, context);\n                    // remove it from the update payload\n                    this.removeFromParent(context.parent, 'create', args);\n                    // don't visit payload\n                    return false;\n                }),\n                createMany: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // process createMany separately\n                    yield _createMany(model, args, context);\n                    // remove it from the update payload\n                    delete context.parent.createMany;\n                    // don't visit payload\n                    return false;\n                }),\n                upsert: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // build a unique query including upstream conditions\n                    const uniqueFilter = this.policyUtils.buildReversedQuery(context);\n                    // branch based on if the update target exists\n                    const existing = yield this.policyUtils.checkExistence(db, model, uniqueFilter);\n                    if (existing) {\n                        // update case\n                        // check pre-update guard\n                        yield this.policyUtils.checkPolicyForUnique(model, existing, 'update', db, args);\n                        // handle the case where id fields are updated\n                        const postUpdateIds = this.calculatePostUpdateIds(model, existing, args.update);\n                        // register post-update check\n                        yield _registerPostUpdateCheck(model, existing, postUpdateIds);\n                        // convert upsert to update\n                        const convertedUpdate = {\n                            where: args.where,\n                            data: this.validateUpdateInputSchema(model, args.update),\n                        };\n                        this.mergeToParent(context.parent, 'update', convertedUpdate);\n                        this.removeFromParent(context.parent, 'upsert', args);\n                        // continue visiting the new payload\n                        return convertedUpdate;\n                    }\n                    else {\n                        // create case\n                        // process the entire create subtree separately\n                        yield _create(model, args.create, context);\n                        // remove it from the update payload\n                        this.removeFromParent(context.parent, 'upsert', args);\n                        // don't visit payload\n                        return false;\n                    }\n                }),\n                connect: (model, args, context) => __awaiter(this, void 0, void 0, function* () { return _connectDisconnect(model, args, context, 'connect'); }),\n                connectOrCreate: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // the where condition is already unique, so we can use it to check if the target exists\n                    const existing = yield this.policyUtils.checkExistence(db, model, args.where);\n                    if (existing) {\n                        // connect\n                        yield _connectDisconnect(model, args.where, context, 'connect');\n                        return true;\n                    }\n                    else {\n                        // create\n                        const created = yield _create(model, args.create, context);\n                        const upperContext = context.nestingPath[context.nestingPath.length - 2];\n                        if ((upperContext === null || upperContext === void 0 ? void 0 : upperContext.where) && context.field) {\n                            // check if the where clause of the upper context references the id\n                            // of the connected entity, if so, we need to update it\n                            this.overrideForeignKeyFields(upperContext.model, upperContext.where, context.field, created);\n                        }\n                        // remove the payload from the parent\n                        this.removeFromParent(context.parent, 'connectOrCreate', args);\n                        return false;\n                    }\n                }),\n                disconnect: (model, args, context) => __awaiter(this, void 0, void 0, function* () { return _connectDisconnect(model, args, context, 'disconnect'); }),\n                set: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // find the set of items to be replaced\n                    const reversedQuery = this.policyUtils.buildReversedQuery(context);\n                    const findCurrSetArgs = {\n                        select: this.policyUtils.makeIdSelection(model),\n                        where: reversedQuery,\n                    };\n                    if (this.shouldLogQuery) {\n                        this.logger.info(`[policy] \\`findMany\\` ${model}:\\n${(0, utils_1.formatObject)(findCurrSetArgs)}`);\n                    }\n                    const currentSet = yield db[model].findMany(findCurrSetArgs);\n                    // register current set for update (foreign key)\n                    yield Promise.all(currentSet.map((item) => _connectDisconnect(model, item, context, 'disconnect')));\n                    // proceed with connecting the new set\n                    yield Promise.all((0, cross_1.enumerate)(args).map((item) => _connectDisconnect(model, item, context, 'connect')));\n                }),\n                delete: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    // build a unique query including upstream conditions\n                    const uniqueFilter = this.policyUtils.buildReversedQuery(context);\n                    // handle not-found\n                    yield this.policyUtils.checkExistence(db, model, uniqueFilter, true);\n                    // check delete guard\n                    yield this.policyUtils.checkPolicyForUnique(model, uniqueFilter, 'delete', db, args);\n                }),\n                deleteMany: (model, args, context) => __awaiter(this, void 0, void 0, function* () {\n                    const guard = yield this.policyUtils.getAuthGuard(db, model, 'delete');\n                    if (this.policyUtils.isTrue(guard) || this.policyUtils.isFalse(guard)) {\n                        // inject simple auth guard\n                        context.parent.deleteMany = this.policyUtils.and(args, guard);\n                    }\n                    else {\n                        // we have to process `deleteMany` separately because the guard may contain\n                        // filters using relation fields which are not allowed in nested `deleteMany`\n                        const reversedQuery = this.policyUtils.buildReversedQuery(context);\n                        const deleteWhere = this.policyUtils.and(reversedQuery, guard);\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] \\`deleteMany\\` ${model}:\\n${(0, utils_1.formatObject)({ where: deleteWhere })}`);\n                        }\n                        yield db[model].deleteMany({ where: deleteWhere });\n                        delete context.parent.deleteMany;\n                    }\n                }),\n            });\n            yield visitor.visit(this.model, 'update', args);\n            // finally proceed with the update\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`update\\` ${this.model}: ${(0, utils_1.formatObject)(args)}`);\n            }\n            const result = yield db[this.model].update({\n                where: args.where,\n                data: args.data,\n                select: this.policyUtils.makeIdSelection(this.model),\n            });\n            return { result, postWriteChecks };\n        });\n    }\n    // calculate id fields used for post-update check given an update payload\n    calculatePostUpdateIds(_model, currentIds, updatePayload) {\n        const result = (0, utils_1.clone)(currentIds);\n        for (const key of Object.keys(currentIds)) {\n            const updateValue = updatePayload[key];\n            if (typeof updateValue === 'string' || typeof updateValue === 'number' || typeof updateValue === 'bigint') {\n                result[key] = updateValue;\n            }\n        }\n        return result;\n    }\n    // updates foreign key fields inside `payload` based on relation id fields in `newIds`\n    overrideForeignKeyFields(model, payload, relation, newIds) {\n        if (!relation.foreignKeyMapping || Object.keys(relation.foreignKeyMapping).length === 0) {\n            return;\n        }\n        // override foreign key values\n        for (const [id, fk] of Object.entries(relation.foreignKeyMapping)) {\n            if (payload[fk] !== undefined && newIds[id] !== undefined) {\n                payload[fk] = newIds[id];\n            }\n        }\n        // deal with compound id fields\n        const uniqueConstraints = this.policyUtils.getUniqueConstraints(model);\n        for (const [name, constraint] of Object.entries(uniqueConstraints)) {\n            if (constraint.fields.length > 1) {\n                const target = payload[name];\n                if (target) {\n                    for (const [id, fk] of Object.entries(relation.foreignKeyMapping)) {\n                        if (target[fk] !== undefined && newIds[id] !== undefined) {\n                            target[fk] = newIds[id];\n                        }\n                    }\n                }\n            }\n        }\n    }\n    // Validates the given update payload against Zod schema if any\n    validateUpdateInputSchema(model, data) {\n        const schema = this.policyUtils.getZodSchema(model, 'update');\n        if (schema && data) {\n            // update payload can contain non-literal fields, like:\n            //   { x: { increment: 1 } }\n            // we should only validate literal fields\n            const literalData = Object.entries(data).reduce((acc, [k, v]) => (Object.assign(Object.assign({}, acc), (typeof v !== 'object' ? { [k]: v } : {}))), {});\n            const parseResult = schema.safeParse(literalData);\n            if (!parseResult.success) {\n                throw this.policyUtils.deniedByPolicy(model, 'update', `input failed validation: ${(0, zod_validation_error_1.fromZodError)(parseResult.error)}`, constants_1.CrudFailureReason.DATA_VALIDATION_VIOLATION, parseResult.error);\n            }\n            // schema may have transformed field values, use it to overwrite the original data\n            return Object.assign(Object.assign({}, data), parseResult.data);\n        }\n        else {\n            return data;\n        }\n    }\n    updateMany(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.data) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'data field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => {\n            this.policyUtils.tryReject(this.prisma, this.model, 'update');\n            args = (0, utils_1.clone)(args);\n            this.policyUtils.injectAuthGuardAsWhere(this.prisma, args, this.model, 'update');\n            args.data = this.validateUpdateInputSchema(this.model, args.data);\n            const entityChecker = this.policyUtils.getEntityChecker(this.model, 'update');\n            const canProceedWithoutTransaction = \n            // no post-update rules\n            !this.policyUtils.hasAuthGuard(this.model, 'postUpdate') &&\n                // no Zod schema\n                !this.policyUtils.getZodSchema(this.model) &&\n                // no entity checker\n                !entityChecker;\n            if (canProceedWithoutTransaction) {\n                // proceed without a transaction\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`updateMany\\` ${this.model}: ${(0, utils_1.formatObject)(args)}`);\n                }\n                return this.modelClient.updateMany(args);\n            }\n            // collect post-update checks\n            const postWriteChecks = [];\n            return this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                // collect pre-update values\n                let select = this.policyUtils.makeIdSelection(this.model);\n                const preValueSelect = this.policyUtils.getPreValueSelect(this.model);\n                if (preValueSelect) {\n                    select = Object.assign(Object.assign({}, select), preValueSelect);\n                }\n                // merge selection required for running additional checker\n                const entityChecker = this.policyUtils.getEntityChecker(this.model, 'update');\n                if (entityChecker === null || entityChecker === void 0 ? void 0 : entityChecker.selector) {\n                    select = (0, deepmerge_1.default)(select, entityChecker.selector);\n                }\n                const currentSetQuery = { select, where: args.where };\n                this.policyUtils.injectAuthGuardAsWhere(tx, currentSetQuery, this.model, 'update');\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`findMany\\` ${this.model}: ${(0, utils_1.formatObject)(currentSetQuery)}`);\n                }\n                let candidates = yield tx[this.model].findMany(currentSetQuery);\n                if (entityChecker) {\n                    // filter candidates with additional checker and build an id filter\n                    const r = this.buildIdFilterWithEntityChecker(candidates, entityChecker.func);\n                    candidates = r.filteredCandidates;\n                    // merge id filter into update's where clause\n                    args.where = args.where ? { AND: [args.where, r.idFilter] } : r.idFilter;\n                }\n                postWriteChecks.push(...candidates.map((preValue) => ({\n                    model: this.model,\n                    operation: 'postUpdate',\n                    uniqueFilter: this.policyUtils.getEntityIds(this.model, preValue),\n                    preValue: preValueSelect ? preValue : undefined,\n                })));\n                // proceed with the update\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`updateMany\\` in tx for ${this.model}: ${(0, utils_1.formatObject)(args)}`);\n                }\n                const result = yield tx[this.model].updateMany(args);\n                // run post-write checks\n                yield this.runPostWriteChecks(postWriteChecks, tx);\n                return result;\n            }));\n        });\n    }\n    upsert(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.where) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'where field is required in query argument');\n        }\n        if (!args.create) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'create field is required in query argument');\n        }\n        if (!args.update) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'update field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            this.policyUtils.tryReject(this.prisma, this.model, 'create');\n            this.policyUtils.tryReject(this.prisma, this.model, 'update');\n            args = (0, utils_1.clone)(args);\n            // We can call the native \"upsert\" because we can't tell if an entity was created or updated\n            // for doing post-write check accordingly. Instead, decompose it into create or update.\n            const { result, error } = yield this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                const { where, create, update } = args, rest = __rest(args, [\"where\", \"create\", \"update\"]);\n                const existing = yield this.policyUtils.checkExistence(tx, this.model, where);\n                if (existing) {\n                    // update case\n                    const { result, postWriteChecks } = yield this.doUpdate(Object.assign({ where: this.policyUtils.composeCompoundUniqueField(this.model, existing), data: update }, rest), tx);\n                    yield this.runPostWriteChecks(postWriteChecks, tx);\n                    return this.policyUtils.readBack(tx, this.model, 'update', args, result);\n                }\n                else {\n                    // create case\n                    const { result, postWriteChecks } = yield this.doCreate(this.model, Object.assign({ data: create }, rest), tx);\n                    yield this.runPostWriteChecks(postWriteChecks, tx);\n                    return this.policyUtils.readBack(tx, this.model, 'create', args, result);\n                }\n            }));\n            if (error) {\n                throw error;\n            }\n            else {\n                return result;\n            }\n        }));\n    }\n    //#endregion\n    //#region Delete\n    // \"delete\" works against a single entity, and is rejected if the entity fails policy check.\n    // \"deleteMany\" works against a set of entities, entities that fail policy check are filtered out.\n    delete(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        if (!args.where) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'where field is required in query argument');\n        }\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            this.policyUtils.tryReject(this.prisma, this.model, 'delete');\n            const { result, error } = yield this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                // do a read-back before delete\n                const r = yield this.policyUtils.readBack(tx, this.model, 'delete', args, args.where);\n                const error = r.error;\n                const read = r.result;\n                // check existence\n                yield this.policyUtils.checkExistence(tx, this.model, args.where, true);\n                // inject delete guard\n                yield this.policyUtils.checkPolicyForUnique(this.model, args.where, 'delete', tx, args);\n                // proceed with the deletion\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`delete\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n                }\n                yield tx[this.model].delete(args);\n                return { result: read, error };\n            }));\n            if (error) {\n                throw error;\n            }\n            else {\n                return result;\n            }\n        }));\n    }\n    deleteMany(args) {\n        return (0, promise_1.createDeferredPromise)(() => {\n            this.policyUtils.tryReject(this.prisma, this.model, 'delete');\n            // inject policy conditions\n            args = (0, utils_1.clone)(args);\n            this.policyUtils.injectAuthGuardAsWhere(this.prisma, args, this.model, 'delete');\n            const entityChecker = this.policyUtils.getEntityChecker(this.model, 'delete');\n            if (entityChecker) {\n                // additional checker exists, need to run deletion inside a transaction\n                return this.queryUtils.transaction(this.prisma, (tx) => __awaiter(this, void 0, void 0, function* () {\n                    // find the delete candidates, selecting id fields and fields needed for\n                    // running the additional checker\n                    let candidateSelect = this.policyUtils.makeIdSelection(this.model);\n                    if (entityChecker.selector) {\n                        candidateSelect = (0, deepmerge_1.default)(candidateSelect, entityChecker.selector);\n                    }\n                    if (this.shouldLogQuery) {\n                        this.logger.info(`[policy] \\`findMany\\` ${this.model}: ${(0, utils_1.formatObject)({\n                            where: args.where,\n                            select: candidateSelect,\n                        })}`);\n                    }\n                    const candidates = yield tx[this.model].findMany({ where: args.where, select: candidateSelect });\n                    // build a ID filter based on id values filtered by the additional checker\n                    const { idFilter } = this.buildIdFilterWithEntityChecker(candidates, entityChecker.func);\n                    // merge the ID filter into the where clause\n                    args.where = args.where ? { AND: [args.where, idFilter] } : idFilter;\n                    // finally, conduct the deletion with the combined where clause\n                    if (this.shouldLogQuery) {\n                        this.logger.info(`[policy] \\`deleteMany\\` in tx for ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n                    }\n                    return tx[this.model].deleteMany(args);\n                }));\n            }\n            else {\n                // conduct the deletion directly\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`deleteMany\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n                }\n                return this.modelClient.deleteMany(args);\n            }\n        });\n    }\n    //#endregion\n    //#region Aggregation\n    aggregate(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        return (0, promise_1.createDeferredPromise)(() => {\n            args = (0, utils_1.clone)(args);\n            // inject policy conditions\n            this.policyUtils.injectAuthGuardAsWhere(this.prisma, args, this.model, 'read');\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`aggregate\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n            }\n            return this.modelClient.aggregate(args);\n        });\n    }\n    groupBy(args) {\n        if (!args) {\n            throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'query argument is required');\n        }\n        return (0, promise_1.createDeferredPromise)(() => {\n            args = (0, utils_1.clone)(args);\n            // inject policy conditions\n            this.policyUtils.injectAuthGuardAsWhere(this.prisma, args, this.model, 'read');\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`groupBy\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n            }\n            return this.modelClient.groupBy(args);\n        });\n    }\n    count(args) {\n        return (0, promise_1.createDeferredPromise)(() => {\n            // inject policy conditions\n            args = args ? (0, utils_1.clone)(args) : {};\n            this.policyUtils.injectAuthGuardAsWhere(this.prisma, args, this.model, 'read');\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`count\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n            }\n            return this.modelClient.count(args);\n        });\n    }\n    //#endregion\n    //#region Subscribe (Prisma Pulse)\n    subscribe(args) {\n        return (0, promise_1.createDeferredPromise)(() => {\n            const readGuard = this.policyUtils.getAuthGuard(this.prisma, this.model, 'read');\n            if (this.policyUtils.isTrue(readGuard)) {\n                // no need to inject\n                if (this.shouldLogQuery) {\n                    this.logger.info(`[policy] \\`subscribe\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n                }\n                return this.modelClient.subscribe(args);\n            }\n            if (!args) {\n                // include all\n                args = { create: {}, update: {}, delete: {} };\n            }\n            else {\n                if (typeof args !== 'object') {\n                    throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, 'argument must be an object');\n                }\n                if (Object.keys(args).length === 0) {\n                    // include all\n                    args = { create: {}, update: {}, delete: {} };\n                }\n                else {\n                    args = (0, utils_1.clone)(args);\n                }\n            }\n            // inject into subscribe conditions\n            if (args.create) {\n                args.create.after = this.policyUtils.and(args.create.after, readGuard);\n            }\n            if (args.update) {\n                args.update.after = this.policyUtils.and(args.update.after, readGuard);\n            }\n            if (args.delete) {\n                args.delete.before = this.policyUtils.and(args.delete.before, readGuard);\n            }\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] \\`subscribe\\` ${this.model}:\\n${(0, utils_1.formatObject)(args)}`);\n            }\n            return this.modelClient.subscribe(args);\n        });\n    }\n    //#endregion\n    //#region Check\n    /**\n     * Checks if the given operation is possibly allowed by the policy, without querying the database.\n     * @param operation The CRUD operation.\n     * @param fieldValues Extra field value filters to be combined with the policy constraints.\n     */\n    check(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (0, promise_1.createDeferredPromise)(() => this.doCheck(args));\n        });\n    }\n    doCheck(args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!['create', 'read', 'update', 'delete'].includes(args.operation)) {\n                throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Invalid \"operation\" ${args.operation}`);\n            }\n            let constraint = this.policyUtils.getCheckerConstraint(this.model, args.operation);\n            if (typeof constraint === 'boolean') {\n                return constraint;\n            }\n            if (args.where) {\n                // combine runtime filters with generated constraints\n                const extraConstraints = [];\n                for (const [field, value] of Object.entries(args.where)) {\n                    if (value === undefined) {\n                        continue;\n                    }\n                    if (value === null) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Using \"null\" as filter value is not supported yet`);\n                    }\n                    const fieldInfo = (0, cross_1.requireField)(this.modelMeta, this.model, field);\n                    // relation and array fields are not supported\n                    if (fieldInfo.isDataModel || fieldInfo.isArray) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Providing filter for field \"${field}\" is not supported. Only scalar fields are allowed.`);\n                    }\n                    // map field type to constraint type\n                    const fieldType = (0, ts_pattern_1.match)(fieldInfo.type)\n                        .with(ts_pattern_1.P.union('Int', 'BigInt', 'Float', 'Decimal'), () => 'number')\n                        .with('String', () => 'string')\n                        .with('Boolean', () => 'boolean')\n                        .otherwise(() => {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Providing filter for field \"${field}\" is not supported. Only number, string, and boolean fields are allowed.`);\n                    });\n                    // check value type\n                    const valueType = typeof value;\n                    if (valueType !== 'number' && valueType !== 'string' && valueType !== 'boolean') {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Invalid value type for field \"${field}\". Only number, string or boolean is allowed.`);\n                    }\n                    if (fieldType !== valueType) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Invalid value type for field \"${field}\". Expected \"${fieldType}\".`);\n                    }\n                    // check number validity\n                    if (typeof value === 'number' && (!Number.isInteger(value) || value < 0)) {\n                        throw (0, utils_1.prismaClientValidationError)(this.prisma, this.prismaModule, `Invalid value for field \"${field}\". Only non-negative integers are allowed.`);\n                    }\n                    // build a constraint\n                    extraConstraints.push({\n                        kind: 'eq',\n                        left: { kind: 'variable', name: field, type: fieldType },\n                        right: { kind: 'value', value, type: fieldType },\n                    });\n                }\n                if (extraConstraints.length > 0) {\n                    // combine the constraints\n                    constraint = { kind: 'and', children: [constraint, ...extraConstraints] };\n                }\n            }\n            // check satisfiability\n            return new constraint_solver_1.ConstraintSolver().checkSat(constraint);\n        });\n    }\n    //#endregion\n    //#region Utils\n    get shouldLogQuery() {\n        var _a;\n        return !!((_a = this.options) === null || _a === void 0 ? void 0 : _a.logPrismaQuery) && this.logger.enabled('info');\n    }\n    runPostWriteChecks(postWriteChecks, db) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield Promise.all(postWriteChecks.map((_a) => __awaiter(this, [_a], void 0, function* ({ model, operation, uniqueFilter, preValue }) { return this.policyUtils.checkPolicyForUnique(model, uniqueFilter, operation, db, undefined, preValue); })));\n        });\n    }\n    requireBackLink(fieldInfo) {\n        (0, tiny_invariant_1.default)(fieldInfo.backLink, `back link not found for field ${fieldInfo.name}`);\n        return (0, cross_1.requireField)(this.modelMeta, fieldInfo.type, fieldInfo.backLink);\n    }\n    mergeToParent(parent, key, value) {\n        if (parent[key]) {\n            if (Array.isArray(parent[key])) {\n                parent[key].push(value);\n            }\n            else {\n                parent[key] = [parent[key], value];\n            }\n        }\n        else {\n            parent[key] = value;\n        }\n    }\n    removeFromParent(parent, key, data) {\n        if (parent[key] === data) {\n            delete parent[key];\n        }\n        else if (Array.isArray(parent[key])) {\n            const idx = parent[key].indexOf(data);\n            if (idx >= 0) {\n                parent[key].splice(idx, 1);\n                if (parent[key].length === 0) {\n                    delete parent[key];\n                }\n            }\n        }\n    }\n    buildIdFilterWithEntityChecker(candidates, entityChecker) {\n        const filteredCandidates = candidates.filter((value) => { var _a; return entityChecker(value, { user: (_a = this.context) === null || _a === void 0 ? void 0 : _a.user }); });\n        const idFields = this.policyUtils.getIdFields(this.model);\n        let idFilter;\n        if (idFields.length === 1) {\n            idFilter = { [idFields[0].name]: { in: filteredCandidates.map((x) => x[idFields[0].name]) } };\n        }\n        else {\n            idFilter = { AND: filteredCandidates.map((x) => this.policyUtils.getIdFieldValues(this.model, x)) };\n        }\n        return { filteredCandidates, idFilter };\n    }\n}\nexports.PolicyProxyHandler = PolicyProxyHandler;\n//# sourceMappingURL=handler.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/handler.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/index.js":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/index.js ***!
  \*********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.withPolicy = void 0;\nconst cross_1 = __webpack_require__(/*! ../../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst validation_1 = __webpack_require__(/*! ../../validation */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/validation.js\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\");\nconst proxy_1 = __webpack_require__(/*! ../proxy */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\");\nconst handler_1 = __webpack_require__(/*! ./handler */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/handler.js\");\n/**\n * Gets an enhanced Prisma client with access policy check.\n *\n * @param prisma The original Prisma client\n * @param context The policy evaluation context\n * @param policy The policy definition, will be loaded from default location if not provided\n * @param modelMeta The model metadata, will be loaded from default location if not provided\n *\n * @private\n */\nfunction withPolicy(prisma, options, context) {\n    const { modelMeta, policy } = options;\n    // validate user context\n    const userContext = context === null || context === void 0 ? void 0 : context.user;\n    if (userContext && modelMeta.authModel) {\n        const idFields = (0, cross_1.getIdFields)(modelMeta, modelMeta.authModel);\n        if (!(0, validation_1.hasAllFields)(context.user, idFields.map((f) => f.name))) {\n            throw new Error(`Invalid user context: must have valid ID field ${idFields.map((f) => `\"${f.name}\"`).join(', ')}`);\n        }\n        // validate user context for fields used in policy expressions\n        const authSelector = policy.authSelector;\n        if (authSelector) {\n            Object.keys(authSelector).forEach((f) => {\n                if (!(f in userContext)) {\n                    const logger = new logger_1.Logger(prisma);\n                    logger.warn(`User context does not have field \"${f}\" used in policy rules`);\n                }\n            });\n        }\n    }\n    return (0, proxy_1.makeProxy)(prisma, modelMeta, (_prisma, model) => new handler_1.PolicyProxyHandler(_prisma, model, options, context), 'policy', options === null || options === void 0 ? void 0 : options.errorTransformer);\n}\nexports.withPolicy = withPolicy;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3BvbGljeS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixnQkFBZ0IsbUJBQU8sQ0FBQyw4SkFBYTtBQUNyQyxxQkFBcUIsbUJBQU8sQ0FBQyxrS0FBa0I7QUFDL0MsaUJBQWlCLG1CQUFPLENBQUMsb0tBQVc7QUFDcEMsZ0JBQWdCLG1CQUFPLENBQUMsa0tBQVU7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsNEtBQVc7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0JBQW9CO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4RUFBOEUsd0JBQXdCLE9BQU8sZUFBZTtBQUM1SDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxFQUFFO0FBQ3ZFO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHQtanMvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3BvbGljeS9pbmRleC5qcz8zODg5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy53aXRoUG9saWN5ID0gdm9pZCAwO1xuY29uc3QgY3Jvc3NfMSA9IHJlcXVpcmUoXCIuLi8uLi9jcm9zc1wiKTtcbmNvbnN0IHZhbGlkYXRpb25fMSA9IHJlcXVpcmUoXCIuLi8uLi92YWxpZGF0aW9uXCIpO1xuY29uc3QgbG9nZ2VyXzEgPSByZXF1aXJlKFwiLi4vbG9nZ2VyXCIpO1xuY29uc3QgcHJveHlfMSA9IHJlcXVpcmUoXCIuLi9wcm94eVwiKTtcbmNvbnN0IGhhbmRsZXJfMSA9IHJlcXVpcmUoXCIuL2hhbmRsZXJcIik7XG4vKipcbiAqIEdldHMgYW4gZW5oYW5jZWQgUHJpc21hIGNsaWVudCB3aXRoIGFjY2VzcyBwb2xpY3kgY2hlY2suXG4gKlxuICogQHBhcmFtIHByaXNtYSBUaGUgb3JpZ2luYWwgUHJpc21hIGNsaWVudFxuICogQHBhcmFtIGNvbnRleHQgVGhlIHBvbGljeSBldmFsdWF0aW9uIGNvbnRleHRcbiAqIEBwYXJhbSBwb2xpY3kgVGhlIHBvbGljeSBkZWZpbml0aW9uLCB3aWxsIGJlIGxvYWRlZCBmcm9tIGRlZmF1bHQgbG9jYXRpb24gaWYgbm90IHByb3ZpZGVkXG4gKiBAcGFyYW0gbW9kZWxNZXRhIFRoZSBtb2RlbCBtZXRhZGF0YSwgd2lsbCBiZSBsb2FkZWQgZnJvbSBkZWZhdWx0IGxvY2F0aW9uIGlmIG5vdCBwcm92aWRlZFxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHdpdGhQb2xpY3kocHJpc21hLCBvcHRpb25zLCBjb250ZXh0KSB7XG4gICAgY29uc3QgeyBtb2RlbE1ldGEsIHBvbGljeSB9ID0gb3B0aW9ucztcbiAgICAvLyB2YWxpZGF0ZSB1c2VyIGNvbnRleHRcbiAgICBjb25zdCB1c2VyQ29udGV4dCA9IGNvbnRleHQgPT09IG51bGwgfHwgY29udGV4dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29udGV4dC51c2VyO1xuICAgIGlmICh1c2VyQ29udGV4dCAmJiBtb2RlbE1ldGEuYXV0aE1vZGVsKSB7XG4gICAgICAgIGNvbnN0IGlkRmllbGRzID0gKDAsIGNyb3NzXzEuZ2V0SWRGaWVsZHMpKG1vZGVsTWV0YSwgbW9kZWxNZXRhLmF1dGhNb2RlbCk7XG4gICAgICAgIGlmICghKDAsIHZhbGlkYXRpb25fMS5oYXNBbGxGaWVsZHMpKGNvbnRleHQudXNlciwgaWRGaWVsZHMubWFwKChmKSA9PiBmLm5hbWUpKSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHVzZXIgY29udGV4dDogbXVzdCBoYXZlIHZhbGlkIElEIGZpZWxkICR7aWRGaWVsZHMubWFwKChmKSA9PiBgXCIke2YubmFtZX1cImApLmpvaW4oJywgJyl9YCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gdmFsaWRhdGUgdXNlciBjb250ZXh0IGZvciBmaWVsZHMgdXNlZCBpbiBwb2xpY3kgZXhwcmVzc2lvbnNcbiAgICAgICAgY29uc3QgYXV0aFNlbGVjdG9yID0gcG9saWN5LmF1dGhTZWxlY3RvcjtcbiAgICAgICAgaWYgKGF1dGhTZWxlY3Rvcikge1xuICAgICAgICAgICAgT2JqZWN0LmtleXMoYXV0aFNlbGVjdG9yKS5mb3JFYWNoKChmKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCEoZiBpbiB1c2VyQ29udGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbG9nZ2VyID0gbmV3IGxvZ2dlcl8xLkxvZ2dlcihwcmlzbWEpO1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIud2FybihgVXNlciBjb250ZXh0IGRvZXMgbm90IGhhdmUgZmllbGQgXCIke2Z9XCIgdXNlZCBpbiBwb2xpY3kgcnVsZXNgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKDAsIHByb3h5XzEubWFrZVByb3h5KShwcmlzbWEsIG1vZGVsTWV0YSwgKF9wcmlzbWEsIG1vZGVsKSA9PiBuZXcgaGFuZGxlcl8xLlBvbGljeVByb3h5SGFuZGxlcihfcHJpc21hLCBtb2RlbCwgb3B0aW9ucywgY29udGV4dCksICdwb2xpY3knLCBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXJyb3JUcmFuc2Zvcm1lcik7XG59XG5leHBvcnRzLndpdGhQb2xpY3kgPSB3aXRoUG9saWN5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/policy-utils.js":
/*!****************************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/policy-utils.js ***!
  \****************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PolicyUtil = void 0;\nconst deepcopy_1 = __importDefault(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nconst deepmerge_1 = __importDefault(__webpack_require__(/*! deepmerge */ \"(rsc)/./node_modules/.pnpm/deepmerge@4.3.1/node_modules/deepmerge/dist/cjs.js\"));\nconst lower_case_first_1 = __webpack_require__(/*! lower-case-first */ \"(rsc)/./node_modules/.pnpm/lower-case-first@2.0.2/node_modules/lower-case-first/dist.es2015/index.js\");\nconst upper_case_first_1 = __webpack_require__(/*! upper-case-first */ \"(rsc)/./node_modules/.pnpm/upper-case-first@2.0.2/node_modules/upper-case-first/dist.es2015/index.js\");\nconst zod_validation_error_1 = __webpack_require__(/*! zod-validation-error */ \"(rsc)/./node_modules/.pnpm/zod-validation-error@1.5.0_zod@3.23.8/node_modules/zod-validation-error/dist/esm/index.js\");\nconst constants_1 = __webpack_require__(/*! ../../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst cross_1 = __webpack_require__(/*! ../../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst version_1 = __webpack_require__(/*! ../../version */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js\");\nconst logger_1 = __webpack_require__(/*! ../logger */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/logger.js\");\nconst query_utils_1 = __webpack_require__(/*! ../query-utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\");\n/**\n * Access policy enforcement utilities\n */\nclass PolicyUtil extends query_utils_1.QueryUtils {\n    constructor(db, options, context, shouldLogQuery = false) {\n        super(db, options);\n        this.db = db;\n        this.shouldLogQuery = shouldLogQuery;\n        //#endregion\n        //#region Auth guard\n        this.FULL_OPEN_MODEL_POLICY = {\n            modelLevel: {\n                read: { guard: true },\n                create: { guard: true, inputChecker: true },\n                update: { guard: true },\n                delete: { guard: true },\n                postUpdate: { guard: true },\n            },\n        };\n        this.logger = new logger_1.Logger(db);\n        this.user = context === null || context === void 0 ? void 0 : context.user;\n        ({\n            modelMeta: this.modelMeta,\n            policy: this.policy,\n            zodSchemas: this.zodSchemas,\n            prismaModule: this.prismaModule,\n        } = options);\n    }\n    //#region Logical operators\n    /**\n     * Creates a conjunction of a list of query conditions.\n     */\n    and(...conditions) {\n        const filtered = conditions.filter((c) => c !== undefined);\n        if (filtered.length === 0) {\n            return this.makeTrue();\n        }\n        else if (filtered.length === 1) {\n            return this.reduce(filtered[0]);\n        }\n        else {\n            return this.reduce({ AND: filtered });\n        }\n    }\n    /**\n     * Creates a disjunction of a list of query conditions.\n     */\n    or(...conditions) {\n        const filtered = conditions.filter((c) => c !== undefined);\n        if (filtered.length === 0) {\n            return this.makeFalse();\n        }\n        else if (filtered.length === 1) {\n            return this.reduce(filtered[0]);\n        }\n        else {\n            return this.reduce({ OR: filtered });\n        }\n    }\n    /**\n     * Creates a negation of a query condition.\n     */\n    not(condition) {\n        if (condition === undefined) {\n            return this.makeTrue();\n        }\n        else if (typeof condition === 'boolean') {\n            return this.reduce(!condition);\n        }\n        else {\n            return this.reduce({ NOT: condition });\n        }\n    }\n    // Static True/False conditions\n    // https://www.prisma.io/docs/concepts/components/prisma-client/null-and-undefined#the-effect-of-null-and-undefined-on-conditionals\n    isTrue(condition) {\n        if (condition === null || condition === undefined) {\n            return false;\n        }\n        else {\n            return ((typeof condition === 'object' && Object.keys(condition).length === 0) ||\n                ('AND' in condition && Array.isArray(condition.AND) && condition.AND.length === 0));\n        }\n    }\n    isFalse(condition) {\n        if (condition === null || condition === undefined) {\n            return false;\n        }\n        else {\n            return 'OR' in condition && Array.isArray(condition.OR) && condition.OR.length === 0;\n        }\n    }\n    makeTrue() {\n        return { AND: [] };\n    }\n    makeFalse() {\n        return { OR: [] };\n    }\n    reduce(condition) {\n        if (condition === true || condition === undefined) {\n            return this.makeTrue();\n        }\n        if (condition === false) {\n            return this.makeFalse();\n        }\n        if (condition === null) {\n            return condition;\n        }\n        const result = {};\n        for (const [key, value] of Object.entries(condition)) {\n            if (this.isFalse(result)) {\n                // already false, no need to continue\n                break;\n            }\n            if (value === null || value === undefined) {\n                result[key] = value;\n                continue;\n            }\n            switch (key) {\n                case 'AND': {\n                    const children = (0, cross_1.enumerate)(value)\n                        .map((c) => this.reduce(c))\n                        .filter((c) => c !== undefined && !this.isTrue(c));\n                    if (children.length === 0) {\n                        result[key] = []; // true\n                    }\n                    else if (children.some((c) => this.isFalse(c))) {\n                        result['OR'] = []; // false\n                    }\n                    else {\n                        if (!this.isTrue({ AND: result[key] })) {\n                            // use AND only if it's not already true\n                            result[key] = !Array.isArray(value) && children.length === 1 ? children[0] : children;\n                        }\n                    }\n                    break;\n                }\n                case 'OR': {\n                    const children = (0, cross_1.enumerate)(value)\n                        .map((c) => this.reduce(c))\n                        .filter((c) => c !== undefined && !this.isFalse(c));\n                    if (children.length === 0) {\n                        result[key] = []; // false\n                    }\n                    else if (children.some((c) => this.isTrue(c))) {\n                        result['AND'] = []; // true\n                    }\n                    else {\n                        if (!this.isFalse({ OR: result[key] })) {\n                            // use OR only if it's not already false\n                            result[key] = !Array.isArray(value) && children.length === 1 ? children[0] : children;\n                        }\n                    }\n                    break;\n                }\n                case 'NOT': {\n                    const children = (0, cross_1.enumerate)(value)\n                        .map((c) => this.reduce(c))\n                        .filter((c) => c !== undefined && !this.isFalse(c));\n                    if (children.length === 0) {\n                        // all clauses are false, result is a constant true,\n                        // thus eliminated (not adding into result)\n                    }\n                    else if (children.some((c) => this.isTrue(c))) {\n                        // some clauses are true, result is a constant false,\n                        // eliminate all other keys and set entire condition to false\n                        Object.keys(result).forEach((k) => delete result[k]);\n                        result['OR'] = []; // this will cause the outer loop to exit too\n                    }\n                    else {\n                        result[key] = !Array.isArray(value) && children.length === 1 ? children[0] : children;\n                    }\n                    break;\n                }\n                default: {\n                    const booleanKeys = ['AND', 'OR', 'NOT', 'is', 'isNot', 'none', 'every', 'some'];\n                    if (typeof value === 'object' &&\n                        value &&\n                        // recurse only if the value has at least one boolean key\n                        Object.keys(value).some((k) => booleanKeys.includes(k))) {\n                        result[key] = this.reduce(value);\n                    }\n                    else {\n                        result[key] = value;\n                    }\n                    break;\n                }\n            }\n        }\n        return result;\n    }\n    getModelPolicyDef(model) {\n        if (this.options.kinds && !this.options.kinds.includes('policy')) {\n            // policy enhancement not enabled, return an fully open guard\n            return this.FULL_OPEN_MODEL_POLICY;\n        }\n        const def = this.policy.policy[(0, lower_case_first_1.lowerCaseFirst)(model)];\n        if (!def) {\n            throw this.unknownError(`unable to load policy guard for ${model}`);\n        }\n        return def;\n    }\n    getModelGuardForOperation(model, operation) {\n        var _a;\n        const def = this.getModelPolicyDef(model);\n        return (_a = def.modelLevel[operation].guard) !== null && _a !== void 0 ? _a : true;\n    }\n    /**\n     * Gets pregenerated authorization guard object for a given model and operation.\n     *\n     * @returns true if operation is unconditionally allowed, false if unconditionally denied,\n     * otherwise returns a guard object\n     */\n    getAuthGuard(db, model, operation, preValue) {\n        const guard = this.getModelGuardForOperation(model, operation);\n        // constant guard\n        if (typeof guard === 'boolean') {\n            return this.reduce(guard);\n        }\n        // invoke guard function\n        const r = guard({ user: this.user, preValue }, db);\n        return this.reduce(r);\n    }\n    /**\n     * Get field-level read auth guard\n     */\n    getFieldReadAuthGuard(db, model, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        const guard = (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.read) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.guard;\n        if (guard === undefined) {\n            // field access is allowed by default\n            return this.makeTrue();\n        }\n        if (typeof guard === 'boolean') {\n            return this.reduce(guard);\n        }\n        const r = guard({ user: this.user }, db);\n        return this.reduce(r);\n    }\n    /**\n     * Get field-level read auth guard that overrides the model-level\n     */\n    getFieldOverrideReadAuthGuard(db, model, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        const guard = (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.read) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.overrideGuard;\n        if (guard === undefined) {\n            // field access is denied by default in override mode\n            return this.makeFalse();\n        }\n        if (typeof guard === 'boolean') {\n            return this.reduce(guard);\n        }\n        const r = guard({ user: this.user }, db);\n        return this.reduce(r);\n    }\n    /**\n     * Get field-level update auth guard\n     */\n    getFieldUpdateAuthGuard(db, model, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        const guard = (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.update) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.guard;\n        if (guard === undefined) {\n            // field access is allowed by default\n            return this.makeTrue();\n        }\n        if (typeof guard === 'boolean') {\n            return this.reduce(guard);\n        }\n        const r = guard({ user: this.user }, db);\n        return this.reduce(r);\n    }\n    /**\n     * Get field-level update auth guard that overrides the model-level\n     */\n    getFieldOverrideUpdateAuthGuard(db, model, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        const guard = (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.update) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.overrideGuard;\n        if (guard === undefined) {\n            // field access is denied by default in override mode\n            return this.makeFalse();\n        }\n        if (typeof guard === 'boolean') {\n            return this.reduce(guard);\n        }\n        const r = guard({ user: this.user }, db);\n        return this.reduce(r);\n    }\n    /**\n     * Checks if the given model has a policy guard for the given operation.\n     */\n    hasAuthGuard(model, operation) {\n        const guard = this.getModelGuardForOperation(model, operation);\n        return typeof guard !== 'boolean' || guard !== true;\n    }\n    /**\n     * Checks if the given model has any field-level override policy guard for the given operation.\n     */\n    hasOverrideAuthGuard(model, operation) {\n        var _a;\n        if (operation !== 'read' && operation !== 'update') {\n            return false;\n        }\n        const def = this.getModelPolicyDef(model);\n        if ((_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a[operation]) {\n            return Object.values(def.fieldLevel[operation]).some((f) => f.overrideGuard !== undefined || f.overrideEntityChecker !== undefined);\n        }\n        else {\n            return false;\n        }\n    }\n    /**\n     * Checks model creation policy based on static analysis to the input args.\n     *\n     * @returns boolean if static analysis is enough to determine the result, undefined if not\n     */\n    checkInputGuard(model, args, operation) {\n        const def = this.getModelPolicyDef(model);\n        const guard = def.modelLevel[operation].inputChecker;\n        if (guard === undefined) {\n            return undefined;\n        }\n        if (typeof guard === 'boolean') {\n            return guard;\n        }\n        return guard(args, { user: this.user });\n    }\n    /**\n     * Injects model auth guard as where clause.\n     */\n    injectAuthGuardAsWhere(db, args, model, operation) {\n        let guard = this.getAuthGuard(db, model, operation);\n        if (operation === 'update' && args) {\n            // merge field-level policy guards\n            const fieldUpdateGuard = this.getFieldUpdateGuards(db, model, args);\n            if (fieldUpdateGuard.rejectedByField) {\n                // rejected\n                args.where = this.makeFalse();\n                return false;\n            }\n            else {\n                if (fieldUpdateGuard.guard) {\n                    // merge field-level guard\n                    guard = this.and(guard, fieldUpdateGuard.guard);\n                }\n                if (fieldUpdateGuard.overrideGuard) {\n                    // merge field-level override guard on the top level\n                    guard = this.or(guard, fieldUpdateGuard.overrideGuard);\n                }\n            }\n        }\n        if (operation === 'read') {\n            // merge field-level read override guards\n            const fieldReadOverrideGuard = this.getFieldReadGuards(db, model, args);\n            if (fieldReadOverrideGuard) {\n                guard = this.or(guard, fieldReadOverrideGuard);\n            }\n        }\n        if (this.isFalse(guard)) {\n            args.where = this.makeFalse();\n            return false;\n        }\n        let mergedGuard = guard;\n        if (args.where) {\n            // inject into relation fields:\n            //   to-many: some/none/every\n            //   to-one: direct-conditions/is/isNot\n            mergedGuard = this.injectReadGuardForRelationFields(db, model, args.where, guard);\n        }\n        args.where = this.and(args.where, mergedGuard);\n        return true;\n    }\n    // Injects guard for relation fields nested in `payload`. The `modelGuard` parameter represents the model-level guard for `model`.\n    // The function returns a modified copy of `modelGuard` with field-level policies combined.\n    injectReadGuardForRelationFields(db, model, payload, modelGuard) {\n        if (!payload || typeof payload !== 'object' || Object.keys(payload).length === 0) {\n            return modelGuard;\n        }\n        const allFieldGuards = [];\n        const allFieldOverrideGuards = [];\n        for (const [field, subPayload] of Object.entries(payload)) {\n            if (!subPayload) {\n                continue;\n            }\n            allFieldGuards.push(this.getFieldReadAuthGuard(db, model, field));\n            allFieldOverrideGuards.push(this.getFieldOverrideReadAuthGuard(db, model, field));\n            const fieldInfo = (0, cross_1.resolveField)(this.modelMeta, model, field);\n            if (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.isDataModel) {\n                if (fieldInfo.isArray) {\n                    this.injectReadGuardForToManyField(db, fieldInfo, subPayload);\n                }\n                else {\n                    this.injectReadGuardForToOneField(db, fieldInfo, subPayload);\n                }\n            }\n        }\n        // all existing field-level guards must be true\n        const mergedGuard = this.and(...allFieldGuards);\n        // all existing field-level override guards must be true for override to take effect; override is disabled by default\n        const mergedOverrideGuard = allFieldOverrideGuards.length === 0 ? this.makeFalse() : this.and(...allFieldOverrideGuards);\n        // (original-guard && field-level-guard) || field-level-override-guard\n        const updatedGuard = this.or(this.and(modelGuard, mergedGuard), mergedOverrideGuard);\n        return updatedGuard;\n    }\n    injectReadGuardForToManyField(db, fieldInfo, payload) {\n        const guard = this.getAuthGuard(db, fieldInfo.type, 'read');\n        if (payload.some) {\n            const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload.some, guard);\n            // turn \"some\" into: { some: { AND: [guard, payload.some] } }\n            payload.some = this.and(payload.some, mergedGuard);\n        }\n        if (payload.none) {\n            const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload.none, guard);\n            // turn none into: { none: { AND: [guard, payload.none] } }\n            payload.none = this.and(payload.none, mergedGuard);\n        }\n        if (payload.every &&\n            typeof payload.every === 'object' &&\n            // ignore empty every clause\n            Object.keys(payload.every).length > 0) {\n            const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload.every, guard);\n            // turn \"every\" into: { none: { AND: [guard, { NOT: payload.every }] } }\n            if (!payload.none) {\n                payload.none = {};\n            }\n            payload.none = this.and(payload.none, mergedGuard, this.not(payload.every));\n            delete payload.every;\n        }\n    }\n    injectReadGuardForToOneField(db, fieldInfo, payload) {\n        const guard = this.getAuthGuard(db, fieldInfo.type, 'read');\n        // is|isNot and flat fields conditions are mutually exclusive\n        // is and isNot can be null value\n        if (payload.is !== undefined || payload.isNot !== undefined) {\n            if (payload.is) {\n                const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload.is, guard);\n                // merge guard with existing \"is\": { is: { AND: [originalIs, guard] } }\n                payload.is = this.and(payload.is, mergedGuard);\n            }\n            if (payload.isNot) {\n                const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload.isNot, guard);\n                // merge guard with existing \"isNot\":  { isNot: { AND: [originalIsNot, guard] } }\n                payload.isNot = this.and(payload.isNot, mergedGuard);\n            }\n        }\n        else {\n            const mergedGuard = this.injectReadGuardForRelationFields(db, fieldInfo.type, payload, guard);\n            // turn direct conditions into: { is: { AND: [ originalConditions, guard ] } }\n            const combined = this.and((0, deepcopy_1.default)(payload), mergedGuard);\n            Object.keys(payload).forEach((key) => delete payload[key]);\n            payload.is = combined;\n        }\n    }\n    /**\n     * Injects auth guard for read operations.\n     */\n    injectForRead(db, model, args) {\n        // make select and include visible to the injection\n        const injected = { select: args.select, include: args.include };\n        if (!this.injectAuthGuardAsWhere(db, injected, model, 'read')) {\n            return false;\n        }\n        if (args.where) {\n            // inject into relation fields:\n            //   to-many: some/none/every\n            //   to-one: direct-conditions/is/isNot\n            this.injectReadGuardForRelationFields(db, model, args.where, {});\n        }\n        if (injected.where && Object.keys(injected.where).length > 0 && !this.isTrue(injected.where)) {\n            if (!args.where) {\n                args.where = injected.where;\n            }\n            else {\n                this.mergeWhereClause(args.where, injected.where);\n            }\n        }\n        // recursively inject read guard conditions into nested select, include, and _count\n        const hoistedConditions = this.injectNestedReadConditions(db, model, args);\n        // the injection process may generate conditions that need to be hoisted to the toplevel,\n        // if so, merge it with the existing where\n        if (hoistedConditions.length > 0) {\n            if (!args.where) {\n                args.where = this.and(...hoistedConditions);\n            }\n            else {\n                this.mergeWhereClause(args.where, this.and(...hoistedConditions));\n            }\n        }\n        return true;\n    }\n    //#endregion\n    //#region Checker\n    /**\n     * Gets checker constraints for the given model and operation.\n     */\n    getCheckerConstraint(model, operation) {\n        if (this.options.kinds && !this.options.kinds.includes('policy')) {\n            // policy enhancement not enabled, return a constant true checker result\n            return true;\n        }\n        const def = this.getModelPolicyDef(model);\n        const checker = def.modelLevel[operation].permissionChecker;\n        if (checker === undefined) {\n            throw new Error(`Generated permission checkers not found. Please make sure the \"generatePermissionChecker\" option is set to true in the \"@core/enhancer\" plugin.`);\n        }\n        if (typeof checker === 'boolean') {\n            return checker;\n        }\n        if (typeof checker !== 'function') {\n            throw this.unknownError(`invalid ${operation} checker function for ${model}`);\n        }\n        // call checker function\n        return checker({ user: this.user });\n    }\n    //#endregion\n    /**\n     * Gets unique constraints for the given model.\n     */\n    getUniqueConstraints(model) {\n        var _a, _b;\n        return (_b = (_a = this.modelMeta.models[(0, lower_case_first_1.lowerCaseFirst)(model)]) === null || _a === void 0 ? void 0 : _a.uniqueConstraints) !== null && _b !== void 0 ? _b : {};\n    }\n    injectNestedReadConditions(db, model, args) {\n        var _a;\n        const injectTarget = (_a = args.select) !== null && _a !== void 0 ? _a : args.include;\n        if (!injectTarget) {\n            return [];\n        }\n        if (injectTarget._count !== undefined) {\n            // _count needs to respect read policies of related models\n            if (injectTarget._count === true) {\n                // include count for all relations, expand to all fields\n                // so that we can inject guard conditions for each of them\n                injectTarget._count = { select: {} };\n                const modelFields = (0, cross_1.getFields)(this.modelMeta, model);\n                if (modelFields) {\n                    for (const [k, v] of Object.entries(modelFields)) {\n                        if (v.isDataModel && v.isArray) {\n                            // create an entry for to-many relation\n                            injectTarget._count.select[k] = {};\n                        }\n                    }\n                }\n            }\n            // inject conditions for each relation\n            for (const field of Object.keys(injectTarget._count.select)) {\n                if (typeof injectTarget._count.select[field] !== 'object') {\n                    injectTarget._count.select[field] = {};\n                }\n                const fieldInfo = (0, cross_1.resolveField)(this.modelMeta, model, field);\n                if (!fieldInfo) {\n                    continue;\n                }\n                // inject into the \"where\" clause inside select\n                this.injectAuthGuardAsWhere(db, injectTarget._count.select[field], fieldInfo.type, 'read');\n            }\n        }\n        // collect filter conditions that should be hoisted to the toplevel\n        const hoistedConditions = [];\n        for (const field of (0, cross_1.getModelFields)(injectTarget)) {\n            if (injectTarget[field] === false) {\n                continue;\n            }\n            const fieldInfo = (0, cross_1.resolveField)(this.modelMeta, model, field);\n            if (!fieldInfo || !fieldInfo.isDataModel) {\n                // only care about relation fields\n                continue;\n            }\n            let hoisted;\n            if (fieldInfo.isArray ||\n                // Injecting where at include/select level for nullable to-one relation is supported since Prisma 4.8.0\n                // https://github.com/prisma/prisma/discussions/20350\n                fieldInfo.isOptional) {\n                if (typeof injectTarget[field] !== 'object') {\n                    injectTarget[field] = {};\n                }\n                // inject extra condition for to-many or nullable to-one relation\n                this.injectAuthGuardAsWhere(db, injectTarget[field], fieldInfo.type, 'read');\n                // recurse\n                const subHoisted = this.injectNestedReadConditions(db, fieldInfo.type, injectTarget[field]);\n                if (subHoisted.length > 0) {\n                    // we can convert it to a where at this level\n                    injectTarget[field].where = this.and(injectTarget[field].where, ...subHoisted);\n                }\n            }\n            else {\n                // hoist non-nullable to-one filter to the parent level\n                hoisted = this.getAuthGuard(db, fieldInfo.type, 'read');\n                // recurse\n                const subHoisted = this.injectNestedReadConditions(db, fieldInfo.type, injectTarget[field]);\n                if (subHoisted.length > 0) {\n                    hoisted = this.and(hoisted, ...subHoisted);\n                }\n            }\n            if (hoisted && !this.isTrue(hoisted)) {\n                hoistedConditions.push({ [field]: hoisted });\n            }\n        }\n        return hoistedConditions;\n    }\n    /**\n     * Given a model and a unique filter, checks the operation is allowed by policies and field validations.\n     * Rejects with an error if not allowed.\n     */\n    checkPolicyForUnique(model, uniqueFilter, operation, db, args, preValue) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let guard = this.getAuthGuard(db, model, operation, preValue);\n            if (this.isFalse(guard) && !this.hasOverrideAuthGuard(model, operation)) {\n                throw this.deniedByPolicy(model, operation, `entity ${(0, utils_1.formatObject)(uniqueFilter, false)} failed policy check`, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n            }\n            let entityChecker;\n            if (operation === 'update' && args) {\n                // merge field-level policy guards\n                const fieldUpdateGuard = this.getFieldUpdateGuards(db, model, args);\n                if (fieldUpdateGuard.rejectedByField) {\n                    // rejected\n                    throw this.deniedByPolicy(model, 'update', `entity ${(0, utils_1.formatObject)(uniqueFilter, false)} failed update policy check for field \"${fieldUpdateGuard.rejectedByField}\"`, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n                }\n                if (fieldUpdateGuard.guard) {\n                    // merge field-level guard with AND\n                    guard = this.and(guard, fieldUpdateGuard.guard);\n                }\n                if (fieldUpdateGuard.overrideGuard) {\n                    // merge field-level override guard with OR\n                    guard = this.or(guard, fieldUpdateGuard.overrideGuard);\n                }\n                // field-level entity checker\n                entityChecker = fieldUpdateGuard.entityChecker;\n            }\n            // Zod schema is to be checked for \"create\" and \"postUpdate\"\n            const schema = ['create', 'postUpdate'].includes(operation) ? this.getZodSchema(model) : undefined;\n            // combine field-level entity checker with model-level\n            const modelEntityChecker = this.getEntityChecker(model, operation);\n            entityChecker = this.combineEntityChecker(entityChecker, modelEntityChecker, 'and');\n            if (this.isTrue(guard) && !schema && !entityChecker) {\n                // unconditionally allowed\n                return;\n            }\n            let select = schema\n                ? // need to validate against schema, need to fetch all fields\n                    undefined\n                : // only fetch id fields\n                    this.makeIdSelection(model);\n            if (entityChecker === null || entityChecker === void 0 ? void 0 : entityChecker.selector) {\n                if (!select) {\n                    select = this.makeAllScalarFieldSelect(model);\n                }\n                select = Object.assign(Object.assign({}, select), entityChecker.selector);\n            }\n            let where = this.clone(uniqueFilter);\n            // query args may have be of combined-id form, need to flatten it to call findFirst\n            this.flattenGeneratedUniqueField(model, where);\n            // query with policy guard\n            where = this.and(where, guard);\n            const query = { select, where };\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] checking ${model} for ${operation}, \\`findFirst\\`:\\n${(0, utils_1.formatObject)(query)}`);\n            }\n            const result = yield db[model].findFirst(query);\n            if (!result) {\n                throw this.deniedByPolicy(model, operation, `entity ${(0, utils_1.formatObject)(uniqueFilter, false)} failed policy check`, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n            }\n            if (entityChecker) {\n                if (this.logger.enabled('info')) {\n                    this.logger.info(`[policy] running entity checker on ${model} for ${operation}`);\n                }\n                if (!entityChecker.func(result, { user: this.user, preValue })) {\n                    throw this.deniedByPolicy(model, operation, `entity ${(0, utils_1.formatObject)(uniqueFilter, false)} failed policy check`, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n                }\n            }\n            if (schema) {\n                // TODO: push down schema check to the database\n                const parseResult = schema.safeParse(result);\n                if (!parseResult.success) {\n                    const error = (0, zod_validation_error_1.fromZodError)(parseResult.error);\n                    if (this.logger.enabled('info')) {\n                        this.logger.info(`entity ${model} failed validation for operation ${operation}: ${error}`);\n                    }\n                    throw this.deniedByPolicy(model, operation, `entities ${(0, utils_1.formatObject)(uniqueFilter, false)} failed validation: [${error}]`, constants_1.CrudFailureReason.DATA_VALIDATION_VIOLATION, parseResult.error);\n                }\n            }\n        });\n    }\n    getEntityChecker(model, operation, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        if (field) {\n            return (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a[operation]) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.entityChecker;\n        }\n        else {\n            return def.modelLevel[operation].entityChecker;\n        }\n    }\n    getUpdateOverrideEntityCheckerForField(model, field) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        return (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.update) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.overrideEntityChecker;\n    }\n    getFieldReadGuards(db, model, args) {\n        const allFields = Object.values((0, cross_1.getFields)(this.modelMeta, model));\n        // all scalar fields by default\n        let fields = allFields.filter((f) => !f.isDataModel);\n        if (args.select) {\n            // explicitly selected fields\n            fields = allFields.filter((f) => { var _a; return ((_a = args.select) === null || _a === void 0 ? void 0 : _a[f.name]) === true; });\n        }\n        else if (args.include) {\n            // included relations\n            fields.push(...allFields.filter((f) => !fields.includes(f) && args.include[f.name]));\n        }\n        if (fields.length === 0) {\n            // this can happen if only selecting pseudo fields like \"_count\"\n            return undefined;\n        }\n        const allFieldGuards = fields.map((field) => this.getFieldOverrideReadAuthGuard(db, model, field.name));\n        return this.and(...allFieldGuards);\n    }\n    getFieldUpdateGuards(db, model, args) {\n        var _a;\n        const allFieldGuards = [];\n        const allOverrideFieldGuards = [];\n        let entityChecker;\n        for (const [field, value] of Object.entries((_a = args.data) !== null && _a !== void 0 ? _a : args)) {\n            if (typeof value === 'undefined') {\n                continue;\n            }\n            const fieldInfo = (0, cross_1.resolveField)(this.modelMeta, model, field);\n            if (fieldInfo === null || fieldInfo === void 0 ? void 0 : fieldInfo.isDataModel) {\n                // relation field update should be treated as foreign key update,\n                // fetch and merge all foreign key guards\n                if (fieldInfo.isRelationOwner && fieldInfo.foreignKeyMapping) {\n                    const foreignKeys = Object.values(fieldInfo.foreignKeyMapping);\n                    for (const fk of foreignKeys) {\n                        const fieldGuard = this.getFieldUpdateAuthGuard(db, model, fk);\n                        if (this.isFalse(fieldGuard)) {\n                            return { guard: fieldGuard, rejectedByField: fk };\n                        }\n                        // add field guard\n                        allFieldGuards.push(fieldGuard);\n                        // add field override guard\n                        const overrideFieldGuard = this.getFieldOverrideUpdateAuthGuard(db, model, fk);\n                        allOverrideFieldGuards.push(overrideFieldGuard);\n                    }\n                }\n            }\n            else {\n                const fieldGuard = this.getFieldUpdateAuthGuard(db, model, field);\n                if (this.isFalse(fieldGuard)) {\n                    return { guard: fieldGuard, rejectedByField: field };\n                }\n                // add field guard\n                allFieldGuards.push(fieldGuard);\n                // add field override guard\n                const overrideFieldGuard = this.getFieldOverrideUpdateAuthGuard(db, model, field);\n                allOverrideFieldGuards.push(overrideFieldGuard);\n            }\n            // merge regular and override entity checkers with OR\n            let checker = this.getEntityChecker(model, 'update', field);\n            const overrideChecker = this.getUpdateOverrideEntityCheckerForField(model, field);\n            checker = this.combineEntityChecker(checker, overrideChecker, 'or');\n            // accumulate entity checker across fields\n            entityChecker = this.combineEntityChecker(entityChecker, checker, 'and');\n        }\n        const allFieldsCombined = this.and(...allFieldGuards);\n        const allOverrideFieldsCombined = allOverrideFieldGuards.length !== 0 ? this.and(...allOverrideFieldGuards) : undefined;\n        return {\n            guard: allFieldsCombined,\n            overrideGuard: allOverrideFieldsCombined,\n            rejectedByField: undefined,\n            entityChecker,\n        };\n    }\n    combineEntityChecker(left, right, combiner) {\n        var _a, _b;\n        if (!left) {\n            return right;\n        }\n        if (!right) {\n            return left;\n        }\n        const func = combiner === 'and'\n            ? (entity, context) => left.func(entity, context) && right.func(entity, context)\n            : (entity, context) => left.func(entity, context) || right.func(entity, context);\n        return {\n            func,\n            selector: (0, deepmerge_1.default)((_a = left.selector) !== null && _a !== void 0 ? _a : {}, (_b = right.selector) !== null && _b !== void 0 ? _b : {}),\n        };\n    }\n    /**\n     * Tries rejecting a request based on static \"false\" policy.\n     */\n    tryReject(db, model, operation) {\n        const guard = this.getAuthGuard(db, model, operation);\n        if (this.isFalse(guard) && !this.hasOverrideAuthGuard(model, operation)) {\n            throw this.deniedByPolicy(model, operation, undefined, constants_1.CrudFailureReason.ACCESS_POLICY_VIOLATION);\n        }\n    }\n    /**\n     * Checks if a model exists given a unique filter.\n     */\n    checkExistence(db_1, model_1, uniqueFilter_1) {\n        return __awaiter(this, arguments, void 0, function* (db, model, uniqueFilter, throwIfNotFound = false) {\n            uniqueFilter = this.clone(uniqueFilter);\n            this.flattenGeneratedUniqueField(model, uniqueFilter);\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] checking ${model} existence, \\`findFirst\\`:\\n${(0, utils_1.formatObject)(uniqueFilter)}`);\n            }\n            const existing = yield db[model].findFirst({\n                where: uniqueFilter,\n                select: this.makeIdSelection(model),\n            });\n            if (!existing && throwIfNotFound) {\n                throw this.notFound(model);\n            }\n            return existing;\n        });\n    }\n    /**\n     * Returns an entity given a unique filter with read policy checked. Reject if not readable.\n     */\n    readBack(db, model, operation, selectInclude, uniqueFilter) {\n        return __awaiter(this, void 0, void 0, function* () {\n            uniqueFilter = this.clone(uniqueFilter);\n            this.flattenGeneratedUniqueField(model, uniqueFilter);\n            // make sure only select and include are picked\n            const selectIncludeClean = this.pick(selectInclude, 'select', 'include');\n            const readArgs = Object.assign(Object.assign({}, this.clone(selectIncludeClean)), { where: uniqueFilter });\n            const error = this.deniedByPolicy(model, operation, 'result is not allowed to be read back', constants_1.CrudFailureReason.RESULT_NOT_READABLE);\n            const injectResult = this.injectForRead(db, model, readArgs);\n            if (!injectResult) {\n                return { error, result: undefined };\n            }\n            // inject select needed for field-level read checks\n            this.injectReadCheckSelect(model, readArgs);\n            if (this.shouldLogQuery) {\n                this.logger.info(`[policy] checking read-back, \\`findFirst\\` ${model}:\\n${(0, utils_1.formatObject)(readArgs)}`);\n            }\n            const result = yield db[model].findFirst(readArgs);\n            if (!result) {\n                return { error, result: undefined };\n            }\n            this.postProcessForRead(result, model, selectIncludeClean);\n            return { result, error: undefined };\n        });\n    }\n    /**\n     * Injects field selection needed for checking field-level read policy check and evaluating\n     * entity checker into query args.\n     */\n    injectReadCheckSelect(model, args) {\n        // we need to recurse into relation fields before injecting the current level, because\n        // injection into current level can result in relation being selected/included, which\n        // can then cause infinite recursion when we visit relation later\n        var _a;\n        // recurse into relation fields\n        const visitTarget = (_a = args.select) !== null && _a !== void 0 ? _a : args.include;\n        if (visitTarget) {\n            for (const key of Object.keys(visitTarget)) {\n                const field = (0, cross_1.resolveField)(this.modelMeta, model, key);\n                if ((field === null || field === void 0 ? void 0 : field.isDataModel) && visitTarget[key]) {\n                    if (typeof visitTarget[key] !== 'object') {\n                        // v is \"true\", ensure it's an object\n                        visitTarget[key] = {};\n                    }\n                    this.injectReadCheckSelect(field.type, visitTarget[key]);\n                }\n            }\n        }\n        if (this.hasFieldLevelPolicy(model)) {\n            // recursively inject selection for fields needed for field-level read checks\n            const readFieldSelect = this.getFieldReadCheckSelector(model);\n            if (readFieldSelect) {\n                this.doInjectReadCheckSelect(model, args, { select: readFieldSelect });\n            }\n        }\n        const entityChecker = this.getEntityChecker(model, 'read');\n        if (entityChecker === null || entityChecker === void 0 ? void 0 : entityChecker.selector) {\n            this.doInjectReadCheckSelect(model, args, { select: entityChecker.selector });\n        }\n    }\n    doInjectReadCheckSelect(model, args, input) {\n        // omit should be ignored to avoid interfering with field selection\n        if (args.omit) {\n            delete args.omit;\n        }\n        if (!(input === null || input === void 0 ? void 0 : input.select)) {\n            return;\n        }\n        let target; // injection target\n        let isInclude = false; // if the target is include or select\n        if (args.select) {\n            target = args.select;\n            isInclude = false;\n        }\n        else if (args.include) {\n            target = args.include;\n            isInclude = true;\n        }\n        else {\n            target = args.select = this.makeAllScalarFieldSelect(model);\n            isInclude = false;\n        }\n        if (!isInclude) {\n            // merge selects\n            for (const [k, v] of Object.entries(input.select)) {\n                if (v === true) {\n                    if (!target[k]) {\n                        target[k] = true;\n                    }\n                }\n            }\n        }\n        // recurse into nested selects (relation fields)\n        for (const [k, v] of Object.entries(input.select)) {\n            if (typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.select)) {\n                const field = (0, cross_1.resolveField)(this.modelMeta, model, k);\n                if (field === null || field === void 0 ? void 0 : field.isDataModel) {\n                    // recurse into relation\n                    if (isInclude && target[k] === true) {\n                        // select all fields for the relation\n                        target[k] = { select: this.makeAllScalarFieldSelect(field.type) };\n                    }\n                    else if (!target[k]) {\n                        // ensure an empty select clause\n                        target[k] = { select: {} };\n                    }\n                    // recurse\n                    this.doInjectReadCheckSelect(field.type, target[k], v);\n                }\n            }\n        }\n    }\n    makeAllScalarFieldSelect(model) {\n        const fields = this.getModelFields(model);\n        const result = {};\n        if (fields) {\n            Object.entries(fields).forEach(([k, v]) => {\n                if (!v.isDataModel) {\n                    result[k] = true;\n                }\n            });\n        }\n        return result;\n    }\n    //#endregion\n    //#region Errors\n    deniedByPolicy(model, operation, extra, reason, zodErrors) {\n        const args = { clientVersion: (0, version_1.getVersion)(), code: constants_1.PrismaErrorCode.CONSTRAINED_FAILED, meta: {} };\n        if (reason) {\n            args.meta.reason = reason;\n        }\n        if (zodErrors) {\n            args.meta.zodErrors = zodErrors;\n        }\n        return (0, utils_1.prismaClientKnownRequestError)(this.db, this.prismaModule, `denied by policy: ${model} entities failed '${operation}' check${extra ? ', ' + extra : ''}`, args);\n    }\n    notFound(model) {\n        return (0, utils_1.prismaClientKnownRequestError)(this.db, this.prismaModule, `entity not found for model ${model}`, {\n            clientVersion: (0, version_1.getVersion)(),\n            code: 'P2025',\n        });\n    }\n    //#endregion\n    //#region Misc\n    /**\n     * Gets field selection for fetching pre-update entity values for the given model.\n     */\n    getPreValueSelect(model) {\n        const def = this.getModelPolicyDef(model);\n        return def.modelLevel.postUpdate.preUpdateSelector;\n    }\n    // get a merged selector object for all field-level read policies\n    getFieldReadCheckSelector(model) {\n        var _a, _b, _c;\n        const def = this.getModelPolicyDef(model);\n        let result = {};\n        const fieldLevel = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.read;\n        if (fieldLevel) {\n            for (const def of Object.values(fieldLevel)) {\n                if ((_b = def.entityChecker) === null || _b === void 0 ? void 0 : _b.selector) {\n                    result = (0, deepmerge_1.default)(result, def.entityChecker.selector);\n                }\n                if ((_c = def.overrideEntityChecker) === null || _c === void 0 ? void 0 : _c.selector) {\n                    result = (0, deepmerge_1.default)(result, def.overrideEntityChecker.selector);\n                }\n            }\n        }\n        return Object.keys(result).length > 0 ? result : undefined;\n    }\n    checkReadField(model, field, entity) {\n        var _a, _b, _c, _d, _e, _f;\n        const def = this.getModelPolicyDef(model);\n        // combine regular and override field-level entity checkers with OR\n        const checker = (_c = (_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.read) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c.entityChecker;\n        const overrideChecker = (_f = (_e = (_d = def.fieldLevel) === null || _d === void 0 ? void 0 : _d.read) === null || _e === void 0 ? void 0 : _e[field]) === null || _f === void 0 ? void 0 : _f.overrideEntityChecker;\n        const combinedChecker = this.combineEntityChecker(checker, overrideChecker, 'or');\n        if (combinedChecker === undefined) {\n            return true;\n        }\n        else {\n            return combinedChecker.func(entity, { user: this.user });\n        }\n    }\n    hasFieldValidation(model) {\n        var _a, _b;\n        return ((_b = (_a = this.policy.validation) === null || _a === void 0 ? void 0 : _a[(0, lower_case_first_1.lowerCaseFirst)(model)]) === null || _b === void 0 ? void 0 : _b.hasValidation) === true;\n    }\n    hasFieldLevelPolicy(model) {\n        var _a, _b;\n        const def = this.getModelPolicyDef(model);\n        return Object.keys((_b = (_a = def.fieldLevel) === null || _a === void 0 ? void 0 : _a.read) !== null && _b !== void 0 ? _b : {}).length > 0;\n    }\n    /**\n     * Gets Zod schema for the given model and access kind.\n     *\n     * @param kind If undefined, returns the full schema.\n     */\n    getZodSchema(model, kind = undefined) {\n        var _a, _b;\n        if (!this.hasFieldValidation(model)) {\n            return undefined;\n        }\n        const schemaKey = `${(0, upper_case_first_1.upperCaseFirst)(model)}${kind ? 'Prisma' + (0, upper_case_first_1.upperCaseFirst)(kind) : ''}Schema`;\n        return (_b = (_a = this.zodSchemas) === null || _a === void 0 ? void 0 : _a.models) === null || _b === void 0 ? void 0 : _b[schemaKey];\n    }\n    /**\n     * Post processing checks and clean-up for read model entities.\n     */\n    postProcessForRead(data, model, queryArgs) {\n        // preserve the original data as it may be needed for checking field-level readability,\n        // while the \"data\" will be manipulated during traversal (deleting unreadable fields)\n        const origData = this.clone(data);\n        return this.doPostProcessForRead(data, model, origData, queryArgs, this.hasFieldLevelPolicy(model));\n    }\n    doPostProcessForRead(data, model, fullData, queryArgs, hasFieldLevelPolicy, path = '') {\n        var _a, _b, _c;\n        if (data === null || data === undefined) {\n            return data;\n        }\n        let filteredData = data;\n        let filteredFullData = fullData;\n        const entityChecker = this.getEntityChecker(model, 'read');\n        if (entityChecker) {\n            if (Array.isArray(data)) {\n                filteredData = [];\n                filteredFullData = [];\n                for (const [entityData, entityFullData] of (0, cross_1.zip)(data, fullData)) {\n                    if (!entityChecker.func(entityData, { user: this.user })) {\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] dropping ${model} entity${path ? ' at ' + path : ''} due to entity checker`);\n                        }\n                    }\n                    else {\n                        filteredData.push(entityData);\n                        filteredFullData.push(entityFullData);\n                    }\n                }\n            }\n            else {\n                if (!entityChecker.func(data, { user: this.user })) {\n                    if (this.shouldLogQuery) {\n                        this.logger.info(`[policy] dropping ${model} entity${path ? ' at ' + path : ''} due to entity checker`);\n                    }\n                    return null;\n                }\n            }\n        }\n        for (const [entityData, entityFullData] of (0, cross_1.zip)(filteredData, filteredFullData)) {\n            if (typeof entityData !== 'object' || !entityData) {\n                continue;\n            }\n            for (const [field, fieldData] of Object.entries(entityData)) {\n                if (fieldData === undefined) {\n                    continue;\n                }\n                const fieldInfo = (0, cross_1.resolveField)(this.modelMeta, model, field);\n                if (!fieldInfo) {\n                    // could be _count, etc.\n                    continue;\n                }\n                if (((_a = queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.omit) === null || _a === void 0 ? void 0 : _a[field]) === true) {\n                    // respect `{ omit: { [field]: true } }`\n                    delete entityData[field];\n                    continue;\n                }\n                if (hasFieldLevelPolicy) {\n                    // 1. remove fields selected for checking field-level policies but not selected by the original query args\n                    // 2. evaluate field-level policies and remove fields that are not readable\n                    if (!fieldInfo.isDataModel) {\n                        // scalar field, delete unselected ones\n                        const select = queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.select;\n                        if (select && typeof select === 'object' && select[field] !== true) {\n                            // there's a select clause but this field is not included\n                            delete entityData[field];\n                            continue;\n                        }\n                    }\n                    else {\n                        // relation field, delete if not selected or included\n                        const include = queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.include;\n                        const select = queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.select;\n                        if (!(include === null || include === void 0 ? void 0 : include[field]) && !(select === null || select === void 0 ? void 0 : select[field])) {\n                            // relation field not included or selected\n                            delete entityData[field];\n                            continue;\n                        }\n                    }\n                    // delete unreadable fields\n                    if (!this.checkReadField(model, field, entityFullData)) {\n                        if (this.shouldLogQuery) {\n                            this.logger.info(`[policy] dropping unreadable field ${path ? path + '.' : ''}${field}`);\n                        }\n                        delete entityData[field];\n                        continue;\n                    }\n                }\n                if (fieldInfo.isDataModel) {\n                    // recurse into nested fields\n                    const nextArgs = (_c = ((_b = queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.select) !== null && _b !== void 0 ? _b : queryArgs === null || queryArgs === void 0 ? void 0 : queryArgs.include)) === null || _c === void 0 ? void 0 : _c[field];\n                    const nestedResult = this.doPostProcessForRead(fieldData, fieldInfo.type, entityFullData[field], nextArgs, this.hasFieldLevelPolicy(fieldInfo.type), path ? path + '.' + field : field);\n                    if (nestedResult === undefined) {\n                        delete entityData[field];\n                    }\n                    else {\n                        entityData[field] = nestedResult;\n                    }\n                }\n            }\n        }\n        return filteredData;\n    }\n    /**\n     * Clones an object and makes sure it's not empty.\n     */\n    clone(value) {\n        return value ? (0, deepcopy_1.default)(value) : {};\n    }\n    /**\n     * Replace content of `target` object with `withObject` in-place.\n     */\n    replace(target, withObject) {\n        if (!target || typeof target !== 'object' || !withObject || typeof withObject !== 'object') {\n            return;\n        }\n        // remove missing keys\n        for (const key of Object.keys(target)) {\n            if (!(key in withObject)) {\n                delete target[key];\n            }\n        }\n        // overwrite keys\n        for (const [key, value] of Object.entries(withObject)) {\n            target[key] = value;\n        }\n    }\n    /**\n     * Picks properties from an object.\n     */\n    pick(value, ...props) {\n        const v = value;\n        return props.reduce(function (result, prop) {\n            if (prop in v) {\n                result[prop] = v[prop];\n            }\n            return result;\n        }, {});\n    }\n    mergeWhereClause(where, extra) {\n        var _a;\n        if (!where) {\n            throw new Error('invalid where clause');\n        }\n        if (this.isTrue(extra)) {\n            return;\n        }\n        // instead of simply wrapping with AND, we preserve the structure\n        // of the original where clause and merge `extra` into it so that\n        // unique query can continue working\n        if (where.AND) {\n            // merge into existing AND clause\n            const conditions = Array.isArray(where.AND) ? [...where.AND] : [where.AND];\n            conditions.push(extra);\n            const combined = this.and(...conditions);\n            // make sure the merging always goes under AND\n            where.AND = (_a = combined.AND) !== null && _a !== void 0 ? _a : combined;\n        }\n        else {\n            // insert an AND clause\n            where.AND = [extra];\n        }\n    }\n    /**\n     * Given an entity data, returns an object only containing id fields.\n     */\n    getIdFieldValues(model, data) {\n        if (!data) {\n            return undefined;\n        }\n        const idFields = this.getIdFields(model);\n        return Object.fromEntries(idFields.map((f) => [f.name, data[f.name]]));\n    }\n}\nexports.PolicyUtil = PolicyUtil;\n//# sourceMappingURL=policy-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/policy/policy-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/promise.js":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/promise.js ***!
  \****************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createFluentPromise = exports.createDeferredPromise = void 0;\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\n/**\n * Creates a promise that only executes when it's awaited or .then() is called.\n * @see https://github.com/prisma/prisma/blob/main/packages/client/src/runtime/core/request/createPrismaPromise.ts\n */\nfunction createDeferredPromise(callback) {\n    let promise;\n    const cb = () => {\n        try {\n            return (promise !== null && promise !== void 0 ? promise : (promise = valueToPromise(callback())));\n        }\n        catch (err) {\n            // deal with synchronous errors\n            return Promise.reject(err);\n        }\n    };\n    return {\n        then(onFulfilled, onRejected) {\n            return cb().then(onFulfilled, onRejected);\n        },\n        catch(onRejected) {\n            return cb().catch(onRejected);\n        },\n        finally(onFinally) {\n            return cb().finally(onFinally);\n        },\n        [Symbol.toStringTag]: 'ZenStackPromise',\n    };\n}\nexports.createDeferredPromise = createDeferredPromise;\nfunction valueToPromise(thing) {\n    if (typeof thing === 'object' && typeof (thing === null || thing === void 0 ? void 0 : thing.then) === 'function') {\n        return thing;\n    }\n    else {\n        return Promise.resolve(thing);\n    }\n}\n/**\n * Create a deferred promise with fluent API call stub installed.\n *\n * @param callback The callback to execute when the promise is awaited.\n * @param parentArgs The parent promise's query args.\n * @param modelMeta The model metadata.\n * @param model The model name.\n */\nfunction createFluentPromise(callback, parentArgs, modelMeta, model) {\n    const promise = createDeferredPromise(callback);\n    const modelInfo = (0, cross_1.getModelInfo)(modelMeta, model);\n    if (!modelInfo) {\n        return promise;\n    }\n    // install fluent call stub for model fields\n    Object.values(modelInfo.fields)\n        .filter((field) => field.isDataModel)\n        .forEach((field) => {\n        // e.g., `posts` in `db.user.findUnique(...).posts()`\n        promise[field.name] = (fluentArgs) => {\n            if (field.isArray) {\n                // an array relation terminates fluent call chain\n                return createDeferredPromise(() => __awaiter(this, void 0, void 0, function* () {\n                    var _a;\n                    setFluentSelect(parentArgs, field.name, fluentArgs !== null && fluentArgs !== void 0 ? fluentArgs : true);\n                    const parentResult = yield promise;\n                    return (_a = parentResult === null || parentResult === void 0 ? void 0 : parentResult[field.name]) !== null && _a !== void 0 ? _a : null;\n                }));\n            }\n            else {\n                fluentArgs = Object.assign({}, fluentArgs);\n                // create a chained subsequent fluent call promise\n                return createFluentPromise(() => __awaiter(this, void 0, void 0, function* () {\n                    var _b;\n                    setFluentSelect(parentArgs, field.name, fluentArgs);\n                    const parentResult = yield promise;\n                    return (_b = parentResult === null || parentResult === void 0 ? void 0 : parentResult[field.name]) !== null && _b !== void 0 ? _b : null;\n                }), fluentArgs, modelMeta, field.type);\n            }\n        };\n    });\n    return promise;\n}\nexports.createFluentPromise = createFluentPromise;\nfunction setFluentSelect(args, fluentFieldName, fluentArgs) {\n    delete args.include;\n    args.select = { [fluentFieldName]: fluentArgs };\n}\n//# sourceMappingURL=promise.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3Byb21pc2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0EsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCLEdBQUcsNkJBQTZCO0FBQzNELGdCQUFnQixtQkFBTyxDQUFDLDJKQUFVO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQSxvQkFBb0I7QUFDcEI7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2VuaGFuY2VtZW50cy9wcm9taXNlLmpzPzU3YWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuY3JlYXRlRmx1ZW50UHJvbWlzZSA9IGV4cG9ydHMuY3JlYXRlRGVmZXJyZWRQcm9taXNlID0gdm9pZCAwO1xuY29uc3QgY3Jvc3NfMSA9IHJlcXVpcmUoXCIuLi9jcm9zc1wiKTtcbi8qKlxuICogQ3JlYXRlcyBhIHByb21pc2UgdGhhdCBvbmx5IGV4ZWN1dGVzIHdoZW4gaXQncyBhd2FpdGVkIG9yIC50aGVuKCkgaXMgY2FsbGVkLlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcHJpc21hL3ByaXNtYS9ibG9iL21haW4vcGFja2FnZXMvY2xpZW50L3NyYy9ydW50aW1lL2NvcmUvcmVxdWVzdC9jcmVhdGVQcmlzbWFQcm9taXNlLnRzXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZURlZmVycmVkUHJvbWlzZShjYWxsYmFjaykge1xuICAgIGxldCBwcm9taXNlO1xuICAgIGNvbnN0IGNiID0gKCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIChwcm9taXNlICE9PSBudWxsICYmIHByb21pc2UgIT09IHZvaWQgMCA/IHByb21pc2UgOiAocHJvbWlzZSA9IHZhbHVlVG9Qcm9taXNlKGNhbGxiYWNrKCkpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgLy8gZGVhbCB3aXRoIHN5bmNocm9ub3VzIGVycm9yc1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiB7XG4gICAgICAgIHRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBjYigpLnRoZW4ob25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQpO1xuICAgICAgICB9LFxuICAgICAgICBjYXRjaChvblJlamVjdGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gY2IoKS5jYXRjaChvblJlamVjdGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgZmluYWxseShvbkZpbmFsbHkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYigpLmZpbmFsbHkob25GaW5hbGx5KTtcbiAgICAgICAgfSxcbiAgICAgICAgW1N5bWJvbC50b1N0cmluZ1RhZ106ICdaZW5TdGFja1Byb21pc2UnLFxuICAgIH07XG59XG5leHBvcnRzLmNyZWF0ZURlZmVycmVkUHJvbWlzZSA9IGNyZWF0ZURlZmVycmVkUHJvbWlzZTtcbmZ1bmN0aW9uIHZhbHVlVG9Qcm9taXNlKHRoaW5nKSB7XG4gICAgaWYgKHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mICh0aGluZyA9PT0gbnVsbCB8fCB0aGluZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhpbmcudGhlbikgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGluZyk7XG4gICAgfVxufVxuLyoqXG4gKiBDcmVhdGUgYSBkZWZlcnJlZCBwcm9taXNlIHdpdGggZmx1ZW50IEFQSSBjYWxsIHN0dWIgaW5zdGFsbGVkLlxuICpcbiAqIEBwYXJhbSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIHRoZSBwcm9taXNlIGlzIGF3YWl0ZWQuXG4gKiBAcGFyYW0gcGFyZW50QXJncyBUaGUgcGFyZW50IHByb21pc2UncyBxdWVyeSBhcmdzLlxuICogQHBhcmFtIG1vZGVsTWV0YSBUaGUgbW9kZWwgbWV0YWRhdGEuXG4gKiBAcGFyYW0gbW9kZWwgVGhlIG1vZGVsIG5hbWUuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUZsdWVudFByb21pc2UoY2FsbGJhY2ssIHBhcmVudEFyZ3MsIG1vZGVsTWV0YSwgbW9kZWwpIHtcbiAgICBjb25zdCBwcm9taXNlID0gY3JlYXRlRGVmZXJyZWRQcm9taXNlKGNhbGxiYWNrKTtcbiAgICBjb25zdCBtb2RlbEluZm8gPSAoMCwgY3Jvc3NfMS5nZXRNb2RlbEluZm8pKG1vZGVsTWV0YSwgbW9kZWwpO1xuICAgIGlmICghbW9kZWxJbmZvKSB7XG4gICAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgICAvLyBpbnN0YWxsIGZsdWVudCBjYWxsIHN0dWIgZm9yIG1vZGVsIGZpZWxkc1xuICAgIE9iamVjdC52YWx1ZXMobW9kZWxJbmZvLmZpZWxkcylcbiAgICAgICAgLmZpbHRlcigoZmllbGQpID0+IGZpZWxkLmlzRGF0YU1vZGVsKVxuICAgICAgICAuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgLy8gZS5nLiwgYHBvc3RzYCBpbiBgZGIudXNlci5maW5kVW5pcXVlKC4uLikucG9zdHMoKWBcbiAgICAgICAgcHJvbWlzZVtmaWVsZC5uYW1lXSA9IChmbHVlbnRBcmdzKSA9PiB7XG4gICAgICAgICAgICBpZiAoZmllbGQuaXNBcnJheSkge1xuICAgICAgICAgICAgICAgIC8vIGFuIGFycmF5IHJlbGF0aW9uIHRlcm1pbmF0ZXMgZmx1ZW50IGNhbGwgY2hhaW5cbiAgICAgICAgICAgICAgICByZXR1cm4gY3JlYXRlRGVmZXJyZWRQcm9taXNlKCgpID0+IF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgICAgICAgICBzZXRGbHVlbnRTZWxlY3QocGFyZW50QXJncywgZmllbGQubmFtZSwgZmx1ZW50QXJncyAhPT0gbnVsbCAmJiBmbHVlbnRBcmdzICE9PSB2b2lkIDAgPyBmbHVlbnRBcmdzIDogdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFJlc3VsdCA9IHlpZWxkIHByb21pc2U7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoX2EgPSBwYXJlbnRSZXN1bHQgPT09IG51bGwgfHwgcGFyZW50UmVzdWx0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwYXJlbnRSZXN1bHRbZmllbGQubmFtZV0pICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IG51bGw7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZmx1ZW50QXJncyA9IE9iamVjdC5hc3NpZ24oe30sIGZsdWVudEFyZ3MpO1xuICAgICAgICAgICAgICAgIC8vIGNyZWF0ZSBhIGNoYWluZWQgc3Vic2VxdWVudCBmbHVlbnQgY2FsbCBwcm9taXNlXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUZsdWVudFByb21pc2UoKCkgPT4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgX2I7XG4gICAgICAgICAgICAgICAgICAgIHNldEZsdWVudFNlbGVjdChwYXJlbnRBcmdzLCBmaWVsZC5uYW1lLCBmbHVlbnRBcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyZW50UmVzdWx0ID0geWllbGQgcHJvbWlzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChfYiA9IHBhcmVudFJlc3VsdCA9PT0gbnVsbCB8fCBwYXJlbnRSZXN1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBhcmVudFJlc3VsdFtmaWVsZC5uYW1lXSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogbnVsbDtcbiAgICAgICAgICAgICAgICB9KSwgZmx1ZW50QXJncywgbW9kZWxNZXRhLCBmaWVsZC50eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbn1cbmV4cG9ydHMuY3JlYXRlRmx1ZW50UHJvbWlzZSA9IGNyZWF0ZUZsdWVudFByb21pc2U7XG5mdW5jdGlvbiBzZXRGbHVlbnRTZWxlY3QoYXJncywgZmx1ZW50RmllbGROYW1lLCBmbHVlbnRBcmdzKSB7XG4gICAgZGVsZXRlIGFyZ3MuaW5jbHVkZTtcbiAgICBhcmdzLnNlbGVjdCA9IHsgW2ZsdWVudEZpZWxkTmFtZV06IGZsdWVudEFyZ3MgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByb21pc2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/promise.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js ***!
  \**************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeProxy = exports.DefaultPrismaProxyHandler = void 0;\nconst deepcopy_1 = __importDefault(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nconst constants_1 = __webpack_require__(/*! ../constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\");\nconst promise_1 = __webpack_require__(/*! ./promise */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/promise.js\");\n/**\n * A default implementation of @see PrismaProxyHandler which directly\n * delegates to the wrapped Prisma client. It offers a few overridable\n * methods to allow more easily inject custom logic.\n */\nclass DefaultPrismaProxyHandler {\n    constructor(prisma, model, options) {\n        this.prisma = prisma;\n        this.model = model;\n        this.options = options;\n    }\n    withFluentCall(method, args, postProcess = true) {\n        args = args ? (0, deepcopy_1.default)(args) : {};\n        const promise = (0, promise_1.createFluentPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            args = yield this.preprocessArgs(method, args);\n            const r = yield this.prisma[this.model][method](args);\n            return postProcess ? this.processResultEntity(r) : r;\n        }), args, this.options.modelMeta, this.model);\n        return promise;\n    }\n    deferred(method, args, postProcess = true) {\n        return (0, promise_1.createDeferredPromise)(() => __awaiter(this, void 0, void 0, function* () {\n            args = yield this.preprocessArgs(method, args);\n            const r = yield this.prisma[this.model][method](args);\n            return postProcess ? this.processResultEntity(r) : r;\n        }));\n    }\n    findUnique(args) {\n        return this.withFluentCall('findUnique', args);\n    }\n    findUniqueOrThrow(args) {\n        return this.withFluentCall('findUniqueOrThrow', args);\n    }\n    findFirst(args) {\n        return this.withFluentCall('findFirst', args);\n    }\n    findFirstOrThrow(args) {\n        return this.withFluentCall('findFirstOrThrow', args);\n    }\n    findMany(args) {\n        return this.deferred('findMany', args);\n    }\n    create(args) {\n        return this.deferred('create', args);\n    }\n    createMany(args) {\n        return this.deferred('createMany', args, false);\n    }\n    createManyAndReturn(args) {\n        return this.deferred('createManyAndReturn', args);\n    }\n    update(args) {\n        return this.deferred('update', args);\n    }\n    updateMany(args) {\n        return this.deferred('updateMany', args, false);\n    }\n    upsert(args) {\n        return this.deferred('upsert', args);\n    }\n    delete(args) {\n        return this.deferred('delete', args);\n    }\n    deleteMany(args) {\n        return this.deferred('deleteMany', args, false);\n    }\n    aggregate(args) {\n        return this.deferred('aggregate', args, false);\n    }\n    groupBy(args) {\n        return this.deferred('groupBy', args, false);\n    }\n    count(args) {\n        return this.deferred('count', args, false);\n    }\n    subscribe(args) {\n        return this.deferred('subscribe', args, false);\n    }\n    /**\n     * Processes result entities before they're returned\n     */\n    processResultEntity(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return data;\n        });\n    }\n    /**\n     * Processes query args before they're passed to Prisma.\n     */\n    preprocessArgs(method, args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return args;\n        });\n    }\n}\nexports.DefaultPrismaProxyHandler = DefaultPrismaProxyHandler;\n// a marker for filtering error stack trace\nconst ERROR_MARKER = '__error_marker__';\nconst customInspect = Symbol.for('nodejs.util.inspect.custom');\n/**\n * Makes a Prisma client proxy.\n */\nfunction makeProxy(prisma, modelMeta, makeHandler, name = 'unnamed_enhancer', errorTransformer) {\n    const models = Object.keys(modelMeta.models).map((k) => k.toLowerCase());\n    const proxy = new Proxy(prisma, {\n        get: (target, prop, receiver) => {\n            // enhancer metadata\n            if (prop === constants_1.PRISMA_PROXY_ENHANCER) {\n                return name;\n            }\n            if (prop === '$transaction') {\n                // for interactive transactions, we need to proxy the transaction function so that\n                // when it runs the callback, it provides a proxy to the Prisma client wrapped with\n                // the same handler\n                //\n                // TODO: batch transaction is not supported yet, how?\n                const $transaction = Reflect.get(target, prop, receiver);\n                if ($transaction) {\n                    return (input, ...rest) => {\n                        if (Array.isArray(input)) {\n                            throw new Error('Sequential operations transaction is not supported by ZenStack enhanced Prisma client. Please use interactive transaction instead.');\n                        }\n                        else if (typeof input !== 'function') {\n                            throw new Error('A function value input is expected');\n                        }\n                        const txFunc = input;\n                        return $transaction.bind(target)((tx) => {\n                            // create a proxy for the transaction function\n                            const txProxy = makeProxy(tx, modelMeta, makeHandler, name + '$tx');\n                            // call the transaction function with the proxy\n                            return txFunc(txProxy);\n                        }, ...rest);\n                    };\n                }\n                else {\n                    return $transaction;\n                }\n            }\n            if (typeof prop !== 'string' || prop.startsWith('$') || !models.includes(prop.toLowerCase())) {\n                // skip non-model fields\n                return Reflect.get(target, prop, receiver);\n            }\n            const propVal = Reflect.get(target, prop, receiver);\n            if (!propVal || typeof propVal !== 'object') {\n                return propVal;\n            }\n            return createHandlerProxy(makeHandler(target, prop), propVal, prop, errorTransformer);\n        },\n    });\n    proxy[customInspect] = `$zenstack_prisma_${prisma._clientVersion}`;\n    return proxy;\n}\nexports.makeProxy = makeProxy;\n// A proxy for capturing errors and processing stack trace\nfunction createHandlerProxy(handler, origTarget, model, errorTransformer) {\n    return new Proxy(handler, {\n        get(target, propKey) {\n            const prop = target[propKey];\n            if (typeof prop !== 'function') {\n                // the proxy handler doesn't have this method, fall back to the original target\n                // this can happen for new methods added by Prisma Client Extensions\n                return origTarget[propKey];\n            }\n            // eslint-disable-next-line @typescript-eslint/ban-types\n            const origMethod = prop;\n            return function (...args) {\n                // using proxy with async functions results in messed-up error stack trace,\n                // create an error to capture the current stack\n                const capture = new Error(ERROR_MARKER);\n                // the original proxy returned by the PrismaClient proxy\n                const promise = origMethod.apply(handler, args);\n                // modify the error stack\n                const resultPromise = (0, promise_1.createDeferredPromise)(() => {\n                    return new Promise((resolve, reject) => {\n                        promise.then((value) => resolve(value), (err) => {\n                            if (capture.stack && err instanceof Error) {\n                                // save the original stack and replace it with a clean one\n                                err.internalStack = err.stack;\n                                err.stack = cleanCallStack(capture.stack, model, propKey.toString(), err.message);\n                            }\n                            if (errorTransformer) {\n                                err = errorTransformer ? errorTransformer(err) : err;\n                            }\n                            reject(err);\n                        });\n                    });\n                });\n                // carry over extra fields from the original promise\n                for (const [k, v] of Object.entries(promise)) {\n                    if (!(k in resultPromise)) {\n                        resultPromise[k] = v;\n                    }\n                }\n                return resultPromise;\n            };\n        },\n    });\n}\n// Filter out @zenstackhq/runtime stack (generated by proxy) from stack trace\nfunction cleanCallStack(stack, model, method, message) {\n    // message line\n    let resultStack = `Error calling enhanced Prisma method \\`${model}.${method}\\`: ${message}`;\n    const lines = stack.split('\\n');\n    let foundMarker = false;\n    for (let i = 0; i < lines.length; i++) {\n        const line = lines[i];\n        if (!foundMarker) {\n            // find marker, then stack trace lines follow\n            if (line.includes(ERROR_MARKER)) {\n                foundMarker = true;\n            }\n            continue;\n        }\n        // skip leading zenstack and anonymous lines\n        if (line.includes('@zenstackhq/runtime') || line.includes('Proxy.<anonymous>')) {\n            continue;\n        }\n        // capture remaining lines\n        resultStack += lines\n            .slice(i)\n            .map((l) => '\\n' + l)\n            .join();\n        break;\n    }\n    return resultStack;\n}\n//# sourceMappingURL=proxy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/proxy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js":
/*!********************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js ***!
  \********************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.QueryUtils = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nconst cross_1 = __webpack_require__(/*! ../cross */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/cross/index.js\");\nconst version_1 = __webpack_require__(/*! ../version */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\");\nclass QueryUtils {\n    constructor(prisma, options) {\n        this.prisma = prisma;\n        this.options = options;\n    }\n    getIdFields(model) {\n        return (0, cross_1.getIdFields)(this.options.modelMeta, model, true);\n    }\n    makeIdSelection(model) {\n        const idFields = this.getIdFields(model);\n        return Object.assign({}, ...idFields.map((f) => ({ [f.name]: true })));\n    }\n    getEntityIds(model, entityData) {\n        const idFields = this.getIdFields(model);\n        const result = {};\n        for (const idField of idFields) {\n            result[idField.name] = entityData[idField.name];\n        }\n        return result;\n    }\n    /**\n     * Initiates a transaction.\n     */\n    transaction(db, action) {\n        const fullDb = db;\n        if (fullDb['$transaction']) {\n            return fullDb.$transaction((tx) => {\n                tx[Symbol.for('nodejs.util.inspect.custom')] = 'PrismaClient$tx';\n                return action(tx);\n            }, {\n                maxWait: this.options.transactionMaxWait,\n                timeout: this.options.transactionTimeout,\n                isolationLevel: this.options.transactionIsolationLevel,\n            });\n        }\n        else {\n            // already in transaction, don't nest\n            return action(db);\n        }\n    }\n    /**\n     * Builds a reversed query for the given nested path.\n     */\n    buildReversedQuery(context, forMutationPayload = false, unsafeOperation = false) {\n        let result, currQuery;\n        let currField;\n        for (let i = context.nestingPath.length - 1; i >= 0; i--) {\n            const { field, model, where } = context.nestingPath[i];\n            // never modify the original where because it's shared in the structure\n            const visitWhere = Object.assign({}, where);\n            if (model && where) {\n                // make sure composite unique condition is flattened\n                this.flattenGeneratedUniqueField(model, visitWhere);\n            }\n            if (!result) {\n                // first segment (bottom), just use its where clause\n                result = currQuery = Object.assign({}, visitWhere);\n                currField = field;\n            }\n            else {\n                if (!currField) {\n                    throw this.unknownError(`missing field in nested path`);\n                }\n                if (!currField.backLink) {\n                    throw this.unknownError(`field ${currField.type}.${currField.name} doesn't have a backLink`);\n                }\n                const backLinkField = this.getModelField(currField.type, currField.backLink);\n                if (!backLinkField) {\n                    throw this.unknownError(`missing backLink field ${currField.backLink} in ${currField.type}`);\n                }\n                if (backLinkField.isArray && !forMutationPayload) {\n                    // many-side of relationship, wrap with \"some\" query\n                    currQuery[currField.backLink] = { some: Object.assign({}, visitWhere) };\n                    currQuery = currQuery[currField.backLink].some;\n                }\n                else {\n                    const fkMapping = where && backLinkField.isRelationOwner && backLinkField.foreignKeyMapping;\n                    // calculate if we should preserve the relation condition (e.g., { user: { id: 1 } })\n                    const shouldPreserveRelationCondition = \n                    // doing a mutation\n                    forMutationPayload &&\n                        // and it's a safe mutate\n                        !unsafeOperation &&\n                        // and the current segment is the direct parent (the last one is the mutate itself),\n                        // the relation condition should be preserved and will be converted to a \"connect\" later\n                        i === context.nestingPath.length - 2;\n                    if (fkMapping && !shouldPreserveRelationCondition) {\n                        // turn relation condition into foreign key condition, e.g.:\n                        //     { user: { id: 1 } } => { userId: 1 }\n                        for (const [r, fk] of Object.entries(fkMapping)) {\n                            currQuery[fk] = visitWhere[r];\n                        }\n                        if (i > 0) {\n                            // prepare for the next segment\n                            currQuery[currField.backLink] = {};\n                        }\n                    }\n                    else {\n                        // preserve the original structure\n                        currQuery[currField.backLink] = Object.assign({}, visitWhere);\n                    }\n                    if (forMutationPayload && currQuery[currField.backLink]) {\n                        // reconstruct compound unique field\n                        currQuery[currField.backLink] = this.composeCompoundUniqueField(backLinkField.type, currQuery[currField.backLink]);\n                    }\n                    currQuery = currQuery[currField.backLink];\n                }\n                currField = field;\n            }\n        }\n        return result;\n    }\n    /**\n     * Composes a compound unique field from multiple fields. E.g.:  { a: '1', b: '1' } => { a_b: { a: '1', b: '1' } }.\n     */\n    composeCompoundUniqueField(model, fieldData) {\n        const uniqueConstraints = (0, cross_1.getUniqueConstraints)(this.options.modelMeta, model);\n        if (!uniqueConstraints) {\n            return fieldData;\n        }\n        const result = (0, utils_1.clone)(fieldData);\n        for (const [name, constraint] of Object.entries(uniqueConstraints)) {\n            if (constraint.fields.length > 1 && constraint.fields.every((f) => fieldData[f] !== undefined)) {\n                // multi-field unique constraint, compose it\n                result[name] = constraint.fields.reduce((prev, field) => (Object.assign(Object.assign({}, prev), { [field]: fieldData[field] })), {});\n                constraint.fields.forEach((f) => delete result[f]);\n            }\n        }\n        return result;\n    }\n    /**\n     * Flattens a generated unique field. E.g.: { a_b: { a: '1', b: '1' } } => { a: '1', b: '1' }.\n     */\n    flattenGeneratedUniqueField(model, args) {\n        const uniqueConstraints = (0, cross_1.getUniqueConstraints)(this.options.modelMeta, model);\n        if (uniqueConstraints && Object.keys(uniqueConstraints).length > 0) {\n            for (const [field, value] of Object.entries(args)) {\n                if (uniqueConstraints[field] &&\n                    uniqueConstraints[field].fields.length > 1 &&\n                    typeof value === 'object') {\n                    // multi-field unique constraint, flatten it\n                    delete args[field];\n                    if (value) {\n                        for (const [f, v] of Object.entries(value)) {\n                            args[f] = v;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    validationError(message) {\n        return (0, utils_1.prismaClientValidationError)(this.prisma, this.options.prismaModule, message);\n    }\n    unknownError(message) {\n        return (0, utils_1.prismaClientUnknownRequestError)(this.prisma, this.options.prismaModule, message, {\n            clientVersion: (0, version_1.getVersion)(),\n        });\n    }\n    getModelFields(model) {\n        var _a;\n        return (_a = (0, cross_1.getModelInfo)(this.options.modelMeta, model)) === null || _a === void 0 ? void 0 : _a.fields;\n    }\n    /**\n     * Gets information for a specific model field.\n     */\n    getModelField(model, field) {\n        return (0, cross_1.resolveField)(this.options.modelMeta, model, field);\n    }\n}\nexports.QueryUtils = QueryUtils;\n//# sourceMappingURL=query-utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/query-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/types.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/types.js ***!
  \**************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHQtanMvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3R5cGVzLmpzPzE4OTkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js":
/*!**************************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js ***!
  \**************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.clone = exports.isAutoIncrementIdField = exports.isUnsafeMutate = exports.prismaClientUnknownRequestError = exports.prismaClientKnownRequestError = exports.prismaClientValidationError = exports.formatObject = void 0;\nconst deepcopy_1 = __importDefault(__webpack_require__(/*! deepcopy */ \"(rsc)/./node_modules/.pnpm/deepcopy@2.1.0/node_modules/deepcopy/index.mjs\"));\nconst safe_json_stringify_1 = __importDefault(__webpack_require__(/*! safe-json-stringify */ \"(rsc)/./node_modules/.pnpm/safe-json-stringify@1.2.0/node_modules/safe-json-stringify/index.js\"));\nconst __1 = __webpack_require__(/*! .. */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/index.js\");\n/**\n * Formats an object for pretty printing.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction formatObject(value, multiLine = true) {\n    return multiLine ? (0, safe_json_stringify_1.default)(value, undefined, 2) : (0, safe_json_stringify_1.default)(value);\n}\nexports.formatObject = formatObject;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction prismaClientValidationError(prisma, prismaModule, message) {\n    throw new prismaModule.PrismaClientValidationError(message, { clientVersion: prisma._clientVersion });\n}\nexports.prismaClientValidationError = prismaClientValidationError;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction prismaClientKnownRequestError(prisma, prismaModule, ...args) {\n    return new prismaModule.PrismaClientKnownRequestError(...args);\n}\nexports.prismaClientKnownRequestError = prismaClientKnownRequestError;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction prismaClientUnknownRequestError(prismaModule, ...args) {\n    throw new prismaModule.PrismaClientUnknownRequestError(...args);\n}\nexports.prismaClientUnknownRequestError = prismaClientUnknownRequestError;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction isUnsafeMutate(model, args, modelMeta) {\n    if (!args) {\n        return false;\n    }\n    for (const k of Object.keys(args)) {\n        const field = (0, __1.resolveField)(modelMeta, model, k);\n        if (field && (isAutoIncrementIdField(field) || field.isForeignKey)) {\n            return true;\n        }\n    }\n    return false;\n}\nexports.isUnsafeMutate = isUnsafeMutate;\nfunction isAutoIncrementIdField(field) {\n    return field.isId && field.isAutoIncrement;\n}\nexports.isAutoIncrementIdField = isAutoIncrementIdField;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction clone(value) {\n    return value ? (0, deepcopy_1.default)(value) : {};\n}\nexports.clone = clone;\n//# sourceMappingURL=utils.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZW5oYW5jZW1lbnRzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxHQUFHLDhCQUE4QixHQUFHLHNCQUFzQixHQUFHLHVDQUF1QyxHQUFHLHFDQUFxQyxHQUFHLG1DQUFtQyxHQUFHLG9CQUFvQjtBQUN0TixtQ0FBbUMsbUJBQU8sQ0FBQywyRkFBVTtBQUNyRCw4Q0FBOEMsbUJBQU8sQ0FBQywySEFBcUI7QUFDM0UsWUFBWSxtQkFBTyxDQUFDLCtJQUFJO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0E7QUFDQSxrRUFBa0Usc0NBQXNDO0FBQ3hHO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2VuaGFuY2VtZW50cy91dGlscy5qcz81OGE1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jbG9uZSA9IGV4cG9ydHMuaXNBdXRvSW5jcmVtZW50SWRGaWVsZCA9IGV4cG9ydHMuaXNVbnNhZmVNdXRhdGUgPSBleHBvcnRzLnByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IgPSBleHBvcnRzLnByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yID0gZXhwb3J0cy5wcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IgPSBleHBvcnRzLmZvcm1hdE9iamVjdCA9IHZvaWQgMDtcbmNvbnN0IGRlZXBjb3B5XzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcImRlZXBjb3B5XCIpKTtcbmNvbnN0IHNhZmVfanNvbl9zdHJpbmdpZnlfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwic2FmZS1qc29uLXN0cmluZ2lmeVwiKSk7XG5jb25zdCBfXzEgPSByZXF1aXJlKFwiLi5cIik7XG4vKipcbiAqIEZvcm1hdHMgYW4gb2JqZWN0IGZvciBwcmV0dHkgcHJpbnRpbmcuXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBmb3JtYXRPYmplY3QodmFsdWUsIG11bHRpTGluZSA9IHRydWUpIHtcbiAgICByZXR1cm4gbXVsdGlMaW5lID8gKDAsIHNhZmVfanNvbl9zdHJpbmdpZnlfMS5kZWZhdWx0KSh2YWx1ZSwgdW5kZWZpbmVkLCAyKSA6ICgwLCBzYWZlX2pzb25fc3RyaW5naWZ5XzEuZGVmYXVsdCkodmFsdWUpO1xufVxuZXhwb3J0cy5mb3JtYXRPYmplY3QgPSBmb3JtYXRPYmplY3Q7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gcHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yKHByaXNtYSwgcHJpc21hTW9kdWxlLCBtZXNzYWdlKSB7XG4gICAgdGhyb3cgbmV3IHByaXNtYU1vZHVsZS5QcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IobWVzc2FnZSwgeyBjbGllbnRWZXJzaW9uOiBwcmlzbWEuX2NsaWVudFZlcnNpb24gfSk7XG59XG5leHBvcnRzLnByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciA9IHByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBwcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvcihwcmlzbWEsIHByaXNtYU1vZHVsZSwgLi4uYXJncykge1xuICAgIHJldHVybiBuZXcgcHJpc21hTW9kdWxlLlByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yKC4uLmFyZ3MpO1xufVxuZXhwb3J0cy5wcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvciA9IHByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIHByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IocHJpc21hTW9kdWxlLCAuLi5hcmdzKSB7XG4gICAgdGhyb3cgbmV3IHByaXNtYU1vZHVsZS5QcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yKC4uLmFyZ3MpO1xufVxuZXhwb3J0cy5wcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yID0gcHJpc21hQ2xpZW50VW5rbm93blJlcXVlc3RFcnJvcjtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBpc1Vuc2FmZU11dGF0ZShtb2RlbCwgYXJncywgbW9kZWxNZXRhKSB7XG4gICAgaWYgKCFhcmdzKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKGFyZ3MpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkID0gKDAsIF9fMS5yZXNvbHZlRmllbGQpKG1vZGVsTWV0YSwgbW9kZWwsIGspO1xuICAgICAgICBpZiAoZmllbGQgJiYgKGlzQXV0b0luY3JlbWVudElkRmllbGQoZmllbGQpIHx8IGZpZWxkLmlzRm9yZWlnbktleSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cbmV4cG9ydHMuaXNVbnNhZmVNdXRhdGUgPSBpc1Vuc2FmZU11dGF0ZTtcbmZ1bmN0aW9uIGlzQXV0b0luY3JlbWVudElkRmllbGQoZmllbGQpIHtcbiAgICByZXR1cm4gZmllbGQuaXNJZCAmJiBmaWVsZC5pc0F1dG9JbmNyZW1lbnQ7XG59XG5leHBvcnRzLmlzQXV0b0luY3JlbWVudElkRmllbGQgPSBpc0F1dG9JbmNyZW1lbnRJZEZpZWxkO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlID8gKDAsIGRlZXBjb3B5XzEuZGVmYXVsdCkodmFsdWUpIDoge307XG59XG5leHBvcnRzLmNsb25lID0gY2xvbmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/error.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/error.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isPrismaClientValidationError = exports.isPrismaClientUnknownRequestError = exports.isPrismaClientKnownRequestError = void 0;\n/* eslint-disable @typescript-eslint/no-explicit-any */\nfunction isPrismaClientKnownRequestError(err) {\n    return findConstructorName(err.__proto__, 'PrismaClientKnownRequestError');\n}\nexports.isPrismaClientKnownRequestError = isPrismaClientKnownRequestError;\nfunction isPrismaClientUnknownRequestError(err) {\n    return findConstructorName(err.__proto__, 'PrismaClientUnknownRequestError');\n}\nexports.isPrismaClientUnknownRequestError = isPrismaClientUnknownRequestError;\nfunction isPrismaClientValidationError(err) {\n    return findConstructorName(err.__proto__, 'PrismaClientValidationError');\n}\nexports.isPrismaClientValidationError = isPrismaClientValidationError;\nfunction findConstructorName(proto, name) {\n    if (!proto) {\n        return false;\n    }\n    return proto.constructor.name === name || findConstructorName(proto.__proto__, name);\n}\n//# sourceMappingURL=error.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvZXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDLEdBQUcseUNBQXlDLEdBQUcsdUNBQXVDO0FBQzNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9AbWFyYmxpc20vbmV4dC1qcy8uL25vZGVfbW9kdWxlcy8ucG5wbS9AemVuc3RhY2tocStydW50aW1lQDIuMi40X0BwcmlzbWErY2xpZW50QDUuMTcuMF9wcmlzbWFANS4xNy4wXy9ub2RlX21vZHVsZXMvQHplbnN0YWNraHEvcnVudGltZS9lcnJvci5qcz9lNTAyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pc1ByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciA9IGV4cG9ydHMuaXNQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yID0gZXhwb3J0cy5pc1ByaXNtYUNsaWVudEtub3duUmVxdWVzdEVycm9yID0gdm9pZCAwO1xuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuZnVuY3Rpb24gaXNQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvcihlcnIpIHtcbiAgICByZXR1cm4gZmluZENvbnN0cnVjdG9yTmFtZShlcnIuX19wcm90b19fLCAnUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3InKTtcbn1cbmV4cG9ydHMuaXNQcmlzbWFDbGllbnRLbm93blJlcXVlc3RFcnJvciA9IGlzUHJpc21hQ2xpZW50S25vd25SZXF1ZXN0RXJyb3I7XG5mdW5jdGlvbiBpc1ByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIGZpbmRDb25zdHJ1Y3Rvck5hbWUoZXJyLl9fcHJvdG9fXywgJ1ByaXNtYUNsaWVudFVua25vd25SZXF1ZXN0RXJyb3InKTtcbn1cbmV4cG9ydHMuaXNQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yID0gaXNQcmlzbWFDbGllbnRVbmtub3duUmVxdWVzdEVycm9yO1xuZnVuY3Rpb24gaXNQcmlzbWFDbGllbnRWYWxpZGF0aW9uRXJyb3IoZXJyKSB7XG4gICAgcmV0dXJuIGZpbmRDb25zdHJ1Y3Rvck5hbWUoZXJyLl9fcHJvdG9fXywgJ1ByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvcicpO1xufVxuZXhwb3J0cy5pc1ByaXNtYUNsaWVudFZhbGlkYXRpb25FcnJvciA9IGlzUHJpc21hQ2xpZW50VmFsaWRhdGlvbkVycm9yO1xuZnVuY3Rpb24gZmluZENvbnN0cnVjdG9yTmFtZShwcm90bywgbmFtZSkge1xuICAgIGlmICghcHJvdG8pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gcHJvdG8uY29uc3RydWN0b3IubmFtZSA9PT0gbmFtZSB8fCBmaW5kQ29uc3RydWN0b3JOYW1lKHByb3RvLl9fcHJvdG9fXywgbmFtZSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/error.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/index.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/index.js ***!
  \*************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./constants */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/constants.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enhancements */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhancements/index.js\"), exports);\n__exportStar(__webpack_require__(/*! ./error */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/error.js\"), exports);\n__exportStar(__webpack_require__(/*! ./types */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/types.js\"), exports);\n__exportStar(__webpack_require__(/*! ./validation */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/validation.js\"), exports);\n__exportStar(__webpack_require__(/*! ./version */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js\"), exports);\n__exportStar(__webpack_require__(/*! ./enhance */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/enhance.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsYUFBYSxtQkFBTyxDQUFDLDRKQUFhO0FBQ2xDLGFBQWEsbUJBQU8sQ0FBQyx3S0FBZ0I7QUFDckMsYUFBYSxtQkFBTyxDQUFDLG9KQUFTO0FBQzlCLGFBQWEsbUJBQU8sQ0FBQyxvSkFBUztBQUM5QixhQUFhLG1CQUFPLENBQUMsOEpBQWM7QUFDbkMsYUFBYSxtQkFBTyxDQUFDLHdKQUFXO0FBQ2hDLGFBQWEsbUJBQU8sQ0FBQyx3SkFBVztBQUNoQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL2luZGV4LmpzPzEzMTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9jb25zdGFudHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2VuaGFuY2VtZW50c1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXJyb3JcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92YWxpZGF0aW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi92ZXJzaW9uXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9lbmhhbmNlXCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/types.js":
/*!*************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/types.js ***!
  \*************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\n/* eslint-disable @typescript-eslint/no-explicit-any */\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=types.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvdHlwZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL3R5cGVzLmpzP2E4MTAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/types.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/validation.js":
/*!******************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/validation.js ***!
  \******************************************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.allFieldsEqual = exports.hasAllFields = exports.validate = exports.ValidationError = void 0;\nconst zod_validation_error_1 = __webpack_require__(/*! zod-validation-error */ \"(rsc)/./node_modules/.pnpm/zod-validation-error@1.5.0_zod@3.23.8/node_modules/zod-validation-error/dist/esm/index.js\");\n/**\n * Error indicating violations of field-level constraints\n */\nclass ValidationError {\n    constructor(message) {\n        this.message = message;\n    }\n}\nexports.ValidationError = ValidationError;\n/**\n * Validate the given data with the given zod schema (for field-level constraints)\n */\nfunction validate(validator, data) {\n    try {\n        validator.parse(data);\n    }\n    catch (err) {\n        throw new ValidationError((0, zod_validation_error_1.fromZodError)(err).message);\n    }\n}\nexports.validate = validate;\n/**\n * Check if the given object has all the given fields, not null or undefined\n * @param obj\n * @param fields\n * @returns\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction hasAllFields(obj, fields) {\n    if (typeof obj !== 'object' || !obj) {\n        return false;\n    }\n    return fields.every((f) => obj[f] !== undefined && obj[f] !== null);\n}\nexports.hasAllFields = hasAllFields;\n/**\n * Check if the given objects have equal values for the given fields. Returns\n * false if either object is nullish or is not an object.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction allFieldsEqual(obj1, obj2, fields) {\n    if (!obj1 || !obj2 || typeof obj1 !== 'object' || typeof obj2 !== 'object') {\n        return false;\n    }\n    return fields.every((f) => obj1[f] === obj2[f]);\n}\nexports.allFieldsEqual = allFieldsEqual;\n//# sourceMappingURL=validation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvdmFsaWRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0IsR0FBRyxvQkFBb0IsR0FBRyxnQkFBZ0IsR0FBRyx1QkFBdUI7QUFDMUYsK0JBQStCLG1CQUFPLENBQUMsa0pBQXNCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjtBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHQtanMvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvdmFsaWRhdGlvbi5qcz9iNTY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hbGxGaWVsZHNFcXVhbCA9IGV4cG9ydHMuaGFzQWxsRmllbGRzID0gZXhwb3J0cy52YWxpZGF0ZSA9IGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gdm9pZCAwO1xuY29uc3Qgem9kX3ZhbGlkYXRpb25fZXJyb3JfMSA9IHJlcXVpcmUoXCJ6b2QtdmFsaWRhdGlvbi1lcnJvclwiKTtcbi8qKlxuICogRXJyb3IgaW5kaWNhdGluZyB2aW9sYXRpb25zIG9mIGZpZWxkLWxldmVsIGNvbnN0cmFpbnRzXG4gKi9cbmNsYXNzIFZhbGlkYXRpb25FcnJvciB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSkge1xuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIH1cbn1cbmV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gVmFsaWRhdGlvbkVycm9yO1xuLyoqXG4gKiBWYWxpZGF0ZSB0aGUgZ2l2ZW4gZGF0YSB3aXRoIHRoZSBnaXZlbiB6b2Qgc2NoZW1hIChmb3IgZmllbGQtbGV2ZWwgY29uc3RyYWludHMpXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlKHZhbGlkYXRvciwgZGF0YSkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhbGlkYXRvci5wYXJzZShkYXRhKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICB0aHJvdyBuZXcgVmFsaWRhdGlvbkVycm9yKCgwLCB6b2RfdmFsaWRhdGlvbl9lcnJvcl8xLmZyb21ab2RFcnJvcikoZXJyKS5tZXNzYWdlKTtcbiAgICB9XG59XG5leHBvcnRzLnZhbGlkYXRlID0gdmFsaWRhdGU7XG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiBvYmplY3QgaGFzIGFsbCB0aGUgZ2l2ZW4gZmllbGRzLCBub3QgbnVsbCBvciB1bmRlZmluZWRcbiAqIEBwYXJhbSBvYmpcbiAqIEBwYXJhbSBmaWVsZHNcbiAqIEByZXR1cm5zXG4gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5mdW5jdGlvbiBoYXNBbGxGaWVsZHMob2JqLCBmaWVsZHMpIHtcbiAgICBpZiAodHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIW9iaikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHMuZXZlcnkoKGYpID0+IG9ialtmXSAhPT0gdW5kZWZpbmVkICYmIG9ialtmXSAhPT0gbnVsbCk7XG59XG5leHBvcnRzLmhhc0FsbEZpZWxkcyA9IGhhc0FsbEZpZWxkcztcbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIG9iamVjdHMgaGF2ZSBlcXVhbCB2YWx1ZXMgZm9yIHRoZSBnaXZlbiBmaWVsZHMuIFJldHVybnNcbiAqIGZhbHNlIGlmIGVpdGhlciBvYmplY3QgaXMgbnVsbGlzaCBvciBpcyBub3QgYW4gb2JqZWN0LlxuICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuZnVuY3Rpb24gYWxsRmllbGRzRXF1YWwob2JqMSwgb2JqMiwgZmllbGRzKSB7XG4gICAgaWYgKCFvYmoxIHx8ICFvYmoyIHx8IHR5cGVvZiBvYmoxICE9PSAnb2JqZWN0JyB8fCB0eXBlb2Ygb2JqMiAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gZmllbGRzLmV2ZXJ5KChmKSA9PiBvYmoxW2ZdID09PSBvYmoyW2ZdKTtcbn1cbmV4cG9ydHMuYWxsRmllbGRzRXF1YWwgPSBhbGxGaWVsZHNFcXVhbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZhbGlkYXRpb24uanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/validation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js":
/*!***************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js ***!
  \***************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getVersion = void 0;\nconst pkgJson = __importStar(__webpack_require__(/*! ./package.json */ \"(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/package.json\"));\n/**\n * Gets this package's version.\n * @returns\n */\nfunction getVersion() {\n    return pkgJson.version;\n}\nexports.getVersion = getVersion;\n//# sourceMappingURL=version.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvdmVyc2lvbi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQ0FBb0M7QUFDbkQ7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EsMENBQTBDLDRCQUE0QjtBQUN0RSxDQUFDO0FBQ0Q7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLDZCQUE2QixtQkFBTyxDQUFDLCtKQUFnQjtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQiIsInNvdXJjZXMiOlsid2VicGFjazovL0BtYXJibGlzbS9uZXh0LWpzLy4vbm9kZV9tb2R1bGVzLy5wbnBtL0B6ZW5zdGFja2hxK3J1bnRpbWVAMi4yLjRfQHByaXNtYStjbGllbnRANS4xNy4wX3ByaXNtYUA1LjE3LjBfL25vZGVfbW9kdWxlcy9AemVuc3RhY2tocS9ydW50aW1lL3ZlcnNpb24uanM/NTgxOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5nZXRWZXJzaW9uID0gdm9pZCAwO1xuY29uc3QgcGtnSnNvbiA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9wYWNrYWdlLmpzb25cIikpO1xuLyoqXG4gKiBHZXRzIHRoaXMgcGFja2FnZSdzIHZlcnNpb24uXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiBnZXRWZXJzaW9uKCkge1xuICAgIHJldHVybiBwa2dKc29uLnZlcnNpb247XG59XG5leHBvcnRzLmdldFZlcnNpb24gPSBnZXRWZXJzaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/version.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/zod/input.js":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/zod/input.js ***!
  \*****************************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("let schemas;\ntry {\n    schemas = __webpack_require__(Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '.zenstack/zod/input'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()));\n} catch {}\n\nmodule.exports = schemas && {\n    ...schemas,\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvem9kL2lucHV0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQSxjQUFjLG1CQUFPLENBQUMsa0pBQXFCO0FBQzNDLEVBQUU7O0FBRUY7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQG1hcmJsaXNtL25leHQtanMvLi9ub2RlX21vZHVsZXMvLnBucG0vQHplbnN0YWNraHErcnVudGltZUAyLjIuNF9AcHJpc21hK2NsaWVudEA1LjE3LjBfcHJpc21hQDUuMTcuMF8vbm9kZV9tb2R1bGVzL0B6ZW5zdGFja2hxL3J1bnRpbWUvem9kL2lucHV0LmpzPzI1YmUiXSwic291cmNlc0NvbnRlbnQiOlsibGV0IHNjaGVtYXM7XG50cnkge1xuICAgIHNjaGVtYXMgPSByZXF1aXJlKCcuemVuc3RhY2svem9kL2lucHV0Jyk7XG59IGNhdGNoIHt9XG5cbm1vZHVsZS5leHBvcnRzID0gc2NoZW1hcyAmJiB7XG4gICAgLi4uc2NoZW1hcyxcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/zod/input.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/package.json":
/*!*****************************************************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@zenstackhq+runtime@2.2.4_@prisma+client@5.17.0_prisma@5.17.0_/node_modules/@zenstackhq/runtime/package.json ***!
  \*****************************************************************************************************************************************/
/***/ ((module) => {

"use strict";
module.exports = /*#__PURE__*/JSON.parse('{"name":"@zenstackhq/runtime","displayName":"ZenStack Runtime Library","version":"2.2.4","description":"Runtime of ZenStack for both client-side and server-side environments.","repository":{"type":"git","url":"https://github.com/zenstackhq/zenstack"},"main":"index.js","types":"index.d.ts","exports":{".":{"types":"./index.d.ts","default":"./index.js"},"./edge":{"types":"./edge.d.ts","default":"./edge.js"},"./enhancements":{"types":"./enhancements/index.d.ts","default":"./enhancements/index.js"},"./constraint-solver":{"types":"./constraint-solver.d.ts","default":"./constraint-solver.js"},"./zod":{"types":"./zod/index.d.ts","default":"./zod/index.js"},"./zod/input":{"types":"./zod/input.d.ts","default":"./zod/input.js"},"./zod/models":{"types":"./zod/models.d.ts","default":"./zod/models.js"},"./zod/objects":{"types":"./zod/objects.d.ts","default":"./zod/objects.js"},"./browser":{"types":"./browser/index.d.ts","import":"./browser/index.mjs","require":"./browser/index.js","default":"./browser/index.js"},"./cross":{"types":"./cross/index.d.ts","import":"./cross/index.mjs","require":"./cross/index.js","default":"./cross/index.js"},"./model-meta":{"types":"./model-meta.d.ts","default":"./model-meta.js"},"./models":{"types":"./models.d.ts"},"./package.json":{"default":"./package.json"}},"publishConfig":{"directory":"dist","linkDirectory":true},"dependencies":{"bcryptjs":"^2.4.3","buffer":"^6.0.3","change-case":"^4.1.2","decimal.js":"^10.4.2","deepcopy":"^2.1.0","deepmerge":"^4.3.1","is-plain-object":"^5.0.0","logic-solver":"^2.0.1","lower-case-first":"^2.0.2","pluralize":"^8.0.0","safe-json-stringify":"^1.2.0","semver":"^7.5.2","superjson":"^1.11.0","tiny-invariant":"^1.3.1","ts-pattern":"^4.3.0","tslib":"^2.4.1","upper-case-first":"^2.0.2","uuid":"^9.0.0","zod":"^3.22.4","zod-validation-error":"^1.5.0"},"peerDependencies":{"@prisma/client":"5.0.0 - 5.15.x"},"author":{"name":"ZenStack Team"},"homepage":"https://zenstack.dev","license":"MIT","devDependencies":{"@types/bcryptjs":"^2.4.2","@types/pluralize":"^0.0.29","@types/safe-json-stringify":"^1.1.5","@types/semver":"^7.3.13","@types/uuid":"^8.3.4"},"scripts":{"clean":"rimraf dist","build":"pnpm lint --max-warnings=0 && pnpm clean && tsc && tsup-node --config ./tsup-browser.config.ts && tsup-node --config ./tsup-cross.config.ts && copyfiles ./package.json ./README.md ../../LICENSE dist && copyfiles -u1 \\"res/**/*\\" dist && pnpm pack dist --pack-destination ../../../.build","watch":"concurrently \\"tsc --watch\\" \\"tsup-node --config ./tsup-browser.config.ts --watch\\" \\"tsup-node --config ./tsup-cross.config.ts --watch\\"","lint":"eslint src --ext ts"}}');

/***/ })

};
;